
c:/Users/venne/OneDrive/Documents/GitHub/ee1301/Iot2/iot2_3/target/3.3.0/photon/iot2_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002454  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2470  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  080a2474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000047c  20000078  20000078  00030078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a24ec  080a24ec  000224ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2514  080a2514  00022514  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009af1b  00000000  00000000  00022518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000e71d  00000000  00000000  000bd433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00013644  00000000  00000000  000cbb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001be0  00000000  00000000  000df194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003c80  00000000  00000000  000e0d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00025cb0  00000000  00000000  000e49f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002776f  00000000  00000000  0010a6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b0715  00000000  00000000  00131e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004498  00000000  00000000  001e2528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f85f 	bl	80a20f0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f867 	bl	80a210c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2474 	.word	0x080a2474
 80a004c:	20000078 	.word	0x20000078
 80a0050:	20000078 	.word	0x20000078
 80a0054:	200004f1 	.word	0x200004f1
 80a0058:	200004f1 	.word	0x200004f1

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fc89 	bl	80a1974 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a244c 	.word	0x080a244c
 80a0080:	080a2470 	.word	0x080a2470

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f817 	bl	80a00bc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 bc27 	b.w	80a18e4 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f001 bb4b 	b.w	80a1730 <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f001 bb51 	b.w	80a1740 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  strip.begin();
 80a00b0:	4801      	ldr	r0, [pc, #4]	; (80a00b8 <setup+0x8>)
 80a00b2:	f000 b875 	b.w	80a01a0 <_ZN17Adafruit_NeoPixel5beginEv>
 80a00b6:	bf00      	nop
 80a00b8:	20000078 	.word	0x20000078

080a00bc <loop>:
    /*int PixelColorCyan = strip.Color(  0 , 255, 255);
    int PixelColorRed  = strip.Color(  255,   0,   0);
    int PixelColorGold = strip.Color(  60,  50,   5);
    *///Setup some colors, WS2812 version
    
    int PixelColorCyan = strip.Color(   255 , 0, 255);
 80a00bc:	22ff      	movs	r2, #255	; 0xff
void loop() {
 80a00be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int PixelColorCyan = strip.Color(   255 , 0, 255);
 80a00c0:	2100      	movs	r1, #0
 80a00c2:	4610      	mov	r0, r2
 80a00c4:	f001 f991 	bl	80a13ea <_ZN17Adafruit_NeoPixel5ColorEhhh>
    int PixelColorRed  = strip.Color(  0,   80,   0);
 80a00c8:	2200      	movs	r2, #0
    int PixelColorCyan = strip.Color(   255 , 0, 255);
 80a00ca:	4607      	mov	r7, r0
    int PixelColorRed  = strip.Color(  0,   80,   0);
 80a00cc:	2150      	movs	r1, #80	; 0x50
 80a00ce:	4610      	mov	r0, r2
 80a00d0:	f001 f98b 	bl	80a13ea <_ZN17Adafruit_NeoPixel5ColorEhhh>
    int PixelColorGold = strip.Color(  50,  60,   5);
 80a00d4:	2205      	movs	r2, #5
    int PixelColorRed  = strip.Color(  0,   80,   0);
 80a00d6:	4605      	mov	r5, r0
    int PixelColorGold = strip.Color(  50,  60,   5);
 80a00d8:	213c      	movs	r1, #60	; 0x3c
 80a00da:	2032      	movs	r0, #50	; 0x32
 80a00dc:	f001 f985 	bl	80a13ea <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a00e0:	4606      	mov	r6, r0
    

    //Set first pixel to cyan
    strip.setPixelColor(0, PixelColorCyan);
 80a00e2:	4c17      	ldr	r4, [pc, #92]	; (80a0140 <loop+0x84>)
 80a00e4:	463a      	mov	r2, r7
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	2100      	movs	r1, #0
 80a00ea:	f001 f93b 	bl	80a1364 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    //set second pixel to red
    strip.setPixelColor(1, PixelColorRed);
 80a00ee:	462a      	mov	r2, r5
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	2101      	movs	r1, #1
 80a00f4:	f001 f936 	bl	80a1364 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    //set third pixel to Gopher Gold!
    strip.setPixelColor(2, PixelColorGold);
 80a00f8:	4632      	mov	r2, r6
 80a00fa:	2102      	movs	r1, #2
 80a00fc:	4620      	mov	r0, r4
 80a00fe:	f001 f931 	bl	80a1364 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
 80a0102:	4620      	mov	r0, r4
 80a0104:	f000 f882 	bl	80a020c <_ZN17Adafruit_NeoPixel4showEv>
    delay(1000);  //wait 1sec
 80a0108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a010c:	f001 fbaa 	bl	80a1864 <delay>

    //flip the red and gold
    strip.setPixelColor(0, PixelColorCyan);
 80a0110:	463a      	mov	r2, r7
 80a0112:	4620      	mov	r0, r4
 80a0114:	2100      	movs	r1, #0
 80a0116:	f001 f925 	bl	80a1364 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.setPixelColor(1, PixelColorGold);
 80a011a:	4632      	mov	r2, r6
 80a011c:	4620      	mov	r0, r4
 80a011e:	2101      	movs	r1, #1
 80a0120:	f001 f920 	bl	80a1364 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.setPixelColor(2, PixelColorRed);
 80a0124:	462a      	mov	r2, r5
 80a0126:	4620      	mov	r0, r4
 80a0128:	2102      	movs	r1, #2
 80a012a:	f001 f91b 	bl	80a1364 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    strip.show();
 80a012e:	4620      	mov	r0, r4
 80a0130:	f000 f86c 	bl	80a020c <_ZN17Adafruit_NeoPixel4showEv>
    delay(1000);  //wait 1sec
}
 80a0134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    delay(1000);  //wait 1sec
 80a0138:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a013c:	f001 bb92 	b.w	80a1864 <delay>
 80a0140:	20000078 	.word	0x20000078

080a0144 <_GLOBAL__sub_I_PIXEL_PIN>:
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0144:	4b04      	ldr	r3, [pc, #16]	; (80a0158 <_GLOBAL__sub_I_PIXEL_PIN+0x14>)
 80a0146:	4a05      	ldr	r2, [pc, #20]	; (80a015c <_GLOBAL__sub_I_PIXEL_PIN+0x18>)
 80a0148:	4905      	ldr	r1, [pc, #20]	; (80a0160 <_GLOBAL__sub_I_PIXEL_PIN+0x1c>)
 80a014a:	781b      	ldrb	r3, [r3, #0]
 80a014c:	7812      	ldrb	r2, [r2, #0]
 80a014e:	8809      	ldrh	r1, [r1, #0]
 80a0150:	4804      	ldr	r0, [pc, #16]	; (80a0164 <_GLOBAL__sub_I_PIXEL_PIN+0x20>)
 80a0152:	f000 b84a 	b.w	80a01ea <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0156:	bf00      	nop
 80a0158:	20000008 	.word	0x20000008
 80a015c:	20000004 	.word	0x20000004
 80a0160:	20000000 	.word	0x20000000
 80a0164:	20000078 	.word	0x20000078

080a0168 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0168:	b538      	push	{r3, r4, r5, lr}
 80a016a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a016c:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a016e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0170:	b108      	cbz	r0, 80a0176 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0172:	f001 fae5 	bl	80a1740 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0176:	79a3      	ldrb	r3, [r4, #6]
 80a0178:	2b06      	cmp	r3, #6
 80a017a:	bf0c      	ite	eq
 80a017c:	2004      	moveq	r0, #4
 80a017e:	2003      	movne	r0, #3
 80a0180:	4368      	muls	r0, r5
 80a0182:	b280      	uxth	r0, r0
 80a0184:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0186:	f001 fad3 	bl	80a1730 <malloc>
 80a018a:	60e0      	str	r0, [r4, #12]
 80a018c:	b128      	cbz	r0, 80a019a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a018e:	2100      	movs	r1, #0
 80a0190:	88a2      	ldrh	r2, [r4, #4]
 80a0192:	f001 ffbb 	bl	80a210c <memset>
    numLEDs = n;
 80a0196:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a0198:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a019a:	80a0      	strh	r0, [r4, #4]
 80a019c:	8060      	strh	r0, [r4, #2]
}
 80a019e:	e7fb      	b.n	80a0198 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a01a0 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a01a0:	b510      	push	{r4, lr}
 80a01a2:	4604      	mov	r4, r0
    if (misoPinMode == OUTPUT) {
      digitalWrite(misoPin, misoValue);
    }
  }
#else
  pinMode(pin, OUTPUT);
 80a01a4:	2101      	movs	r1, #1
 80a01a6:	79c0      	ldrb	r0, [r0, #7]
 80a01a8:	f001 fee6 	bl	80a1f78 <pinMode>
  digitalWrite(pin, LOW);
 80a01ac:	2100      	movs	r1, #0
 80a01ae:	79e0      	ldrb	r0, [r4, #7]
 80a01b0:	f001 fef3 	bl	80a1f9a <digitalWrite>
#endif // #if (PLATFORM_ID == 32)
  begun = true;
 80a01b4:	2301      	movs	r3, #1
 80a01b6:	7023      	strb	r3, [r4, #0]
}
 80a01b8:	bd10      	pop	{r4, pc}

080a01ba <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a01ba:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a01bc:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a01be:	4605      	mov	r5, r0
 80a01c0:	460c      	mov	r4, r1
    if (begun) {
 80a01c2:	b11b      	cbz	r3, 80a01cc <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a01c4:	2100      	movs	r1, #0
 80a01c6:	79c0      	ldrb	r0, [r0, #7]
 80a01c8:	f001 fed6 	bl	80a1f78 <pinMode>
    }
    pin = p;
    if (begun) {
 80a01cc:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a01ce:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a01d0:	b153      	cbz	r3, 80a01e8 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a01d2:	b2a4      	uxth	r4, r4
 80a01d4:	4620      	mov	r0, r4
 80a01d6:	2101      	movs	r1, #1
 80a01d8:	f001 fece 	bl	80a1f78 <pinMode>
        digitalWrite(p, LOW);
 80a01dc:	4620      	mov	r0, r4
    }
}
 80a01de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a01e2:	2100      	movs	r1, #0
 80a01e4:	f001 bed9 	b.w	80a1f9a <digitalWrite>
}
 80a01e8:	bd38      	pop	{r3, r4, r5, pc}

080a01ea <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a01ea:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a01ec:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a01ee:	4604      	mov	r4, r0
 80a01f0:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a01f2:	7183      	strb	r3, [r0, #6]
 80a01f4:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a01f8:	7005      	strb	r5, [r0, #0]
 80a01fa:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a01fc:	f7ff ffb4 	bl	80a0168 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0200:	4620      	mov	r0, r4
 80a0202:	4631      	mov	r1, r6
 80a0204:	f7ff ffd9 	bl	80a01ba <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0208:	4620      	mov	r0, r4
 80a020a:	bd70      	pop	{r4, r5, r6, pc}

080a020c <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a020c:	68c3      	ldr	r3, [r0, #12]
 80a020e:	2b00      	cmp	r3, #0
 80a0210:	f000 8441 	beq.w	80a0a96 <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a0214:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0216:	7983      	ldrb	r3, [r0, #6]
 80a0218:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a021a:	3b02      	subs	r3, #2
 80a021c:	b2db      	uxtb	r3, r3
 80a021e:	2b04      	cmp	r3, #4
 80a0220:	bf8c      	ite	hi
 80a0222:	2532      	movhi	r5, #50	; 0x32
 80a0224:	4a28      	ldrls	r2, [pc, #160]	; (80a02c8 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a0226:	b087      	sub	sp, #28
 80a0228:	bf98      	it	ls
 80a022a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a022e:	f001 f911 	bl	80a1454 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0232:	6923      	ldr	r3, [r4, #16]
 80a0234:	1ac0      	subs	r0, r0, r3
 80a0236:	42a8      	cmp	r0, r5
 80a0238:	d3f9      	bcc.n	80a022e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a023a:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a023c:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a023e:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0240:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0244:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0248:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a024a:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a024c:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a024e:	f000 826e 	beq.w	80a072e <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a0252:	2d07      	cmp	r5, #7
 80a0254:	f000 826b 	beq.w	80a072e <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0258:	2d06      	cmp	r5, #6
 80a025a:	f000 841d 	beq.w	80a0a98 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a025e:	2d05      	cmp	r5, #5
 80a0260:	f000 83a1 	beq.w	80a09a6 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a0264:	2d08      	cmp	r5, #8
 80a0266:	f000 839e 	beq.w	80a09a6 <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a026a:	2d00      	cmp	r5, #0
 80a026c:	f040 854f 	bne.w	80a0d0e <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0270:	2b00      	cmp	r3, #0
 80a0272:	f000 8392 	beq.w	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0276:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a027a:	4a14      	ldr	r2, [pc, #80]	; (80a02cc <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a027c:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a027e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0282:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0284:	3b03      	subs	r3, #3
 80a0286:	b29b      	uxth	r3, r3
 80a0288:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a028c:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0290:	b2db      	uxtb	r3, r3
 80a0292:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0296:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a029a:	b2db      	uxtb	r3, r3
 80a029c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a02a0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a02a4:	b2db      	uxtb	r3, r3
 80a02a6:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a02aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a02ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a02b2:	021b      	lsls	r3, r3, #8
 80a02b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a02b8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a02bc:	4303      	orrs	r3, r0
 80a02be:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a02c0:	f88d 5005 	strb.w	r5, [sp, #5]
 80a02c4:	e11b      	b.n	80a04fe <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a02c6:	bf00      	nop
 80a02c8:	080a226c 	.word	0x080a226c
 80a02cc:	2000008c 	.word	0x2000008c
        if (c & mask) { // if masked bit is high
          // WS2811 spec             1.20us HIGH
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.25us)
          // This lib on Photon     (meas. 1.25us)
          asm volatile(
 80a02d0:	4600      	mov	r0, r0
 80a02d2:	bf00      	nop
 80a02d4:	bf00      	nop
 80a02d6:	bf00      	nop
 80a02d8:	bf00      	nop
 80a02da:	bf00      	nop
 80a02dc:	bf00      	nop
 80a02de:	bf00      	nop
 80a02e0:	bf00      	nop
 80a02e2:	bf00      	nop
 80a02e4:	bf00      	nop
 80a02e6:	bf00      	nop
 80a02e8:	bf00      	nop
 80a02ea:	bf00      	nop
 80a02ec:	bf00      	nop
 80a02ee:	bf00      	nop
 80a02f0:	bf00      	nop
 80a02f2:	bf00      	nop
 80a02f4:	bf00      	nop
 80a02f6:	bf00      	nop
 80a02f8:	bf00      	nop
 80a02fa:	bf00      	nop
 80a02fc:	bf00      	nop
 80a02fe:	bf00      	nop
 80a0300:	bf00      	nop
 80a0302:	bf00      	nop
 80a0304:	bf00      	nop
 80a0306:	bf00      	nop
 80a0308:	bf00      	nop
 80a030a:	bf00      	nop
 80a030c:	bf00      	nop
 80a030e:	bf00      	nop
 80a0310:	bf00      	nop
 80a0312:	bf00      	nop
 80a0314:	bf00      	nop
 80a0316:	bf00      	nop
 80a0318:	bf00      	nop
 80a031a:	bf00      	nop
 80a031c:	bf00      	nop
 80a031e:	bf00      	nop
 80a0320:	bf00      	nop
 80a0322:	bf00      	nop
 80a0324:	bf00      	nop
 80a0326:	bf00      	nop
 80a0328:	bf00      	nop
 80a032a:	bf00      	nop
 80a032c:	bf00      	nop
 80a032e:	bf00      	nop
 80a0330:	bf00      	nop
 80a0332:	bf00      	nop
 80a0334:	bf00      	nop
 80a0336:	bf00      	nop
 80a0338:	bf00      	nop
 80a033a:	bf00      	nop
 80a033c:	bf00      	nop
 80a033e:	bf00      	nop
 80a0340:	bf00      	nop
 80a0342:	bf00      	nop
 80a0344:	bf00      	nop
 80a0346:	bf00      	nop
 80a0348:	bf00      	nop
 80a034a:	bf00      	nop
 80a034c:	bf00      	nop
 80a034e:	bf00      	nop
 80a0350:	bf00      	nop
 80a0352:	bf00      	nop
 80a0354:	bf00      	nop
 80a0356:	bf00      	nop
 80a0358:	bf00      	nop
 80a035a:	bf00      	nop
 80a035c:	bf00      	nop
 80a035e:	bf00      	nop
 80a0360:	bf00      	nop
 80a0362:	bf00      	nop
 80a0364:	bf00      	nop
 80a0366:	bf00      	nop
 80a0368:	bf00      	nop
 80a036a:	bf00      	nop
 80a036c:	bf00      	nop
 80a036e:	bf00      	nop
 80a0370:	bf00      	nop
 80a0372:	bf00      	nop
 80a0374:	bf00      	nop
 80a0376:	bf00      	nop
 80a0378:	bf00      	nop
 80a037a:	bf00      	nop
 80a037c:	bf00      	nop
 80a037e:	bf00      	nop
 80a0380:	bf00      	nop
 80a0382:	bf00      	nop
 80a0384:	bf00      	nop
 80a0386:	bf00      	nop
 80a0388:	bf00      	nop
 80a038a:	bf00      	nop
 80a038c:	bf00      	nop
 80a038e:	bf00      	nop
 80a0390:	bf00      	nop
 80a0392:	bf00      	nop
 80a0394:	bf00      	nop
 80a0396:	bf00      	nop
 80a0398:	bf00      	nop
 80a039a:	bf00      	nop
 80a039c:	bf00      	nop
 80a039e:	bf00      	nop
 80a03a0:	bf00      	nop
 80a03a2:	bf00      	nop
 80a03a4:	bf00      	nop
 80a03a6:	bf00      	nop
 80a03a8:	bf00      	nop
 80a03aa:	bf00      	nop
 80a03ac:	bf00      	nop
 80a03ae:	bf00      	nop
 80a03b0:	bf00      	nop
 80a03b2:	bf00      	nop
 80a03b4:	bf00      	nop
 80a03b6:	bf00      	nop
 80a03b8:	bf00      	nop
 80a03ba:	bf00      	nop
 80a03bc:	bf00      	nop
 80a03be:	bf00      	nop
 80a03c0:	bf00      	nop
 80a03c2:	bf00      	nop
 80a03c4:	bf00      	nop
 80a03c6:	bf00      	nop
 80a03c8:	bf00      	nop
 80a03ca:	bf00      	nop
 80a03cc:	bf00      	nop
 80a03ce:	bf00      	nop
 80a03d0:	bf00      	nop
 80a03d2:	bf00      	nop
 80a03d4:	bf00      	nop
 80a03d6:	bf00      	nop
            ::: "r0", "cc", "memory");
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a03d8:	79e3      	ldrb	r3, [r4, #7]
 80a03da:	6810      	ldr	r0, [r2, #0]
 80a03dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a03e0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a03e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a03e8:	88b8      	ldrh	r0, [r7, #4]
 80a03ea:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a03ec:	4600      	mov	r0, r0
 80a03ee:	bf00      	nop
 80a03f0:	bf00      	nop
 80a03f2:	bf00      	nop
 80a03f4:	bf00      	nop
 80a03f6:	bf00      	nop
 80a03f8:	bf00      	nop
 80a03fa:	bf00      	nop
 80a03fc:	bf00      	nop
 80a03fe:	bf00      	nop
 80a0400:	bf00      	nop
 80a0402:	bf00      	nop
 80a0404:	bf00      	nop
 80a0406:	bf00      	nop
 80a0408:	bf00      	nop
 80a040a:	bf00      	nop
 80a040c:	bf00      	nop
 80a040e:	bf00      	nop
 80a0410:	bf00      	nop
 80a0412:	bf00      	nop
 80a0414:	bf00      	nop
 80a0416:	bf00      	nop
 80a0418:	bf00      	nop
 80a041a:	bf00      	nop
 80a041c:	bf00      	nop
 80a041e:	bf00      	nop
 80a0420:	bf00      	nop
 80a0422:	bf00      	nop
 80a0424:	bf00      	nop
 80a0426:	bf00      	nop
 80a0428:	bf00      	nop
 80a042a:	bf00      	nop
 80a042c:	bf00      	nop
 80a042e:	bf00      	nop
 80a0430:	bf00      	nop
 80a0432:	bf00      	nop
 80a0434:	bf00      	nop
 80a0436:	bf00      	nop
 80a0438:	bf00      	nop
 80a043a:	bf00      	nop
 80a043c:	bf00      	nop
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a04e6:	9b04      	ldr	r3, [sp, #16]
 80a04e8:	085b      	lsrs	r3, r3, #1
 80a04ea:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a04ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a04f0:	3301      	adds	r3, #1
 80a04f2:	b2db      	uxtb	r3, r3
 80a04f4:	2b17      	cmp	r3, #23
 80a04f6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a04fa:	f200 8723 	bhi.w	80a1344 <_ZN17Adafruit_NeoPixel4showEv+0x1138>
        pinSet(pin, HIGH); // HIGH
 80a04fe:	79e3      	ldrb	r3, [r4, #7]
 80a0500:	6810      	ldr	r0, [r2, #0]
 80a0502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0506:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a050a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a050e:	88b8      	ldrh	r0, [r7, #4]
 80a0510:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0512:	9803      	ldr	r0, [sp, #12]
 80a0514:	9b04      	ldr	r3, [sp, #16]
 80a0516:	4218      	tst	r0, r3
 80a0518:	f47f aeda 	bne.w	80a02d0 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          asm volatile(
 80a051c:	4600      	mov	r0, r0
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a056e:	79e3      	ldrb	r3, [r4, #7]
 80a0570:	6810      	ldr	r0, [r2, #0]
 80a0572:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0576:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a057a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a057e:	88b8      	ldrh	r0, [r7, #4]
 80a0580:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0582:	4600      	mov	r0, r0
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	e6db      	b.n	80a04e6 <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a072e:	2b00      	cmp	r3, #0
 80a0730:	f000 8133 	beq.w	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0734:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0738:	f04f 0c00 	mov.w	ip, #0
 80a073c:	4a12      	ldr	r2, [pc, #72]	; (80a0788 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a073e:	4608      	mov	r0, r1
 80a0740:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0742:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0746:	3103      	adds	r1, #3
 80a0748:	3b03      	subs	r3, #3
 80a074a:	b29b      	uxth	r3, r3
 80a074c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0750:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0754:	b2db      	uxtb	r3, r3
 80a0756:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a075a:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a075e:	b2db      	uxtb	r3, r3
 80a0760:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0764:	7883      	ldrb	r3, [r0, #2]
 80a0766:	b2db      	uxtb	r3, r3
 80a0768:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a076c:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a0770:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0774:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0778:	021b      	lsls	r3, r3, #8
 80a077a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80a077e:	4303      	orrs	r3, r0
 80a0780:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0782:	f88d c005 	strb.w	ip, [sp, #5]
 80a0786:	e07f      	b.n	80a0888 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a0788:	2000008c 	.word	0x2000008c
          asm volatile(
 80a078c:	4600      	mov	r0, r0
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0826:	79e3      	ldrb	r3, [r4, #7]
 80a0828:	6810      	ldr	r0, [r2, #0]
 80a082a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a082e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a0832:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0836:	88b0      	ldrh	r0, [r6, #4]
 80a0838:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a083a:	4600      	mov	r0, r0
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
        mask >>= 1;
 80a0870:	9b04      	ldr	r3, [sp, #16]
 80a0872:	085b      	lsrs	r3, r3, #1
 80a0874:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0876:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a087a:	3301      	adds	r3, #1
 80a087c:	b2db      	uxtb	r3, r3
 80a087e:	2b17      	cmp	r3, #23
 80a0880:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0884:	f200 8083 	bhi.w	80a098e <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a0888:	79e3      	ldrb	r3, [r4, #7]
 80a088a:	6810      	ldr	r0, [r2, #0]
 80a088c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0890:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a0894:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0898:	88b0      	ldrh	r0, [r6, #4]
 80a089a:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a089c:	9803      	ldr	r0, [sp, #12]
 80a089e:	9b04      	ldr	r3, [sp, #16]
 80a08a0:	4218      	tst	r0, r3
 80a08a2:	f47f af73 	bne.w	80a078c <_ZN17Adafruit_NeoPixel4showEv+0x580>
          asm volatile(
 80a08a6:	4600      	mov	r0, r0
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a08ce:	79e3      	ldrb	r3, [r4, #7]
 80a08d0:	6810      	ldr	r0, [r2, #0]
 80a08d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a08d6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a08da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a08de:	88b0      	ldrh	r0, [r6, #4]
 80a08e0:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a08e2:	4600      	mov	r0, r0
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	e770      	b.n	80a0870 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a098e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0992:	b29b      	uxth	r3, r3
 80a0994:	2b00      	cmp	r3, #0
 80a0996:	f47f aed2 	bne.w	80a073e <_ZN17Adafruit_NeoPixel4showEv+0x532>
  __ASM volatile ("cpsie i");
 80a099a:	b662      	cpsie	i
 80a099c:	f000 fd5a 	bl	80a1454 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a09a0:	6120      	str	r0, [r4, #16]
}
 80a09a2:	b007      	add	sp, #28
 80a09a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a09a6:	2b00      	cmp	r3, #0
 80a09a8:	d0f7      	beq.n	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a09aa:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a09ae:	f04f 0c00 	mov.w	ip, #0
        pinSet(pin, HIGH); // HIGH
 80a09b2:	4b54      	ldr	r3, [pc, #336]	; (80a0b04 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a09b4:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a09b6:	4b54      	ldr	r3, [pc, #336]	; (80a0b08 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a09b8:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a09ba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a09be:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a09c0:	3a03      	subs	r2, #3
 80a09c2:	b292      	uxth	r2, r2
 80a09c4:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a09c8:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a09cc:	b2d2      	uxtb	r2, r2
 80a09ce:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a09d2:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a09d6:	b2d2      	uxtb	r2, r2
 80a09d8:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a09dc:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a09e0:	b2d2      	uxtb	r2, r2
 80a09e2:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a09e6:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a09ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a09ee:	0212      	lsls	r2, r2, #8
 80a09f0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80a09f4:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a09f8:	4332      	orrs	r2, r6
 80a09fa:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a09fc:	f88d c005 	strb.w	ip, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a0a00:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a0a02:	685f      	ldr	r7, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0a04:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0a08:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a0a0c:	88b6      	ldrh	r6, [r6, #4]
 80a0a0e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a0a12:	9705      	str	r7, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0a14:	8316      	strh	r6, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0a16:	9e03      	ldr	r6, [sp, #12]
 80a0a18:	9a04      	ldr	r2, [sp, #16]
 80a0a1a:	4216      	tst	r6, r2
 80a0a1c:	d025      	beq.n	80a0a6a <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0a1e:	685a      	ldr	r2, [r3, #4]
 80a0a20:	9e05      	ldr	r6, [sp, #20]
 80a0a22:	1b92      	subs	r2, r2, r6
 80a0a24:	2a4f      	cmp	r2, #79	; 0x4f
 80a0a26:	d9fa      	bls.n	80a0a1e <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a0a28:	79e2      	ldrb	r2, [r4, #7]
 80a0a2a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0a2e:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a0a32:	88b6      	ldrh	r6, [r6, #4]
 80a0a34:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0a38:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0a3a:	685a      	ldr	r2, [r3, #4]
 80a0a3c:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0a3e:	685a      	ldr	r2, [r3, #4]
 80a0a40:	9e05      	ldr	r6, [sp, #20]
 80a0a42:	1b92      	subs	r2, r2, r6
 80a0a44:	2a07      	cmp	r2, #7
 80a0a46:	d9fa      	bls.n	80a0a3e <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a0a48:	9a04      	ldr	r2, [sp, #16]
 80a0a4a:	0852      	lsrs	r2, r2, #1
 80a0a4c:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0a4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0a52:	3201      	adds	r2, #1
 80a0a54:	b2d2      	uxtb	r2, r2
 80a0a56:	2a17      	cmp	r2, #23
 80a0a58:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0a5c:	d9d0      	bls.n	80a0a00 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a5e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0a62:	b292      	uxth	r2, r2
 80a0a64:	2a00      	cmp	r2, #0
 80a0a66:	d1a7      	bne.n	80a09b8 <_ZN17Adafruit_NeoPixel4showEv+0x7ac>
 80a0a68:	e797      	b.n	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0a6a:	685a      	ldr	r2, [r3, #4]
 80a0a6c:	9e05      	ldr	r6, [sp, #20]
 80a0a6e:	1b92      	subs	r2, r2, r6
 80a0a70:	2a18      	cmp	r2, #24
 80a0a72:	d9fa      	bls.n	80a0a6a <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a0a74:	79e2      	ldrb	r2, [r4, #7]
 80a0a76:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0a7a:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a0a7e:	88b6      	ldrh	r6, [r6, #4]
 80a0a80:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a0a84:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0a86:	685a      	ldr	r2, [r3, #4]
 80a0a88:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0a8a:	685a      	ldr	r2, [r3, #4]
 80a0a8c:	9e05      	ldr	r6, [sp, #20]
 80a0a8e:	1b92      	subs	r2, r2, r6
 80a0a90:	2a45      	cmp	r2, #69	; 0x45
 80a0a92:	d9fa      	bls.n	80a0a8a <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a0a94:	e7d8      	b.n	80a0a48 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a0a96:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0a98:	2b00      	cmp	r3, #0
 80a0a9a:	f43f af7e 	beq.w	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a0a9e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a0aa2:	2600      	movs	r6, #0
 80a0aa4:	4a17      	ldr	r2, [pc, #92]	; (80a0b04 <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a0aa6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0aa8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a0aac:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a0aae:	3b04      	subs	r3, #4
 80a0ab0:	b29b      	uxth	r3, r3
 80a0ab2:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ab6:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a0aba:	b2db      	uxtb	r3, r3
 80a0abc:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0ac0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0ac4:	b2db      	uxtb	r3, r3
 80a0ac6:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0aca:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0ace:	b2db      	uxtb	r3, r3
 80a0ad0:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0ad4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0ad8:	b2db      	uxtb	r3, r3
 80a0ada:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0ade:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0ae2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0ae6:	041b      	lsls	r3, r3, #16
 80a0ae8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a0aec:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0af0:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a0af4:	433b      	orrs	r3, r7
 80a0af6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a0afa:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0afc:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0b00:	e07f      	b.n	80a0c02 <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a0b02:	bf00      	nop
 80a0b04:	2000008c 	.word	0x2000008c
 80a0b08:	e0001000 	.word	0xe0001000
          asm volatile(
 80a0b0c:	4600      	mov	r0, r0
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0b7a:	79e3      	ldrb	r3, [r4, #7]
 80a0b7c:	6810      	ldr	r0, [r2, #0]
 80a0b7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b82:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b8a:	88b8      	ldrh	r0, [r7, #4]
 80a0b8c:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0b8e:	4600      	mov	r0, r0
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	bf00      	nop
 80a0bd2:	bf00      	nop
 80a0bd4:	bf00      	nop
 80a0bd6:	bf00      	nop
 80a0bd8:	bf00      	nop
 80a0bda:	bf00      	nop
 80a0bdc:	bf00      	nop
 80a0bde:	bf00      	nop
 80a0be0:	bf00      	nop
 80a0be2:	bf00      	nop
 80a0be4:	bf00      	nop
 80a0be6:	bf00      	nop
 80a0be8:	bf00      	nop
 80a0bea:	bf00      	nop
        mask >>= 1;
 80a0bec:	9b04      	ldr	r3, [sp, #16]
 80a0bee:	085b      	lsrs	r3, r3, #1
 80a0bf0:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0bf2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0bf6:	3301      	adds	r3, #1
 80a0bf8:	b2db      	uxtb	r3, r3
 80a0bfa:	2b1f      	cmp	r3, #31
 80a0bfc:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0c00:	d87e      	bhi.n	80a0d00 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a0c02:	79e3      	ldrb	r3, [r4, #7]
 80a0c04:	6810      	ldr	r0, [r2, #0]
 80a0c06:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c0a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c12:	88b8      	ldrh	r0, [r7, #4]
 80a0c14:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0c16:	9803      	ldr	r0, [sp, #12]
 80a0c18:	9b04      	ldr	r3, [sp, #16]
 80a0c1a:	4218      	tst	r0, r3
 80a0c1c:	f47f af76 	bne.w	80a0b0c <_ZN17Adafruit_NeoPixel4showEv+0x900>
          asm volatile(
 80a0c20:	4600      	mov	r0, r0
 80a0c22:	bf00      	nop
 80a0c24:	bf00      	nop
 80a0c26:	bf00      	nop
 80a0c28:	bf00      	nop
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a0c48:	79e3      	ldrb	r3, [r4, #7]
 80a0c4a:	6810      	ldr	r0, [r2, #0]
 80a0c4c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c50:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0c54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0c58:	88b8      	ldrh	r0, [r7, #4]
 80a0c5a:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a0c5c:	4600      	mov	r0, r0
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	e775      	b.n	80a0bec <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0d00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d04:	b29b      	uxth	r3, r3
 80a0d06:	2b00      	cmp	r3, #0
 80a0d08:	f47f aecd 	bne.w	80a0aa6 <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a0d0c:	e645      	b.n	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0d0e:	2d03      	cmp	r5, #3
 80a0d10:	f000 8128 	beq.w	80a0f64 <_ZN17Adafruit_NeoPixel4showEv+0xd58>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0d14:	2b00      	cmp	r3, #0
 80a0d16:	f43f ae40 	beq.w	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0d1a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0d1e:	2600      	movs	r6, #0
 80a0d20:	4a16      	ldr	r2, [pc, #88]	; (80a0d7c <_ZN17Adafruit_NeoPixel4showEv+0xb70>)
      mask = 0x800000; // reset the mask
 80a0d22:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0d24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a0d28:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a0d2a:	3b03      	subs	r3, #3
 80a0d2c:	b29b      	uxth	r3, r3
 80a0d2e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0d32:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a0d34:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a0d36:	b2db      	uxtb	r3, r3
 80a0d38:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0d3c:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a0d3e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a0d42:	b2db      	uxtb	r3, r3
 80a0d44:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0d48:	788b      	ldrb	r3, [r1, #2]
 80a0d4a:	3103      	adds	r1, #3
 80a0d4c:	b2db      	uxtb	r3, r3
 80a0d4e:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0d52:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a0d56:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a0d5a:	021b      	lsls	r3, r3, #8
 80a0d5c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80a0d60:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a0d64:	ea43 030c 	orr.w	r3, r3, ip
      pinSet(pin, LOW); // LOW
 80a0d68:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0d6c:	9303      	str	r3, [sp, #12]
      pinSet(pin, LOW); // LOW
 80a0d6e:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
      j = 0;        // reset the 24-bit counter
 80a0d72:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0d76:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80a0d7a:	e07a      	b.n	80a0e72 <_ZN17Adafruit_NeoPixel4showEv+0xc66>
 80a0d7c:	2000008c 	.word	0x2000008c
          mask >>= 1; // Do this task during the long delay of this bit
 80a0d80:	9b04      	ldr	r3, [sp, #16]
 80a0d82:	085b      	lsrs	r3, r3, #1
 80a0d84:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a0d86:	4600      	mov	r0, r0
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0e0c:	79e0      	ldrb	r0, [r4, #7]
 80a0e0e:	6817      	ldr	r7, [r2, #0]
          j++;
 80a0e10:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0e14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0e18:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
          j++;
 80a0e1c:	3301      	adds	r3, #1
          pinSet(pin, HIGH); // HIGH
 80a0e1e:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80a0e22:	f8bc 7004 	ldrh.w	r7, [ip, #4]
          j++;
 80a0e26:	b2db      	uxtb	r3, r3
 80a0e28:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a0e2c:	8307      	strh	r7, [r0, #24]
          asm volatile(
 80a0e2e:	4600      	mov	r0, r0
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
          if(j==24) break;
 80a0e58:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e5c:	2b18      	cmp	r3, #24
 80a0e5e:	d07a      	beq.n	80a0f56 <_ZN17Adafruit_NeoPixel4showEv+0xd4a>
          pinSet(pin, LOW); // LOW
 80a0e60:	79e3      	ldrb	r3, [r4, #7]
 80a0e62:	6810      	ldr	r0, [r2, #0]
 80a0e64:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e68:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e70:	88b8      	ldrh	r0, [r7, #4]
      pinSet(pin, LOW); // LOW
 80a0e72:	8358      	strh	r0, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a0e74:	9803      	ldr	r0, [sp, #12]
 80a0e76:	9b04      	ldr	r3, [sp, #16]
 80a0e78:	4218      	tst	r0, r3
 80a0e7a:	d181      	bne.n	80a0d80 <_ZN17Adafruit_NeoPixel4showEv+0xb74>
          asm volatile(
 80a0e7c:	4600      	mov	r0, r0
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a0e9e:	79e3      	ldrb	r3, [r4, #7]
 80a0ea0:	6810      	ldr	r0, [r2, #0]
 80a0ea2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ea6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0eaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0eae:	88b8      	ldrh	r0, [r7, #4]
 80a0eb0:	8318      	strh	r0, [r3, #24]
          j++;
 80a0eb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0eb6:	3301      	adds	r3, #1
 80a0eb8:	b2db      	uxtb	r3, r3
 80a0eba:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a0ebe:	9b04      	ldr	r3, [sp, #16]
 80a0ec0:	085b      	lsrs	r3, r3, #1
 80a0ec2:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a0ec4:	4600      	mov	r0, r0
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
          if(j==24) break;
 80a0f4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f52:	2b18      	cmp	r3, #24
 80a0f54:	d184      	bne.n	80a0e60 <_ZN17Adafruit_NeoPixel4showEv+0xc54>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f5a:	b29b      	uxth	r3, r3
 80a0f5c:	2b00      	cmp	r3, #0
 80a0f5e:	f47f aee0 	bne.w	80a0d22 <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a0f62:	e51a      	b.n	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f64:	2b00      	cmp	r3, #0
 80a0f66:	f43f ad18 	beq.w	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0f6a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a0f6e:	2600      	movs	r6, #0
 80a0f70:	4a12      	ldr	r2, [pc, #72]	; (80a0fbc <_ZN17Adafruit_NeoPixel4showEv+0xdb0>)
      mask = 0x800000; // reset the mask
 80a0f72:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a0f78:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0f7a:	3b03      	subs	r3, #3
 80a0f7c:	b29b      	uxth	r3, r3
 80a0f7e:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f82:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0f86:	b2db      	uxtb	r3, r3
 80a0f88:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a0f8c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0f90:	b2db      	uxtb	r3, r3
 80a0f92:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a0f96:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0f9a:	b2db      	uxtb	r3, r3
 80a0f9c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0fa0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0fa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0fa8:	021b      	lsls	r3, r3, #8
 80a0faa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a0fae:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0fb2:	4303      	orrs	r3, r0
 80a0fb4:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0fb6:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0fba:	e0e0      	b.n	80a117e <_ZN17Adafruit_NeoPixel4showEv+0xf72>
 80a0fbc:	2000008c 	.word	0x2000008c
          asm volatile(
 80a0fc0:	4600      	mov	r0, r0
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a10e2:	79e3      	ldrb	r3, [r4, #7]
 80a10e4:	6810      	ldr	r0, [r2, #0]
 80a10e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10ea:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10f2:	88b8      	ldrh	r0, [r7, #4]
 80a10f4:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a10f6:	4600      	mov	r0, r0
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
        mask >>= 1;
 80a1166:	9b04      	ldr	r3, [sp, #16]
 80a1168:	085b      	lsrs	r3, r3, #1
 80a116a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a116c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1170:	3301      	adds	r3, #1
 80a1172:	b2db      	uxtb	r3, r3
 80a1174:	2b17      	cmp	r3, #23
 80a1176:	f88d 3005 	strb.w	r3, [sp, #5]
 80a117a:	f200 80eb 	bhi.w	80a1354 <_ZN17Adafruit_NeoPixel4showEv+0x1148>
        pinSet(pin, HIGH); // HIGH
 80a117e:	79e3      	ldrb	r3, [r4, #7]
 80a1180:	6810      	ldr	r0, [r2, #0]
 80a1182:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1186:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a118a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a118e:	88b8      	ldrh	r0, [r7, #4]
 80a1190:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1192:	9803      	ldr	r0, [sp, #12]
 80a1194:	9b04      	ldr	r3, [sp, #16]
 80a1196:	4218      	tst	r0, r3
 80a1198:	f47f af12 	bne.w	80a0fc0 <_ZN17Adafruit_NeoPixel4showEv+0xdb4>
          asm volatile(
 80a119c:	4600      	mov	r0, r0
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a121e:	79e3      	ldrb	r3, [r4, #7]
 80a1220:	6810      	ldr	r0, [r2, #0]
 80a1222:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1226:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a122a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a122e:	88b8      	ldrh	r0, [r7, #4]
 80a1230:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1232:	4600      	mov	r0, r0
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	e710      	b.n	80a1166 <_ZN17Adafruit_NeoPixel4showEv+0xf5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1344:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1348:	b29b      	uxth	r3, r3
 80a134a:	2b00      	cmp	r3, #0
 80a134c:	f47e af96 	bne.w	80a027c <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1350:	f7ff bb23 	b.w	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1354:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1358:	b29b      	uxth	r3, r3
 80a135a:	2b00      	cmp	r3, #0
 80a135c:	f47f ae09 	bne.w	80a0f72 <_ZN17Adafruit_NeoPixel4showEv+0xd66>
 80a1360:	f7ff bb1b 	b.w	80a099a <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1364 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1364:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1366:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1368:	428b      	cmp	r3, r1
 80a136a:	d92d      	bls.n	80a13c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a136c:	7a06      	ldrb	r6, [r0, #8]
 80a136e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1372:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1376:	b2d5      	uxtb	r5, r2
 80a1378:	b13e      	cbz	r6, 80a138a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a137a:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 80a137c:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 80a137e:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 80a1380:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1384:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1388:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a138a:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a138e:	68c7      	ldr	r7, [r0, #12]
 80a1390:	f1bc 0f06 	cmp.w	ip, #6
 80a1394:	bf0c      	ite	eq
 80a1396:	2604      	moveq	r6, #4
 80a1398:	2603      	movne	r6, #3
 80a139a:	434e      	muls	r6, r1
 80a139c:	f1ac 0c02 	sub.w	ip, ip, #2
 80a13a0:	19b9      	adds	r1, r7, r6
    switch(type) {
 80a13a2:	f1bc 0f06 	cmp.w	ip, #6
 80a13a6:	d81d      	bhi.n	80a13e4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a13a8:	e8df f00c 	tbb	[pc, ip]
 80a13ac:	04081c04 	.word	0x04081c04
 80a13b0:	040f      	.short	0x040f
 80a13b2:	04          	.byte	0x04
 80a13b3:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a13b4:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 80a13b6:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a13b8:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
 80a13ba:	e005      	b.n	80a13c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 80a13bc:	2bfe      	cmp	r3, #254	; 0xfe
 80a13be:	bf28      	it	cs
 80a13c0:	23fe      	movcs	r3, #254	; 0xfe
 80a13c2:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 80a13c4:	704d      	strb	r5, [r1, #1]
          *p = g;
 80a13c6:	708c      	strb	r4, [r1, #2]
}
 80a13c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a13ca:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a13cc:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 80a13ce:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a13d0:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a13d2:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a13d4:	b913      	cbnz	r3, 80a13dc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a13d6:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a13d8:	70ca      	strb	r2, [r1, #3]
        } break;
 80a13da:	e7f5      	b.n	80a13c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a13dc:	435a      	muls	r2, r3
 80a13de:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a13e2:	e7f9      	b.n	80a13d8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a13e4:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a13e6:	704c      	strb	r4, [r1, #1]
 80a13e8:	e7e6      	b.n	80a13b8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

080a13ea <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a13ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a13ee:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a13f2:	4770      	bx	lr

080a13f4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a13f4:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a13f6:	f000 f805 	bl	80a1404 <HAL_Pin_Map>
 80a13fa:	4b01      	ldr	r3, [pc, #4]	; (80a1400 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a13fc:	6018      	str	r0, [r3, #0]
}
 80a13fe:	bd08      	pop	{r3, pc}
 80a1400:	2000008c 	.word	0x2000008c

080a1404 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1404:	b508      	push	{r3, lr}
 80a1406:	4b02      	ldr	r3, [pc, #8]	; (80a1410 <HAL_Pin_Map+0xc>)
 80a1408:	681b      	ldr	r3, [r3, #0]
 80a140a:	681b      	ldr	r3, [r3, #0]
 80a140c:	9301      	str	r3, [sp, #4]
 80a140e:	bd08      	pop	{r3, pc}
 80a1410:	080601b0 	.word	0x080601b0

080a1414 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1414:	b508      	push	{r3, lr}
 80a1416:	4b02      	ldr	r3, [pc, #8]	; (80a1420 <HAL_Pin_Mode+0xc>)
 80a1418:	681b      	ldr	r3, [r3, #0]
 80a141a:	689b      	ldr	r3, [r3, #8]
 80a141c:	9301      	str	r3, [sp, #4]
 80a141e:	bd08      	pop	{r3, pc}
 80a1420:	080601b0 	.word	0x080601b0

080a1424 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1424:	b508      	push	{r3, lr}
 80a1426:	4b02      	ldr	r3, [pc, #8]	; (80a1430 <HAL_Get_Pin_Mode+0xc>)
 80a1428:	681b      	ldr	r3, [r3, #0]
 80a142a:	68db      	ldr	r3, [r3, #12]
 80a142c:	9301      	str	r3, [sp, #4]
 80a142e:	bd08      	pop	{r3, pc}
 80a1430:	080601b0 	.word	0x080601b0

080a1434 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1434:	b508      	push	{r3, lr}
 80a1436:	4b02      	ldr	r3, [pc, #8]	; (80a1440 <HAL_GPIO_Write+0xc>)
 80a1438:	681b      	ldr	r3, [r3, #0]
 80a143a:	691b      	ldr	r3, [r3, #16]
 80a143c:	9301      	str	r3, [sp, #4]
 80a143e:	bd08      	pop	{r3, pc}
 80a1440:	080601b0 	.word	0x080601b0

080a1444 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b02      	ldr	r3, [pc, #8]	; (80a1450 <HAL_RNG_GetRandomNumber+0xc>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	685b      	ldr	r3, [r3, #4]
 80a144c:	9301      	str	r3, [sp, #4]
 80a144e:	bd08      	pop	{r3, pc}
 80a1450:	0806019c 	.word	0x0806019c

080a1454 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	691b      	ldr	r3, [r3, #16]
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	0806019c 	.word	0x0806019c

080a1464 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1464:	b508      	push	{r3, lr}
 80a1466:	4b02      	ldr	r3, [pc, #8]	; (80a1470 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1468:	681b      	ldr	r3, [r3, #0]
 80a146a:	695b      	ldr	r3, [r3, #20]
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	bd08      	pop	{r3, pc}
 80a1470:	0806019c 	.word	0x0806019c

080a1474 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1474:	b508      	push	{r3, lr}
 80a1476:	4b02      	ldr	r3, [pc, #8]	; (80a1480 <os_mutex_recursive_create+0xc>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a147c:	9301      	str	r3, [sp, #4]
 80a147e:	bd08      	pop	{r3, pc}
 80a1480:	080601d0 	.word	0x080601d0

080a1484 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1484:	b508      	push	{r3, lr}
 80a1486:	4b02      	ldr	r3, [pc, #8]	; (80a1490 <os_mutex_recursive_destroy+0xc>)
 80a1488:	681b      	ldr	r3, [r3, #0]
 80a148a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a148c:	9301      	str	r3, [sp, #4]
 80a148e:	bd08      	pop	{r3, pc}
 80a1490:	080601d0 	.word	0x080601d0

080a1494 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a1494:	b508      	push	{r3, lr}
 80a1496:	4b02      	ldr	r3, [pc, #8]	; (80a14a0 <hal_usart_write+0xc>)
 80a1498:	681b      	ldr	r3, [r3, #0]
 80a149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a149c:	9301      	str	r3, [sp, #4]
 80a149e:	bd08      	pop	{r3, pc}
 80a14a0:	080601c4 	.word	0x080601c4

080a14a4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a14a4:	b508      	push	{r3, lr}
 80a14a6:	4b02      	ldr	r3, [pc, #8]	; (80a14b0 <hal_usart_available+0xc>)
 80a14a8:	681b      	ldr	r3, [r3, #0]
 80a14aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a14ac:	9301      	str	r3, [sp, #4]
 80a14ae:	bd08      	pop	{r3, pc}
 80a14b0:	080601c4 	.word	0x080601c4

080a14b4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <hal_usart_read+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601c4 	.word	0x080601c4

080a14c4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <hal_usart_peek+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	080601c4 	.word	0x080601c4

080a14d4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <hal_usart_flush+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	080601c4 	.word	0x080601c4

080a14e4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <hal_usart_is_enabled+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	080601c4 	.word	0x080601c4

080a14f4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <hal_usart_available_data_for_write+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	080601c4 	.word	0x080601c4

080a1504 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <hal_usart_init_ex+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601c4 	.word	0x080601c4

080a1514 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <hal_i2c_write+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601ac 	.word	0x080601ac

080a1524 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a1524:	b508      	push	{r3, lr}
 80a1526:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <hal_i2c_available+0xc>)
 80a1528:	681b      	ldr	r3, [r3, #0]
 80a152a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a152c:	9301      	str	r3, [sp, #4]
 80a152e:	bd08      	pop	{r3, pc}
 80a1530:	080601ac 	.word	0x080601ac

080a1534 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a1534:	b508      	push	{r3, lr}
 80a1536:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <hal_i2c_read+0xc>)
 80a1538:	681b      	ldr	r3, [r3, #0]
 80a153a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a153c:	9301      	str	r3, [sp, #4]
 80a153e:	bd08      	pop	{r3, pc}
 80a1540:	080601ac 	.word	0x080601ac

080a1544 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a1544:	b508      	push	{r3, lr}
 80a1546:	4b02      	ldr	r3, [pc, #8]	; (80a1550 <hal_i2c_peek+0xc>)
 80a1548:	681b      	ldr	r3, [r3, #0]
 80a154a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a154c:	9301      	str	r3, [sp, #4]
 80a154e:	bd08      	pop	{r3, pc}
 80a1550:	080601ac 	.word	0x080601ac

080a1554 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a1554:	b508      	push	{r3, lr}
 80a1556:	4b02      	ldr	r3, [pc, #8]	; (80a1560 <hal_i2c_flush+0xc>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a155c:	9301      	str	r3, [sp, #4]
 80a155e:	bd08      	pop	{r3, pc}
 80a1560:	080601ac 	.word	0x080601ac

080a1564 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a1564:	b508      	push	{r3, lr}
 80a1566:	4b02      	ldr	r3, [pc, #8]	; (80a1570 <hal_i2c_is_enabled+0xc>)
 80a1568:	681b      	ldr	r3, [r3, #0]
 80a156a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a156c:	9301      	str	r3, [sp, #4]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	080601ac 	.word	0x080601ac

080a1574 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a1574:	b508      	push	{r3, lr}
 80a1576:	4b03      	ldr	r3, [pc, #12]	; (80a1584 <hal_i2c_init+0x10>)
 80a1578:	681b      	ldr	r3, [r3, #0]
 80a157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a157e:	9301      	str	r3, [sp, #4]
 80a1580:	bd08      	pop	{r3, pc}
 80a1582:	0000      	.short	0x0000
 80a1584:	080601ac 	.word	0x080601ac

080a1588 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1588:	b508      	push	{r3, lr}
 80a158a:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <hal_spi_init+0xc>)
 80a158c:	681b      	ldr	r3, [r3, #0]
 80a158e:	69db      	ldr	r3, [r3, #28]
 80a1590:	9301      	str	r3, [sp, #4]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	080601b4 	.word	0x080601b4

080a1598 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <hal_spi_is_enabled+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	6a1b      	ldr	r3, [r3, #32]
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601b4 	.word	0x080601b4

080a15a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <HAL_USB_USART_Init+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	681b      	ldr	r3, [r3, #0]
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601d8 	.word	0x080601d8

080a15b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <HAL_USB_USART_Available_Data+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	691b      	ldr	r3, [r3, #16]
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601d8 	.word	0x080601d8

080a15c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	695b      	ldr	r3, [r3, #20]
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601d8 	.word	0x080601d8

080a15d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <HAL_USB_USART_Receive_Data+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	699b      	ldr	r3, [r3, #24]
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601d8 	.word	0x080601d8

080a15e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <HAL_USB_USART_Send_Data+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	69db      	ldr	r3, [r3, #28]
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601d8 	.word	0x080601d8

080a15f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <HAL_USB_USART_Flush_Data+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	6a1b      	ldr	r3, [r3, #32]
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601d8 	.word	0x080601d8

080a1608 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <inet_gethostbyname+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601c0 	.word	0x080601c0

080a1618 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <set_system_mode+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	685b      	ldr	r3, [r3, #4]
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	080601a4 	.word	0x080601a4

080a1628 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <system_delay_ms+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	695b      	ldr	r3, [r3, #20]
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601a4 	.word	0x080601a4

080a1638 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b03      	ldr	r3, [pc, #12]	; (80a1648 <system_ctrl_set_app_request_handler+0x10>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1642:	9301      	str	r3, [sp, #4]
 80a1644:	bd08      	pop	{r3, pc}
 80a1646:	0000      	.short	0x0000
 80a1648:	080601a4 	.word	0x080601a4

080a164c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b03      	ldr	r3, [pc, #12]	; (80a165c <system_ctrl_set_result+0x10>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1656:	9301      	str	r3, [sp, #4]
 80a1658:	bd08      	pop	{r3, pc}
 80a165a:	0000      	.short	0x0000
 80a165c:	080601a4 	.word	0x080601a4

080a1660 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <network_connect+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	685b      	ldr	r3, [r3, #4]
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601c8 	.word	0x080601c8

080a1670 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <network_connecting+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	689b      	ldr	r3, [r3, #8]
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601c8 	.word	0x080601c8

080a1680 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <network_disconnect+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	68db      	ldr	r3, [r3, #12]
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601c8 	.word	0x080601c8

080a1690 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <network_ready+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	691b      	ldr	r3, [r3, #16]
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601c8 	.word	0x080601c8

080a16a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <network_on+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	695b      	ldr	r3, [r3, #20]
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	080601c8 	.word	0x080601c8

080a16b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <network_off+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	699b      	ldr	r3, [r3, #24]
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	080601c8 	.word	0x080601c8

080a16c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <network_listen+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	69db      	ldr	r3, [r3, #28]
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080601c8 	.word	0x080601c8

080a16d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <network_listening+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	6a1b      	ldr	r3, [r3, #32]
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080601c8 	.word	0x080601c8

080a16e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <network_set_listen_timeout+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601c8 	.word	0x080601c8

080a16f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <network_get_listen_timeout+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601c8 	.word	0x080601c8

080a1700 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <network_is_on+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601c8 	.word	0x080601c8

080a1710 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <network_is_off+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601c8 	.word	0x080601c8

080a1720 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601cc 	.word	0x080601cc

080a1730 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <malloc+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	681b      	ldr	r3, [r3, #0]
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601a0 	.word	0x080601a0

080a1740 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <free+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	685b      	ldr	r3, [r3, #4]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601a0 	.word	0x080601a0

080a1750 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <__assert_func+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601a0 	.word	0x080601a0

080a1760 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <newlib_impure_ptr_callback+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601a0 	.word	0x080601a0

080a1770 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1770:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1772:	2600      	movs	r6, #0
 80a1774:	4604      	mov	r4, r0
 80a1776:	460d      	mov	r5, r1
 80a1778:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a177c:	f7ff fe7a 	bl	80a1474 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1780:	4628      	mov	r0, r5
    _spi = spi;
 80a1782:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1784:	f7ff ff00 	bl	80a1588 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1788:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a178a:	6066      	str	r6, [r4, #4]
}
 80a178c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1790 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1790:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1792:	2000      	movs	r0, #0
 80a1794:	4b04      	ldr	r3, [pc, #16]	; (80a17a8 <_GLOBAL__sub_I_System+0x18>)
 80a1796:	601a      	str	r2, [r3, #0]
 80a1798:	4b04      	ldr	r3, [pc, #16]	; (80a17ac <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a179a:	4a05      	ldr	r2, [pc, #20]	; (80a17b0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a179c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a17a0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a17a2:	f7ff bf39 	b.w	80a1618 <set_system_mode>
 80a17a6:	bf00      	nop
 80a17a8:	2000009c 	.word	0x2000009c
 80a17ac:	20000090 	.word	0x20000090
 80a17b0:	ffff0000 	.word	0xffff0000

080a17b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a17b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17b6:	4606      	mov	r6, r0
 80a17b8:	460d      	mov	r5, r1
  size_t n = 0;
 80a17ba:	2400      	movs	r4, #0
 80a17bc:	188f      	adds	r7, r1, r2
  while (size--) {
 80a17be:	42bd      	cmp	r5, r7
 80a17c0:	d00c      	beq.n	80a17dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a17c2:	6833      	ldr	r3, [r6, #0]
 80a17c4:	4630      	mov	r0, r6
 80a17c6:	689b      	ldr	r3, [r3, #8]
 80a17c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a17cc:	4798      	blx	r3
     if (chunk>=0)
 80a17ce:	1e03      	subs	r3, r0, #0
 80a17d0:	db01      	blt.n	80a17d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a17d2:	441c      	add	r4, r3
  while (size--) {
 80a17d4:	e7f3      	b.n	80a17be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a17d6:	2c00      	cmp	r4, #0
 80a17d8:	bf08      	it	eq
 80a17da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a17dc:	4620      	mov	r0, r4
 80a17de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a17e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a17e0:	b570      	push	{r4, r5, r6, lr}
 80a17e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a17e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a17e6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a17e8:	b149      	cbz	r1, 80a17fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a17ea:	f000 fcc5 	bl	80a2178 <strlen>
 80a17ee:	682b      	ldr	r3, [r5, #0]
 80a17f0:	4602      	mov	r2, r0
 80a17f2:	4621      	mov	r1, r4
 80a17f4:	4628      	mov	r0, r5
    }
 80a17f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a17fa:	68db      	ldr	r3, [r3, #12]
 80a17fc:	4718      	bx	r3
    }
 80a17fe:	bd70      	pop	{r4, r5, r6, pc}

080a1800 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1800:	6803      	ldr	r3, [r0, #0]
 80a1802:	689b      	ldr	r3, [r3, #8]
 80a1804:	4718      	bx	r3

080a1806 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1806:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1808:	2a01      	cmp	r2, #1
 80a180a:	bf98      	it	ls
 80a180c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a180e:	b530      	push	{r4, r5, lr}
 80a1810:	b08b      	sub	sp, #44	; 0x2c
 80a1812:	460c      	mov	r4, r1
  *str = '\0';
 80a1814:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1818:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a181a:	4625      	mov	r5, r4
 80a181c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1820:	fb04 5312 	mls	r3, r4, r2, r5
 80a1824:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1826:	2b09      	cmp	r3, #9
 80a1828:	bf94      	ite	ls
 80a182a:	3330      	addls	r3, #48	; 0x30
 80a182c:	3337      	addhi	r3, #55	; 0x37
 80a182e:	b2db      	uxtb	r3, r3
  } while(n);
 80a1830:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1832:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1836:	d9f0      	bls.n	80a181a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1838:	f7ff ffd2 	bl	80a17e0 <_ZN5Print5writeEPKc>
}
 80a183c:	b00b      	add	sp, #44	; 0x2c
 80a183e:	bd30      	pop	{r4, r5, pc}

080a1840 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1840:	4b01      	ldr	r3, [pc, #4]	; (80a1848 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1842:	4a02      	ldr	r2, [pc, #8]	; (80a184c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1844:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1846:	4770      	bx	lr
 80a1848:	200000a0 	.word	0x200000a0
 80a184c:	080a2280 	.word	0x080a2280

080a1850 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1850:	4b02      	ldr	r3, [pc, #8]	; (80a185c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1852:	681a      	ldr	r2, [r3, #0]
 80a1854:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1856:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1858:	4770      	bx	lr
 80a185a:	bf00      	nop
 80a185c:	2000000c 	.word	0x2000000c
 80a1860:	200000a4 	.word	0x200000a4

080a1864 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1864:	2100      	movs	r1, #0
 80a1866:	f7ff bedf 	b.w	80a1628 <system_delay_ms>
	...

080a186c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a186c:	2200      	movs	r2, #0
 80a186e:	4b01      	ldr	r3, [pc, #4]	; (80a1874 <_GLOBAL__sub_I_RGB+0x8>)
 80a1870:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a1872:	4770      	bx	lr
 80a1874:	200000a8 	.word	0x200000a8

080a1878 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1878:	4b01      	ldr	r3, [pc, #4]	; (80a1880 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a187a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a187c:	4770      	bx	lr
 80a187e:	bf00      	nop
 80a1880:	20000010 	.word	0x20000010

080a1884 <serialEventRun>:
{
 80a1884:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1886:	4b13      	ldr	r3, [pc, #76]	; (80a18d4 <serialEventRun+0x50>)
 80a1888:	b143      	cbz	r3, 80a189c <serialEventRun+0x18>
 80a188a:	f000 f971 	bl	80a1b70 <_Z16_fetch_usbserialv>
 80a188e:	6803      	ldr	r3, [r0, #0]
 80a1890:	691b      	ldr	r3, [r3, #16]
 80a1892:	4798      	blx	r3
 80a1894:	2800      	cmp	r0, #0
 80a1896:	dd01      	ble.n	80a189c <serialEventRun+0x18>
        serialEvent();
 80a1898:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a189c:	4b0e      	ldr	r3, [pc, #56]	; (80a18d8 <serialEventRun+0x54>)
 80a189e:	b143      	cbz	r3, 80a18b2 <serialEventRun+0x2e>
 80a18a0:	f000 fbb0 	bl	80a2004 <_Z22__fetch_global_Serial1v>
 80a18a4:	6803      	ldr	r3, [r0, #0]
 80a18a6:	691b      	ldr	r3, [r3, #16]
 80a18a8:	4798      	blx	r3
 80a18aa:	2800      	cmp	r0, #0
 80a18ac:	dd01      	ble.n	80a18b2 <serialEventRun+0x2e>
        serialEvent1();
 80a18ae:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a18b2:	4b0a      	ldr	r3, [pc, #40]	; (80a18dc <serialEventRun+0x58>)
 80a18b4:	b10b      	cbz	r3, 80a18ba <serialEventRun+0x36>
 80a18b6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a18ba:	4b09      	ldr	r3, [pc, #36]	; (80a18e0 <serialEventRun+0x5c>)
 80a18bc:	b143      	cbz	r3, 80a18d0 <serialEventRun+0x4c>
 80a18be:	f000 f991 	bl	80a1be4 <_Z17_fetch_usbserial1v>
 80a18c2:	6803      	ldr	r3, [r0, #0]
 80a18c4:	691b      	ldr	r3, [r3, #16]
 80a18c6:	4798      	blx	r3
 80a18c8:	2800      	cmp	r0, #0
 80a18ca:	dd01      	ble.n	80a18d0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a18cc:	f3af 8000 	nop.w
}
 80a18d0:	bd08      	pop	{r3, pc}
 80a18d2:	bf00      	nop
	...

080a18e4 <_post_loop>:
{
 80a18e4:	b508      	push	{r3, lr}
	serialEventRun();
 80a18e6:	f7ff ffcd 	bl	80a1884 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a18ea:	f7ff fdbb 	bl	80a1464 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a18ee:	4b01      	ldr	r3, [pc, #4]	; (80a18f4 <_post_loop+0x10>)
 80a18f0:	6018      	str	r0, [r3, #0]
}
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	2000042c 	.word	0x2000042c

080a18f8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a18f8:	4805      	ldr	r0, [pc, #20]	; (80a1910 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a18fa:	4a06      	ldr	r2, [pc, #24]	; (80a1914 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a18fc:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a18fe:	1a12      	subs	r2, r2, r0
 80a1900:	4905      	ldr	r1, [pc, #20]	; (80a1918 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a1902:	f000 fbf5 	bl	80a20f0 <memcpy>
    __backup_sram_signature = signature;
 80a1906:	4b05      	ldr	r3, [pc, #20]	; (80a191c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1908:	4a05      	ldr	r2, [pc, #20]	; (80a1920 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a190a:	601a      	str	r2, [r3, #0]
}
 80a190c:	bd08      	pop	{r3, pc}
 80a190e:	bf00      	nop
 80a1910:	40024000 	.word	0x40024000
 80a1914:	40024004 	.word	0x40024004
 80a1918:	080a2470 	.word	0x080a2470
 80a191c:	40024000 	.word	0x40024000
 80a1920:	9a271c1e 	.word	0x9a271c1e

080a1924 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1924:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1926:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1928:	461a      	mov	r2, r3
 80a192a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a192e:	9300      	str	r3, [sp, #0]
 80a1930:	f7ff fe8c 	bl	80a164c <system_ctrl_set_result>
}
 80a1934:	b003      	add	sp, #12
 80a1936:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a193c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a193c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a193e:	8843      	ldrh	r3, [r0, #2]
 80a1940:	2b0a      	cmp	r3, #10
 80a1942:	d008      	beq.n	80a1956 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1944:	2b50      	cmp	r3, #80	; 0x50
 80a1946:	d10b      	bne.n	80a1960 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1948:	4b09      	ldr	r3, [pc, #36]	; (80a1970 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a194a:	681b      	ldr	r3, [r3, #0]
 80a194c:	b14b      	cbz	r3, 80a1962 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a194e:	b003      	add	sp, #12
 80a1950:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1954:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1956:	f7ff ffe5 	bl	80a1924 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a195a:	b003      	add	sp, #12
 80a195c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1960:	2300      	movs	r3, #0
 80a1962:	461a      	mov	r2, r3
 80a1964:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1968:	9300      	str	r3, [sp, #0]
 80a196a:	f7ff fe6f 	bl	80a164c <system_ctrl_set_result>
}
 80a196e:	e7f4      	b.n	80a195a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1970:	200000bc 	.word	0x200000bc

080a1974 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1974:	2100      	movs	r1, #0
{
 80a1976:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1978:	4811      	ldr	r0, [pc, #68]	; (80a19c0 <module_user_init_hook+0x4c>)
 80a197a:	f7ff fef1 	bl	80a1760 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a197e:	4b11      	ldr	r3, [pc, #68]	; (80a19c4 <module_user_init_hook+0x50>)
 80a1980:	681a      	ldr	r2, [r3, #0]
 80a1982:	4b11      	ldr	r3, [pc, #68]	; (80a19c8 <module_user_init_hook+0x54>)
 80a1984:	429a      	cmp	r2, r3
 80a1986:	bf0c      	ite	eq
 80a1988:	2201      	moveq	r2, #1
 80a198a:	2200      	movne	r2, #0
 80a198c:	4b0f      	ldr	r3, [pc, #60]	; (80a19cc <module_user_init_hook+0x58>)
 80a198e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1990:	d001      	beq.n	80a1996 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a1992:	f7ff ffb1 	bl	80a18f8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1996:	f7ff fd55 	bl	80a1444 <HAL_RNG_GetRandomNumber>
 80a199a:	4604      	mov	r4, r0
    srand(seed);
 80a199c:	f000 fbbe 	bl	80a211c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a19a0:	4b0b      	ldr	r3, [pc, #44]	; (80a19d0 <module_user_init_hook+0x5c>)
 80a19a2:	b113      	cbz	r3, 80a19aa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a19a4:	4620      	mov	r0, r4
 80a19a6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a19aa:	2100      	movs	r1, #0
 80a19ac:	4808      	ldr	r0, [pc, #32]	; (80a19d0 <module_user_init_hook+0x5c>)
 80a19ae:	f7ff feb7 	bl	80a1720 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a19b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a19b6:	2100      	movs	r1, #0
 80a19b8:	4806      	ldr	r0, [pc, #24]	; (80a19d4 <module_user_init_hook+0x60>)
 80a19ba:	f7ff be3d 	b.w	80a1638 <system_ctrl_set_app_request_handler>
 80a19be:	bf00      	nop
 80a19c0:	080a1879 	.word	0x080a1879
 80a19c4:	40024000 	.word	0x40024000
 80a19c8:	9a271c1e 	.word	0x9a271c1e
 80a19cc:	200000b8 	.word	0x200000b8
 80a19d0:	00000000 	.word	0x00000000
 80a19d4:	080a193d 	.word	0x080a193d

080a19d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a19d8:	4770      	bx	lr

080a19da <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a19da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19dc:	460e      	mov	r6, r1
 80a19de:	2400      	movs	r4, #0
 80a19e0:	f100 0708 	add.w	r7, r0, #8
 80a19e4:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a19e6:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a19ea:	220a      	movs	r2, #10
 80a19ec:	4630      	mov	r0, r6
 80a19ee:	f7ff ff0a 	bl	80a1806 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a19f2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a19f4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a19f6:	d101      	bne.n	80a19fc <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a19f8:	4620      	mov	r0, r4
 80a19fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a19fc:	2c00      	cmp	r4, #0
 80a19fe:	d0f2      	beq.n	80a19e6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1a00:	212e      	movs	r1, #46	; 0x2e
 80a1a02:	4630      	mov	r0, r6
 80a1a04:	f7ff fefc 	bl	80a1800 <_ZN5Print5printEc>
 80a1a08:	4404      	add	r4, r0
 80a1a0a:	e7ec      	b.n	80a19e6 <_ZNK9IPAddress7printToER5Print+0xc>

080a1a0c <_ZN9IPAddressD0Ev>:
 80a1a0c:	b510      	push	{r4, lr}
 80a1a0e:	4604      	mov	r4, r0
 80a1a10:	2118      	movs	r1, #24
 80a1a12:	f7fe fb42 	bl	80a009a <_ZdlPvj>
 80a1a16:	4620      	mov	r0, r4
 80a1a18:	bd10      	pop	{r4, pc}
	...

080a1a1c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1a1c:	b510      	push	{r4, lr}
 80a1a1e:	4604      	mov	r4, r0
 80a1a20:	4b04      	ldr	r3, [pc, #16]	; (80a1a34 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1a22:	2211      	movs	r2, #17
 80a1a24:	2100      	movs	r1, #0
 80a1a26:	f840 3b04 	str.w	r3, [r0], #4
 80a1a2a:	f000 fb6f 	bl	80a210c <memset>
}
 80a1a2e:	4620      	mov	r0, r4
 80a1a30:	bd10      	pop	{r4, pc}
 80a1a32:	bf00      	nop
 80a1a34:	080a22a8 	.word	0x080a22a8

080a1a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1a38:	4603      	mov	r3, r0
 80a1a3a:	4a07      	ldr	r2, [pc, #28]	; (80a1a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1a3c:	b510      	push	{r4, lr}
 80a1a3e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a1a42:	f101 0210 	add.w	r2, r1, #16
 80a1a46:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1a4a:	4291      	cmp	r1, r2
 80a1a4c:	f843 4b04 	str.w	r4, [r3], #4
 80a1a50:	d1f9      	bne.n	80a1a46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1a52:	780a      	ldrb	r2, [r1, #0]
 80a1a54:	701a      	strb	r2, [r3, #0]
}
 80a1a56:	bd10      	pop	{r4, pc}
 80a1a58:	080a22a8 	.word	0x080a22a8

080a1a5c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a1a5c:	4a02      	ldr	r2, [pc, #8]	; (80a1a68 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a1a5e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a1a62:	2204      	movs	r2, #4
 80a1a64:	7502      	strb	r2, [r0, #20]
}
 80a1a66:	4770      	bx	lr
 80a1a68:	080a22a8 	.word	0x080a22a8

080a1a6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a1a6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1a6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1a72:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a1a76:	2304      	movs	r3, #4
 80a1a78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a1a7c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a1a80:	6044      	str	r4, [r0, #4]
 80a1a82:	7503      	strb	r3, [r0, #20]
}
 80a1a84:	bd10      	pop	{r4, pc}
	...

080a1a88 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1a88:	b513      	push	{r0, r1, r4, lr}
 80a1a8a:	4c04      	ldr	r4, [pc, #16]	; (80a1a9c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1a8c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1a8e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a1a92:	9400      	str	r4, [sp, #0]
 80a1a94:	f7ff ffea 	bl	80a1a6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1a98:	b002      	add	sp, #8
 80a1a9a:	bd10      	pop	{r4, pc}
 80a1a9c:	080a22a8 	.word	0x080a22a8

080a1aa0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1aa0:	7441      	strb	r1, [r0, #17]
}
 80a1aa2:	4770      	bx	lr

080a1aa4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1aa4:	4770      	bx	lr

080a1aa6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1aa6:	4770      	bx	lr

080a1aa8 <_ZN9USBSerial4readEv>:
{
 80a1aa8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1aaa:	2100      	movs	r1, #0
 80a1aac:	7c00      	ldrb	r0, [r0, #16]
 80a1aae:	f7ff fd93 	bl	80a15d8 <HAL_USB_USART_Receive_Data>
}
 80a1ab2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ab6:	bd08      	pop	{r3, pc}

080a1ab8 <_ZN9USBSerial4peekEv>:
{
 80a1ab8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1aba:	2101      	movs	r1, #1
 80a1abc:	7c00      	ldrb	r0, [r0, #16]
 80a1abe:	f7ff fd8b 	bl	80a15d8 <HAL_USB_USART_Receive_Data>
}
 80a1ac2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1ac6:	bd08      	pop	{r3, pc}

080a1ac8 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1ac8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1aca:	7c00      	ldrb	r0, [r0, #16]
 80a1acc:	f7ff fd7c 	bl	80a15c8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1ad0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ad4:	bd08      	pop	{r3, pc}

080a1ad6 <_ZN9USBSerial9availableEv>:
{
 80a1ad6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1ad8:	7c00      	ldrb	r0, [r0, #16]
 80a1ada:	f7ff fd6d 	bl	80a15b8 <HAL_USB_USART_Available_Data>
}
 80a1ade:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1ae2:	bd08      	pop	{r3, pc}

080a1ae4 <_ZN9USBSerial5writeEh>:
{
 80a1ae4:	b538      	push	{r3, r4, r5, lr}
 80a1ae6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ae8:	7c00      	ldrb	r0, [r0, #16]
{
 80a1aea:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1aec:	f7ff fd6c 	bl	80a15c8 <HAL_USB_USART_Available_Data_For_Write>
 80a1af0:	2800      	cmp	r0, #0
 80a1af2:	dc01      	bgt.n	80a1af8 <_ZN9USBSerial5writeEh+0x14>
 80a1af4:	7c60      	ldrb	r0, [r4, #17]
 80a1af6:	b128      	cbz	r0, 80a1b04 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1af8:	4629      	mov	r1, r5
 80a1afa:	7c20      	ldrb	r0, [r4, #16]
 80a1afc:	f7ff fd74 	bl	80a15e8 <HAL_USB_USART_Send_Data>
 80a1b00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1b04:	bd38      	pop	{r3, r4, r5, pc}

080a1b06 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a1b06:	7c00      	ldrb	r0, [r0, #16]
 80a1b08:	f7ff bd76 	b.w	80a15f8 <HAL_USB_USART_Flush_Data>

080a1b0c <_ZN9USBSerialD0Ev>:
 80a1b0c:	b510      	push	{r4, lr}
 80a1b0e:	4604      	mov	r4, r0
 80a1b10:	2114      	movs	r1, #20
 80a1b12:	f7fe fac2 	bl	80a009a <_ZdlPvj>
 80a1b16:	4620      	mov	r0, r4
 80a1b18:	bd10      	pop	{r4, pc}

080a1b1a <__tcf_1>:
 80a1b1a:	4770      	bx	lr

080a1b1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1b1c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1b22:	4604      	mov	r4, r0
 80a1b24:	4608      	mov	r0, r1
 80a1b26:	2100      	movs	r1, #0
 80a1b28:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1b2c:	4b04      	ldr	r3, [pc, #16]	; (80a1b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1b2e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1b30:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1b32:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a1b34:	4611      	mov	r1, r2
  _blocking = true;
 80a1b36:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1b38:	f7ff fd36 	bl	80a15a8 <HAL_USB_USART_Init>
}
 80a1b3c:	4620      	mov	r0, r4
 80a1b3e:	bd10      	pop	{r4, pc}
 80a1b40:	080a22bc 	.word	0x080a22bc

080a1b44 <_Z19acquireSerialBufferv>:
{
 80a1b44:	b510      	push	{r4, lr}
 80a1b46:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1b48:	2214      	movs	r2, #20
 80a1b4a:	2100      	movs	r1, #0
 80a1b4c:	f000 fade 	bl	80a210c <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a1b50:	4b05      	ldr	r3, [pc, #20]	; (80a1b68 <_Z19acquireSerialBufferv+0x24>)
}
 80a1b52:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a1b54:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1b56:	4b05      	ldr	r3, [pc, #20]	; (80a1b6c <_Z19acquireSerialBufferv+0x28>)
 80a1b58:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1b5a:	f240 1301 	movw	r3, #257	; 0x101
 80a1b5e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1b60:	2381      	movs	r3, #129	; 0x81
 80a1b62:	8223      	strh	r3, [r4, #16]
}
 80a1b64:	bd10      	pop	{r4, pc}
 80a1b66:	bf00      	nop
 80a1b68:	200000f0 	.word	0x200000f0
 80a1b6c:	200001f1 	.word	0x200001f1

080a1b70 <_Z16_fetch_usbserialv>:
{
 80a1b70:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1b72:	4d0e      	ldr	r5, [pc, #56]	; (80a1bac <_Z16_fetch_usbserialv+0x3c>)
{
 80a1b74:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1b76:	a801      	add	r0, sp, #4
 80a1b78:	f7ff ffe4 	bl	80a1b44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1b7c:	7829      	ldrb	r1, [r5, #0]
 80a1b7e:	f3bf 8f5b 	dmb	ish
 80a1b82:	f011 0401 	ands.w	r4, r1, #1
 80a1b86:	d10e      	bne.n	80a1ba6 <_Z16_fetch_usbserialv+0x36>
 80a1b88:	4628      	mov	r0, r5
 80a1b8a:	f7fe fa88 	bl	80a009e <__cxa_guard_acquire>
 80a1b8e:	b150      	cbz	r0, 80a1ba6 <_Z16_fetch_usbserialv+0x36>
 80a1b90:	4621      	mov	r1, r4
 80a1b92:	aa01      	add	r2, sp, #4
 80a1b94:	4806      	ldr	r0, [pc, #24]	; (80a1bb0 <_Z16_fetch_usbserialv+0x40>)
 80a1b96:	f7ff ffc1 	bl	80a1b1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1b9a:	4628      	mov	r0, r5
 80a1b9c:	f7fe fa84 	bl	80a00a8 <__cxa_guard_release>
 80a1ba0:	4804      	ldr	r0, [pc, #16]	; (80a1bb4 <_Z16_fetch_usbserialv+0x44>)
 80a1ba2:	f000 fa9f 	bl	80a20e4 <atexit>
	return _usbserial;
}
 80a1ba6:	4802      	ldr	r0, [pc, #8]	; (80a1bb0 <_Z16_fetch_usbserialv+0x40>)
 80a1ba8:	b007      	add	sp, #28
 80a1baa:	bd30      	pop	{r4, r5, pc}
 80a1bac:	200000c0 	.word	0x200000c0
 80a1bb0:	200000c8 	.word	0x200000c8
 80a1bb4:	080a1aa5 	.word	0x080a1aa5

080a1bb8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1bb8:	b510      	push	{r4, lr}
 80a1bba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a1bbc:	2214      	movs	r2, #20
 80a1bbe:	2100      	movs	r1, #0
 80a1bc0:	f000 faa4 	bl	80a210c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1bc4:	4b05      	ldr	r3, [pc, #20]	; (80a1bdc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1bc6:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1bc8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1bca:	4b05      	ldr	r3, [pc, #20]	; (80a1be0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1bcc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1bce:	f240 1301 	movw	r3, #257	; 0x101
 80a1bd2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1bd4:	2381      	movs	r3, #129	; 0x81
 80a1bd6:	8223      	strh	r3, [r4, #16]
}
 80a1bd8:	bd10      	pop	{r4, pc}
 80a1bda:	bf00      	nop
 80a1bdc:	20000272 	.word	0x20000272
 80a1be0:	20000373 	.word	0x20000373

080a1be4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1be4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1be6:	4c0e      	ldr	r4, [pc, #56]	; (80a1c20 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1be8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1bea:	a801      	add	r0, sp, #4
 80a1bec:	f7ff ffe4 	bl	80a1bb8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1bf0:	7823      	ldrb	r3, [r4, #0]
 80a1bf2:	f3bf 8f5b 	dmb	ish
 80a1bf6:	07db      	lsls	r3, r3, #31
 80a1bf8:	d40e      	bmi.n	80a1c18 <_Z17_fetch_usbserial1v+0x34>
 80a1bfa:	4620      	mov	r0, r4
 80a1bfc:	f7fe fa4f 	bl	80a009e <__cxa_guard_acquire>
 80a1c00:	b150      	cbz	r0, 80a1c18 <_Z17_fetch_usbserial1v+0x34>
 80a1c02:	2101      	movs	r1, #1
 80a1c04:	aa01      	add	r2, sp, #4
 80a1c06:	4807      	ldr	r0, [pc, #28]	; (80a1c24 <_Z17_fetch_usbserial1v+0x40>)
 80a1c08:	f7ff ff88 	bl	80a1b1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1c0c:	4620      	mov	r0, r4
 80a1c0e:	f7fe fa4b 	bl	80a00a8 <__cxa_guard_release>
 80a1c12:	4805      	ldr	r0, [pc, #20]	; (80a1c28 <_Z17_fetch_usbserial1v+0x44>)
 80a1c14:	f000 fa66 	bl	80a20e4 <atexit>
  return _usbserial1;
}
 80a1c18:	4802      	ldr	r0, [pc, #8]	; (80a1c24 <_Z17_fetch_usbserial1v+0x40>)
 80a1c1a:	b006      	add	sp, #24
 80a1c1c:	bd10      	pop	{r4, pc}
 80a1c1e:	bf00      	nop
 80a1c20:	200000c4 	.word	0x200000c4
 80a1c24:	200000dc 	.word	0x200000dc
 80a1c28:	080a1b1b 	.word	0x080a1b1b

080a1c2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a1c2c:	4770      	bx	lr

080a1c2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1c2e:	7441      	strb	r1, [r0, #17]
}
 80a1c30:	4770      	bx	lr

080a1c32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a1c32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1c34:	7c00      	ldrb	r0, [r0, #16]
 80a1c36:	f7ff fc5d 	bl	80a14f4 <hal_usart_available_data_for_write>
}
 80a1c3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1c3e:	bd08      	pop	{r3, pc}

080a1c40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1c40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1c42:	7c00      	ldrb	r0, [r0, #16]
 80a1c44:	f7ff fc2e 	bl	80a14a4 <hal_usart_available>
}
 80a1c48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1c4c:	bd08      	pop	{r3, pc}

080a1c4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1c4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a1c50:	7c00      	ldrb	r0, [r0, #16]
 80a1c52:	f7ff fc37 	bl	80a14c4 <hal_usart_peek>
}
 80a1c56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1c5a:	bd08      	pop	{r3, pc}

080a1c5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1c5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a1c5e:	7c00      	ldrb	r0, [r0, #16]
 80a1c60:	f7ff fc28 	bl	80a14b4 <hal_usart_read>
}
 80a1c64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1c68:	bd08      	pop	{r3, pc}

080a1c6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a1c6a:	7c00      	ldrb	r0, [r0, #16]
 80a1c6c:	f7ff bc32 	b.w	80a14d4 <hal_usart_flush>

080a1c70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1c70:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1c72:	7c46      	ldrb	r6, [r0, #17]
{
 80a1c74:	4604      	mov	r4, r0
 80a1c76:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1c78:	b12e      	cbz	r6, 80a1c86 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1c7a:	4629      	mov	r1, r5
 80a1c7c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1c82:	f7ff bc07 	b.w	80a1494 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1c86:	7c00      	ldrb	r0, [r0, #16]
 80a1c88:	f7ff fc34 	bl	80a14f4 <hal_usart_available_data_for_write>
 80a1c8c:	2800      	cmp	r0, #0
 80a1c8e:	dcf4      	bgt.n	80a1c7a <_ZN11USARTSerial5writeEh+0xa>
}
 80a1c90:	4630      	mov	r0, r6
 80a1c92:	bd70      	pop	{r4, r5, r6, pc}

080a1c94 <_ZN11USARTSerialD0Ev>:
 80a1c94:	b510      	push	{r4, lr}
 80a1c96:	4604      	mov	r4, r0
 80a1c98:	2114      	movs	r1, #20
 80a1c9a:	f7fe f9fe 	bl	80a009a <_ZdlPvj>
 80a1c9e:	4620      	mov	r0, r4
 80a1ca0:	bd10      	pop	{r4, pc}
	...

080a1ca4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a1ca4:	b510      	push	{r4, lr}
 80a1ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1caa:	4604      	mov	r4, r0
 80a1cac:	4608      	mov	r0, r1
 80a1cae:	4611      	mov	r1, r2
 80a1cb0:	2200      	movs	r2, #0
 80a1cb2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a1cb6:	4b04      	ldr	r3, [pc, #16]	; (80a1cc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a1cb8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a1cba:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a1cbc:	2301      	movs	r3, #1
 80a1cbe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a1cc0:	f7ff fc20 	bl	80a1504 <hal_usart_init_ex>
}
 80a1cc4:	4620      	mov	r0, r4
 80a1cc6:	bd10      	pop	{r4, pc}
 80a1cc8:	080a22ec 	.word	0x080a22ec

080a1ccc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1ccc:	4770      	bx	lr

080a1cce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cd0:	4606      	mov	r6, r0
 80a1cd2:	4615      	mov	r5, r2
 80a1cd4:	460c      	mov	r4, r1
 80a1cd6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1cd8:	42bc      	cmp	r4, r7
 80a1cda:	d006      	beq.n	80a1cea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1cdc:	6833      	ldr	r3, [r6, #0]
 80a1cde:	4630      	mov	r0, r6
 80a1ce0:	689b      	ldr	r3, [r3, #8]
 80a1ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1ce6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a1ce8:	e7f6      	b.n	80a1cd8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a1cea:	4628      	mov	r0, r5
 80a1cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1cee <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a1cee:	2200      	movs	r2, #0
 80a1cf0:	7c00      	ldrb	r0, [r0, #16]
 80a1cf2:	f7ff bc0f 	b.w	80a1514 <hal_i2c_write>

080a1cf6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a1cf6:	2100      	movs	r1, #0
 80a1cf8:	7c00      	ldrb	r0, [r0, #16]
 80a1cfa:	f7ff bc13 	b.w	80a1524 <hal_i2c_available>

080a1cfe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a1cfe:	2100      	movs	r1, #0
 80a1d00:	7c00      	ldrb	r0, [r0, #16]
 80a1d02:	f7ff bc17 	b.w	80a1534 <hal_i2c_read>

080a1d06 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a1d06:	2100      	movs	r1, #0
 80a1d08:	7c00      	ldrb	r0, [r0, #16]
 80a1d0a:	f7ff bc1b 	b.w	80a1544 <hal_i2c_peek>

080a1d0e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a1d0e:	2100      	movs	r1, #0
 80a1d10:	7c00      	ldrb	r0, [r0, #16]
 80a1d12:	f7ff bc1f 	b.w	80a1554 <hal_i2c_flush>

080a1d16 <_ZN7TwoWireD0Ev>:
 80a1d16:	b510      	push	{r4, lr}
 80a1d18:	4604      	mov	r4, r0
 80a1d1a:	2114      	movs	r1, #20
 80a1d1c:	f7fe f9bd 	bl	80a009a <_ZdlPvj>
 80a1d20:	4620      	mov	r0, r4
 80a1d22:	bd10      	pop	{r4, pc}

080a1d24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1d24:	b510      	push	{r4, lr}
 80a1d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d2a:	4604      	mov	r4, r0
 80a1d2c:	4608      	mov	r0, r1
 80a1d2e:	2100      	movs	r1, #0
 80a1d30:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1d34:	4b03      	ldr	r3, [pc, #12]	; (80a1d44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1d36:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1d38:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a1d3a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1d3c:	f7ff fc1a 	bl	80a1574 <hal_i2c_init>
}
 80a1d40:	4620      	mov	r0, r4
 80a1d42:	bd10      	pop	{r4, pc}
 80a1d44:	080a231c 	.word	0x080a231c

080a1d48 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1d48:	2200      	movs	r2, #0
 80a1d4a:	6840      	ldr	r0, [r0, #4]
 80a1d4c:	4611      	mov	r1, r2
 80a1d4e:	f7ff bc9f 	b.w	80a1690 <network_ready>

080a1d52 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d54:	4615      	mov	r5, r2
 80a1d56:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1d58:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a1d5a:	460e      	mov	r6, r1
 80a1d5c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a1d5e:	2100      	movs	r1, #0
 80a1d60:	a803      	add	r0, sp, #12
 80a1d62:	f000 f9d3 	bl	80a210c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1d66:	4628      	mov	r0, r5
 80a1d68:	f000 fa06 	bl	80a2178 <strlen>
 80a1d6c:	2700      	movs	r7, #0
 80a1d6e:	b281      	uxth	r1, r0
 80a1d70:	6873      	ldr	r3, [r6, #4]
 80a1d72:	4628      	mov	r0, r5
 80a1d74:	9700      	str	r7, [sp, #0]
 80a1d76:	aa03      	add	r2, sp, #12
 80a1d78:	f7ff fc46 	bl	80a1608 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1d7c:	b130      	cbz	r0, 80a1d8c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a1d7e:	4639      	mov	r1, r7
 80a1d80:	4620      	mov	r0, r4
 80a1d82:	f7ff fe6b 	bl	80a1a5c <_ZN9IPAddressC1Em>
    }
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	b009      	add	sp, #36	; 0x24
 80a1d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1d8c:	4620      	mov	r0, r4
 80a1d8e:	a903      	add	r1, sp, #12
 80a1d90:	f7ff fe52 	bl	80a1a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1d94:	e7f7      	b.n	80a1d86 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1d96 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1d96:	2200      	movs	r2, #0
 80a1d98:	6840      	ldr	r0, [r0, #4]
 80a1d9a:	4611      	mov	r1, r2
 80a1d9c:	f7ff bc98 	b.w	80a16d0 <network_listening>

080a1da0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1da0:	2200      	movs	r2, #0
 80a1da2:	6840      	ldr	r0, [r0, #4]
 80a1da4:	4611      	mov	r1, r2
 80a1da6:	f7ff bca3 	b.w	80a16f0 <network_get_listen_timeout>

080a1daa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1daa:	2200      	movs	r2, #0
 80a1dac:	6840      	ldr	r0, [r0, #4]
 80a1dae:	f7ff bc97 	b.w	80a16e0 <network_set_listen_timeout>

080a1db2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1db2:	2200      	movs	r2, #0
 80a1db4:	6840      	ldr	r0, [r0, #4]
 80a1db6:	f081 0101 	eor.w	r1, r1, #1
 80a1dba:	f7ff bc81 	b.w	80a16c0 <network_listen>

080a1dbe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1dbe:	2300      	movs	r3, #0
 80a1dc0:	6840      	ldr	r0, [r0, #4]
 80a1dc2:	461a      	mov	r2, r3
 80a1dc4:	4619      	mov	r1, r3
 80a1dc6:	f7ff bc73 	b.w	80a16b0 <network_off>

080a1dca <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a1dca:	2300      	movs	r3, #0
 80a1dcc:	6840      	ldr	r0, [r0, #4]
 80a1dce:	461a      	mov	r2, r3
 80a1dd0:	4619      	mov	r1, r3
 80a1dd2:	f7ff bc65 	b.w	80a16a0 <network_on>

080a1dd6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1dd6:	2200      	movs	r2, #0
 80a1dd8:	6840      	ldr	r0, [r0, #4]
 80a1dda:	4611      	mov	r1, r2
 80a1ddc:	f7ff bc48 	b.w	80a1670 <network_connecting>

080a1de0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1de0:	2200      	movs	r2, #0
 80a1de2:	2102      	movs	r1, #2
 80a1de4:	6840      	ldr	r0, [r0, #4]
 80a1de6:	f7ff bc4b 	b.w	80a1680 <network_disconnect>

080a1dea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1dea:	2300      	movs	r3, #0
 80a1dec:	6840      	ldr	r0, [r0, #4]
 80a1dee:	461a      	mov	r2, r3
 80a1df0:	f7ff bc36 	b.w	80a1660 <network_connect>

080a1df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1df4:	2204      	movs	r2, #4
 80a1df6:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1df8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1dfa:	4a02      	ldr	r2, [pc, #8]	; (80a1e04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1dfc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1dfe:	4770      	bx	lr
 80a1e00:	200003f4 	.word	0x200003f4
 80a1e04:	080a2344 	.word	0x080a2344

080a1e08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1e08:	2300      	movs	r3, #0
 80a1e0a:	6840      	ldr	r0, [r0, #4]
 80a1e0c:	461a      	mov	r2, r3
 80a1e0e:	f7ff bc27 	b.w	80a1660 <network_connect>

080a1e12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1e12:	2200      	movs	r2, #0
 80a1e14:	2102      	movs	r1, #2
 80a1e16:	6840      	ldr	r0, [r0, #4]
 80a1e18:	f7ff bc32 	b.w	80a1680 <network_disconnect>

080a1e1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1e1c:	2200      	movs	r2, #0
 80a1e1e:	6840      	ldr	r0, [r0, #4]
 80a1e20:	4611      	mov	r1, r2
 80a1e22:	f7ff bc25 	b.w	80a1670 <network_connecting>

080a1e26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1e26:	2200      	movs	r2, #0
 80a1e28:	6840      	ldr	r0, [r0, #4]
 80a1e2a:	4611      	mov	r1, r2
 80a1e2c:	f7ff bc30 	b.w	80a1690 <network_ready>

080a1e30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1e30:	2300      	movs	r3, #0
 80a1e32:	6840      	ldr	r0, [r0, #4]
 80a1e34:	461a      	mov	r2, r3
 80a1e36:	4619      	mov	r1, r3
 80a1e38:	f7ff bc32 	b.w	80a16a0 <network_on>

080a1e3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1e3c:	2300      	movs	r3, #0
 80a1e3e:	6840      	ldr	r0, [r0, #4]
 80a1e40:	461a      	mov	r2, r3
 80a1e42:	4619      	mov	r1, r3
 80a1e44:	f7ff bc34 	b.w	80a16b0 <network_off>

080a1e48 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1e48:	2100      	movs	r1, #0
 80a1e4a:	6840      	ldr	r0, [r0, #4]
 80a1e4c:	f7ff bc58 	b.w	80a1700 <network_is_on>

080a1e50 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1e50:	2100      	movs	r1, #0
 80a1e52:	6840      	ldr	r0, [r0, #4]
 80a1e54:	f7ff bc5c 	b.w	80a1710 <network_is_off>

080a1e58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1e58:	2200      	movs	r2, #0
 80a1e5a:	6840      	ldr	r0, [r0, #4]
 80a1e5c:	f081 0101 	eor.w	r1, r1, #1
 80a1e60:	f7ff bc2e 	b.w	80a16c0 <network_listen>

080a1e64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1e64:	2200      	movs	r2, #0
 80a1e66:	6840      	ldr	r0, [r0, #4]
 80a1e68:	f7ff bc3a 	b.w	80a16e0 <network_set_listen_timeout>

080a1e6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1e6c:	2200      	movs	r2, #0
 80a1e6e:	6840      	ldr	r0, [r0, #4]
 80a1e70:	4611      	mov	r1, r2
 80a1e72:	f7ff bc3d 	b.w	80a16f0 <network_get_listen_timeout>

080a1e76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1e76:	2200      	movs	r2, #0
 80a1e78:	6840      	ldr	r0, [r0, #4]
 80a1e7a:	4611      	mov	r1, r2
 80a1e7c:	f7ff bc28 	b.w	80a16d0 <network_listening>

080a1e80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1e80:	b570      	push	{r4, r5, r6, lr}
 80a1e82:	4615      	mov	r5, r2
 80a1e84:	b08e      	sub	sp, #56	; 0x38
 80a1e86:	4604      	mov	r4, r0
    IPAddress addr;
 80a1e88:	a808      	add	r0, sp, #32
 80a1e8a:	f7ff fdc7 	bl	80a1a1c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a1e8e:	2211      	movs	r2, #17
 80a1e90:	2100      	movs	r1, #0
 80a1e92:	a803      	add	r0, sp, #12
 80a1e94:	f000 f93a 	bl	80a210c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1e98:	2600      	movs	r6, #0
 80a1e9a:	4628      	mov	r0, r5
 80a1e9c:	f000 f96c 	bl	80a2178 <strlen>
 80a1ea0:	4b0a      	ldr	r3, [pc, #40]	; (80a1ecc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1ea2:	9600      	str	r6, [sp, #0]
 80a1ea4:	b281      	uxth	r1, r0
 80a1ea6:	685b      	ldr	r3, [r3, #4]
 80a1ea8:	4628      	mov	r0, r5
 80a1eaa:	aa03      	add	r2, sp, #12
 80a1eac:	f7ff fbac 	bl	80a1608 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1eb0:	b130      	cbz	r0, 80a1ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1eb2:	4631      	mov	r1, r6
 80a1eb4:	4620      	mov	r0, r4
 80a1eb6:	f7ff fdd1 	bl	80a1a5c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1eba:	4620      	mov	r0, r4
 80a1ebc:	b00e      	add	sp, #56	; 0x38
 80a1ebe:	bd70      	pop	{r4, r5, r6, pc}
 80a1ec0:	4620      	mov	r0, r4
 80a1ec2:	a903      	add	r1, sp, #12
 80a1ec4:	f7ff fdb8 	bl	80a1a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1ec8:	e7f7      	b.n	80a1eba <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1eca:	bf00      	nop
 80a1ecc:	200003f4 	.word	0x200003f4

080a1ed0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1ed0:	4b02      	ldr	r3, [pc, #8]	; (80a1edc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1ed2:	4a03      	ldr	r2, [pc, #12]	; (80a1ee0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1ed4:	601a      	str	r2, [r3, #0]
 80a1ed6:	2200      	movs	r2, #0
 80a1ed8:	605a      	str	r2, [r3, #4]

} // spark
 80a1eda:	4770      	bx	lr
 80a1edc:	200003fc 	.word	0x200003fc
 80a1ee0:	080a2380 	.word	0x080a2380

080a1ee4 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1ee4:	4b02      	ldr	r3, [pc, #8]	; (80a1ef0 <__tcf_0+0xc>)
 80a1ee6:	6898      	ldr	r0, [r3, #8]
 80a1ee8:	b108      	cbz	r0, 80a1eee <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a1eea:	f7ff bacb 	b.w	80a1484 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1eee:	4770      	bx	lr
 80a1ef0:	20000408 	.word	0x20000408

080a1ef4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a1ef4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a1ef6:	b570      	push	{r4, r5, r6, lr}
 80a1ef8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a1efa:	d901      	bls.n	80a1f00 <pinAvailable+0xc>
    return false;
 80a1efc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a1efe:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1f00:	f1a0 030d 	sub.w	r3, r0, #13
 80a1f04:	2b02      	cmp	r3, #2
 80a1f06:	d90b      	bls.n	80a1f20 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a1f08:	2801      	cmp	r0, #1
 80a1f0a:	d824      	bhi.n	80a1f56 <pinAvailable+0x62>
 80a1f0c:	f000 f8c4 	bl	80a2098 <_Z19__fetch_global_Wirev>
 80a1f10:	2100      	movs	r1, #0
 80a1f12:	7c00      	ldrb	r0, [r0, #16]
 80a1f14:	f7ff fb26 	bl	80a1564 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1f18:	f080 0001 	eor.w	r0, r0, #1
 80a1f1c:	b2c0      	uxtb	r0, r0
 80a1f1e:	e7ee      	b.n	80a1efe <pinAvailable+0xa>
 80a1f20:	4e12      	ldr	r6, [pc, #72]	; (80a1f6c <pinAvailable+0x78>)
 80a1f22:	7831      	ldrb	r1, [r6, #0]
 80a1f24:	f3bf 8f5b 	dmb	ish
 80a1f28:	f011 0501 	ands.w	r5, r1, #1
 80a1f2c:	d10d      	bne.n	80a1f4a <pinAvailable+0x56>
 80a1f2e:	4630      	mov	r0, r6
 80a1f30:	f7fe f8b5 	bl	80a009e <__cxa_guard_acquire>
 80a1f34:	b148      	cbz	r0, 80a1f4a <pinAvailable+0x56>
 80a1f36:	4629      	mov	r1, r5
 80a1f38:	480d      	ldr	r0, [pc, #52]	; (80a1f70 <pinAvailable+0x7c>)
 80a1f3a:	f7ff fc19 	bl	80a1770 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1f3e:	4630      	mov	r0, r6
 80a1f40:	f7fe f8b2 	bl	80a00a8 <__cxa_guard_release>
 80a1f44:	480b      	ldr	r0, [pc, #44]	; (80a1f74 <pinAvailable+0x80>)
 80a1f46:	f000 f8cd 	bl	80a20e4 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1f4a:	4b09      	ldr	r3, [pc, #36]	; (80a1f70 <pinAvailable+0x7c>)
 80a1f4c:	7818      	ldrb	r0, [r3, #0]
 80a1f4e:	f7ff fb23 	bl	80a1598 <hal_spi_is_enabled>
 80a1f52:	2800      	cmp	r0, #0
 80a1f54:	d1d2      	bne.n	80a1efc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a1f56:	3c12      	subs	r4, #18
 80a1f58:	2c01      	cmp	r4, #1
 80a1f5a:	d805      	bhi.n	80a1f68 <pinAvailable+0x74>
 80a1f5c:	f000 f852 	bl	80a2004 <_Z22__fetch_global_Serial1v>
 80a1f60:	7c00      	ldrb	r0, [r0, #16]
 80a1f62:	f7ff fabf 	bl	80a14e4 <hal_usart_is_enabled>
 80a1f66:	e7d7      	b.n	80a1f18 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1f68:	2001      	movs	r0, #1
 80a1f6a:	e7c8      	b.n	80a1efe <pinAvailable+0xa>
 80a1f6c:	20000404 	.word	0x20000404
 80a1f70:	20000408 	.word	0x20000408
 80a1f74:	080a1ee5 	.word	0x080a1ee5

080a1f78 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1f78:	2817      	cmp	r0, #23
{
 80a1f7a:	b538      	push	{r3, r4, r5, lr}
 80a1f7c:	4604      	mov	r4, r0
 80a1f7e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1f80:	d80a      	bhi.n	80a1f98 <pinMode+0x20>
 80a1f82:	29ff      	cmp	r1, #255	; 0xff
 80a1f84:	d008      	beq.n	80a1f98 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a1f86:	f7ff ffb5 	bl	80a1ef4 <pinAvailable>
 80a1f8a:	b128      	cbz	r0, 80a1f98 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1f8c:	4629      	mov	r1, r5
 80a1f8e:	4620      	mov	r0, r4
}
 80a1f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1f94:	f7ff ba3e 	b.w	80a1414 <HAL_Pin_Mode>
}
 80a1f98:	bd38      	pop	{r3, r4, r5, pc}

080a1f9a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1f9a:	b538      	push	{r3, r4, r5, lr}
 80a1f9c:	4604      	mov	r4, r0
 80a1f9e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1fa0:	f7ff fa40 	bl	80a1424 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1fa4:	28ff      	cmp	r0, #255	; 0xff
 80a1fa6:	d010      	beq.n	80a1fca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1fa8:	2806      	cmp	r0, #6
 80a1faa:	d804      	bhi.n	80a1fb6 <digitalWrite+0x1c>
 80a1fac:	234d      	movs	r3, #77	; 0x4d
 80a1fae:	fa23 f000 	lsr.w	r0, r3, r0
 80a1fb2:	07c3      	lsls	r3, r0, #31
 80a1fb4:	d409      	bmi.n	80a1fca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1fb6:	4620      	mov	r0, r4
 80a1fb8:	f7ff ff9c 	bl	80a1ef4 <pinAvailable>
 80a1fbc:	b128      	cbz	r0, 80a1fca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1fbe:	4629      	mov	r1, r5
 80a1fc0:	4620      	mov	r0, r4
}
 80a1fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1fc6:	f7ff ba35 	b.w	80a1434 <HAL_GPIO_Write>
}
 80a1fca:	bd38      	pop	{r3, r4, r5, pc}

080a1fcc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a1fcc:	4770      	bx	lr
	...

080a1fd0 <_Z20acquireSerial1Bufferv>:
{
 80a1fd0:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a1fd2:	2514      	movs	r5, #20
{
 80a1fd4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a1fd6:	462a      	mov	r2, r5
 80a1fd8:	2100      	movs	r1, #0
 80a1fda:	f000 f897 	bl	80a210c <memset>
 80a1fde:	8025      	strh	r5, [r4, #0]
 80a1fe0:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1fe2:	4e07      	ldr	r6, [pc, #28]	; (80a2000 <_Z20acquireSerial1Bufferv+0x30>)
 80a1fe4:	4628      	mov	r0, r5
 80a1fe6:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a1fe8:	8125      	strh	r5, [r4, #8]
 80a1fea:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1fec:	f000 f878 	bl	80a20e0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1ff0:	4631      	mov	r1, r6
    };
 80a1ff2:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a1ff4:	4628      	mov	r0, r5
 80a1ff6:	f000 f873 	bl	80a20e0 <_ZnajRKSt9nothrow_t>
    };
 80a1ffa:	60e0      	str	r0, [r4, #12]
}
 80a1ffc:	4620      	mov	r0, r4
 80a1ffe:	bd70      	pop	{r4, r5, r6, pc}
 80a2000:	080a23b4 	.word	0x080a23b4

080a2004 <_Z22__fetch_global_Serial1v>:
{
 80a2004:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a2006:	4d0e      	ldr	r5, [pc, #56]	; (80a2040 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a2008:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a200a:	7829      	ldrb	r1, [r5, #0]
 80a200c:	f3bf 8f5b 	dmb	ish
 80a2010:	f011 0401 	ands.w	r4, r1, #1
 80a2014:	d111      	bne.n	80a203a <_Z22__fetch_global_Serial1v+0x36>
 80a2016:	4628      	mov	r0, r5
 80a2018:	f7fe f841 	bl	80a009e <__cxa_guard_acquire>
 80a201c:	b168      	cbz	r0, 80a203a <_Z22__fetch_global_Serial1v+0x36>
 80a201e:	a801      	add	r0, sp, #4
 80a2020:	f7ff ffd6 	bl	80a1fd0 <_Z20acquireSerial1Bufferv>
 80a2024:	4621      	mov	r1, r4
 80a2026:	aa01      	add	r2, sp, #4
 80a2028:	4806      	ldr	r0, [pc, #24]	; (80a2044 <_Z22__fetch_global_Serial1v+0x40>)
 80a202a:	f7ff fe3b 	bl	80a1ca4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a202e:	4628      	mov	r0, r5
 80a2030:	f7fe f83a 	bl	80a00a8 <__cxa_guard_release>
 80a2034:	4804      	ldr	r0, [pc, #16]	; (80a2048 <_Z22__fetch_global_Serial1v+0x44>)
 80a2036:	f000 f855 	bl	80a20e4 <atexit>
    return serial1;
}
 80a203a:	4802      	ldr	r0, [pc, #8]	; (80a2044 <_Z22__fetch_global_Serial1v+0x40>)
 80a203c:	b007      	add	sp, #28
 80a203e:	bd30      	pop	{r4, r5, pc}
 80a2040:	20000414 	.word	0x20000414
 80a2044:	20000418 	.word	0x20000418
 80a2048:	080a1fcd 	.word	0x080a1fcd

080a204c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a204c:	2300      	movs	r3, #0
 80a204e:	b507      	push	{r0, r1, r2, lr}
 80a2050:	461a      	mov	r2, r3
 80a2052:	4619      	mov	r1, r3
 80a2054:	9300      	str	r3, [sp, #0]
 80a2056:	4803      	ldr	r0, [pc, #12]	; (80a2064 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a2058:	f7ff fd16 	bl	80a1a88 <_ZN9IPAddressC1Ehhhh>
 80a205c:	b003      	add	sp, #12
 80a205e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2062:	bf00      	nop
 80a2064:	20000430 	.word	0x20000430

080a2068 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2068:	4770      	bx	lr
	...

080a206c <_Z17acquireWireBufferv>:
{
 80a206c:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a206e:	2314      	movs	r3, #20
 80a2070:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2072:	4e08      	ldr	r6, [pc, #32]	; (80a2094 <_Z17acquireWireBufferv+0x28>)
{
 80a2074:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2076:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2078:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a207a:	6085      	str	r5, [r0, #8]
 80a207c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a207e:	4628      	mov	r0, r5
 80a2080:	f000 f82e 	bl	80a20e0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2084:	4631      	mov	r1, r6
	};
 80a2086:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2088:	4628      	mov	r0, r5
 80a208a:	f000 f829 	bl	80a20e0 <_ZnajRKSt9nothrow_t>
	};
 80a208e:	60e0      	str	r0, [r4, #12]
}
 80a2090:	4620      	mov	r0, r4
 80a2092:	bd70      	pop	{r4, r5, r6, pc}
 80a2094:	080a23b4 	.word	0x080a23b4

080a2098 <_Z19__fetch_global_Wirev>:
{
 80a2098:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a209a:	4d0e      	ldr	r5, [pc, #56]	; (80a20d4 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a209c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a209e:	7829      	ldrb	r1, [r5, #0]
 80a20a0:	f3bf 8f5b 	dmb	ish
 80a20a4:	f011 0401 	ands.w	r4, r1, #1
 80a20a8:	d111      	bne.n	80a20ce <_Z19__fetch_global_Wirev+0x36>
 80a20aa:	4628      	mov	r0, r5
 80a20ac:	f7fd fff7 	bl	80a009e <__cxa_guard_acquire>
 80a20b0:	b168      	cbz	r0, 80a20ce <_Z19__fetch_global_Wirev+0x36>
 80a20b2:	a801      	add	r0, sp, #4
 80a20b4:	f7ff ffda 	bl	80a206c <_Z17acquireWireBufferv>
 80a20b8:	4621      	mov	r1, r4
 80a20ba:	aa01      	add	r2, sp, #4
 80a20bc:	4806      	ldr	r0, [pc, #24]	; (80a20d8 <_Z19__fetch_global_Wirev+0x40>)
 80a20be:	f7ff fe31 	bl	80a1d24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a20c2:	4628      	mov	r0, r5
 80a20c4:	f7fd fff0 	bl	80a00a8 <__cxa_guard_release>
 80a20c8:	4804      	ldr	r0, [pc, #16]	; (80a20dc <_Z19__fetch_global_Wirev+0x44>)
 80a20ca:	f000 f80b 	bl	80a20e4 <atexit>
	return wire;
}
 80a20ce:	4802      	ldr	r0, [pc, #8]	; (80a20d8 <_Z19__fetch_global_Wirev+0x40>)
 80a20d0:	b007      	add	sp, #28
 80a20d2:	bd30      	pop	{r4, r5, pc}
 80a20d4:	20000448 	.word	0x20000448
 80a20d8:	2000044c 	.word	0x2000044c
 80a20dc:	080a2069 	.word	0x080a2069

080a20e0 <_ZnajRKSt9nothrow_t>:
 80a20e0:	f7fd bfd9 	b.w	80a0096 <_Znaj>

080a20e4 <atexit>:
 80a20e4:	2300      	movs	r3, #0
 80a20e6:	4601      	mov	r1, r0
 80a20e8:	461a      	mov	r2, r3
 80a20ea:	4618      	mov	r0, r3
 80a20ec:	f000 b84c 	b.w	80a2188 <__register_exitproc>

080a20f0 <memcpy>:
 80a20f0:	440a      	add	r2, r1
 80a20f2:	4291      	cmp	r1, r2
 80a20f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80a20f8:	d100      	bne.n	80a20fc <memcpy+0xc>
 80a20fa:	4770      	bx	lr
 80a20fc:	b510      	push	{r4, lr}
 80a20fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2102:	4291      	cmp	r1, r2
 80a2104:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2108:	d1f9      	bne.n	80a20fe <memcpy+0xe>
 80a210a:	bd10      	pop	{r4, pc}

080a210c <memset>:
 80a210c:	4603      	mov	r3, r0
 80a210e:	4402      	add	r2, r0
 80a2110:	4293      	cmp	r3, r2
 80a2112:	d100      	bne.n	80a2116 <memset+0xa>
 80a2114:	4770      	bx	lr
 80a2116:	f803 1b01 	strb.w	r1, [r3], #1
 80a211a:	e7f9      	b.n	80a2110 <memset+0x4>

080a211c <srand>:
 80a211c:	b538      	push	{r3, r4, r5, lr}
 80a211e:	4b10      	ldr	r3, [pc, #64]	; (80a2160 <srand+0x44>)
 80a2120:	4604      	mov	r4, r0
 80a2122:	681d      	ldr	r5, [r3, #0]
 80a2124:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2126:	b9b3      	cbnz	r3, 80a2156 <srand+0x3a>
 80a2128:	2018      	movs	r0, #24
 80a212a:	f7ff fb01 	bl	80a1730 <malloc>
 80a212e:	4602      	mov	r2, r0
 80a2130:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2132:	b920      	cbnz	r0, 80a213e <srand+0x22>
 80a2134:	2142      	movs	r1, #66	; 0x42
 80a2136:	4b0b      	ldr	r3, [pc, #44]	; (80a2164 <srand+0x48>)
 80a2138:	480b      	ldr	r0, [pc, #44]	; (80a2168 <srand+0x4c>)
 80a213a:	f7ff fb09 	bl	80a1750 <__assert_func>
 80a213e:	490b      	ldr	r1, [pc, #44]	; (80a216c <srand+0x50>)
 80a2140:	4b0b      	ldr	r3, [pc, #44]	; (80a2170 <srand+0x54>)
 80a2142:	e9c0 1300 	strd	r1, r3, [r0]
 80a2146:	4b0b      	ldr	r3, [pc, #44]	; (80a2174 <srand+0x58>)
 80a2148:	2100      	movs	r1, #0
 80a214a:	6083      	str	r3, [r0, #8]
 80a214c:	230b      	movs	r3, #11
 80a214e:	8183      	strh	r3, [r0, #12]
 80a2150:	2001      	movs	r0, #1
 80a2152:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a2156:	2200      	movs	r2, #0
 80a2158:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a215a:	611c      	str	r4, [r3, #16]
 80a215c:	615a      	str	r2, [r3, #20]
 80a215e:	bd38      	pop	{r3, r4, r5, pc}
 80a2160:	20000010 	.word	0x20000010
 80a2164:	080a23b5 	.word	0x080a23b5
 80a2168:	080a23cc 	.word	0x080a23cc
 80a216c:	abcd330e 	.word	0xabcd330e
 80a2170:	e66d1234 	.word	0xe66d1234
 80a2174:	0005deec 	.word	0x0005deec

080a2178 <strlen>:
 80a2178:	4603      	mov	r3, r0
 80a217a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a217e:	2a00      	cmp	r2, #0
 80a2180:	d1fb      	bne.n	80a217a <strlen+0x2>
 80a2182:	1a18      	subs	r0, r3, r0
 80a2184:	3801      	subs	r0, #1
 80a2186:	4770      	bx	lr

080a2188 <__register_exitproc>:
 80a2188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a218c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a223c <__register_exitproc+0xb4>
 80a2190:	4606      	mov	r6, r0
 80a2192:	f8d8 0000 	ldr.w	r0, [r8]
 80a2196:	461f      	mov	r7, r3
 80a2198:	460d      	mov	r5, r1
 80a219a:	4691      	mov	r9, r2
 80a219c:	f000 f858 	bl	80a2250 <__retarget_lock_acquire_recursive>
 80a21a0:	4b27      	ldr	r3, [pc, #156]	; (80a2240 <__register_exitproc+0xb8>)
 80a21a2:	681c      	ldr	r4, [r3, #0]
 80a21a4:	b934      	cbnz	r4, 80a21b4 <__register_exitproc+0x2c>
 80a21a6:	4c27      	ldr	r4, [pc, #156]	; (80a2244 <__register_exitproc+0xbc>)
 80a21a8:	601c      	str	r4, [r3, #0]
 80a21aa:	4b27      	ldr	r3, [pc, #156]	; (80a2248 <__register_exitproc+0xc0>)
 80a21ac:	b113      	cbz	r3, 80a21b4 <__register_exitproc+0x2c>
 80a21ae:	681b      	ldr	r3, [r3, #0]
 80a21b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a21b4:	6863      	ldr	r3, [r4, #4]
 80a21b6:	2b1f      	cmp	r3, #31
 80a21b8:	dd07      	ble.n	80a21ca <__register_exitproc+0x42>
 80a21ba:	f8d8 0000 	ldr.w	r0, [r8]
 80a21be:	f000 f849 	bl	80a2254 <__retarget_lock_release_recursive>
 80a21c2:	f04f 30ff 	mov.w	r0, #4294967295
 80a21c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a21ca:	b35e      	cbz	r6, 80a2224 <__register_exitproc+0x9c>
 80a21cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a21d0:	b988      	cbnz	r0, 80a21f6 <__register_exitproc+0x6e>
 80a21d2:	4b1e      	ldr	r3, [pc, #120]	; (80a224c <__register_exitproc+0xc4>)
 80a21d4:	b923      	cbnz	r3, 80a21e0 <__register_exitproc+0x58>
 80a21d6:	f8d8 0000 	ldr.w	r0, [r8]
 80a21da:	f000 f83a 	bl	80a2252 <__retarget_lock_release>
 80a21de:	e7f0      	b.n	80a21c2 <__register_exitproc+0x3a>
 80a21e0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a21e4:	f7ff faa4 	bl	80a1730 <malloc>
 80a21e8:	2800      	cmp	r0, #0
 80a21ea:	d0f4      	beq.n	80a21d6 <__register_exitproc+0x4e>
 80a21ec:	2300      	movs	r3, #0
 80a21ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a21f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a21f6:	2201      	movs	r2, #1
 80a21f8:	6863      	ldr	r3, [r4, #4]
 80a21fa:	2e02      	cmp	r6, #2
 80a21fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2200:	fa02 f203 	lsl.w	r2, r2, r3
 80a2204:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a2208:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a220c:	ea43 0302 	orr.w	r3, r3, r2
 80a2210:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2214:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a2218:	bf02      	ittt	eq
 80a221a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a221e:	4313      	orreq	r3, r2
 80a2220:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a2224:	6863      	ldr	r3, [r4, #4]
 80a2226:	f8d8 0000 	ldr.w	r0, [r8]
 80a222a:	1c5a      	adds	r2, r3, #1
 80a222c:	3302      	adds	r3, #2
 80a222e:	6062      	str	r2, [r4, #4]
 80a2230:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2234:	f000 f80e 	bl	80a2254 <__retarget_lock_release_recursive>
 80a2238:	2000      	movs	r0, #0
 80a223a:	e7c4      	b.n	80a21c6 <__register_exitproc+0x3e>
 80a223c:	20000074 	.word	0x20000074
 80a2240:	200004ec 	.word	0x200004ec
 80a2244:	20000460 	.word	0x20000460
 80a2248:	00000000 	.word	0x00000000
 80a224c:	080a1731 	.word	0x080a1731

080a2250 <__retarget_lock_acquire_recursive>:
 80a2250:	4770      	bx	lr

080a2252 <__retarget_lock_release>:
 80a2252:	4770      	bx	lr

080a2254 <__retarget_lock_release_recursive>:
 80a2254:	4770      	bx	lr

080a2256 <link_code_end>:
	...

080a2258 <dynalib_user>:
 80a2258:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a2268:	0000 0000                                   ....

080a226c <CSWTCH.215>:
 80a226c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a227c:	0050 0000 7061 0070 5925 252d 2d6d 6425     P...app.%Y-%m-%d
 80a228c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a229c:	6d69 0065                                   ime.

080a22a0 <_ZTV9IPAddress>:
	...
 80a22a8:	19db 080a 19d9 080a 1a0d 080a               ............

080a22b4 <_ZTV9USBSerial>:
	...
 80a22bc:	1aa7 080a 1b0d 080a 1ae5 080a 17b5 080a     ................
 80a22cc:	1ad7 080a 1aa9 080a 1ab9 080a 1b07 080a     ................
 80a22dc:	1ac9 080a 1aa1 080a                         ........

080a22e4 <_ZTV11USARTSerial>:
	...
 80a22ec:	1c2d 080a 1c95 080a 1c71 080a 17b5 080a     -.......q.......
 80a22fc:	1c41 080a 1c5d 080a 1c4f 080a 1c6b 080a     A...]...O...k...
 80a230c:	1c2f 080a 1c33 080a                         /...3...

080a2314 <_ZTV7TwoWire>:
	...
 80a231c:	1ccd 080a 1d17 080a 1cef 080a 1ccf 080a     ................
 80a232c:	1cf7 080a 1cff 080a 1d07 080a 1d0f 080a     ................

080a233c <_ZTVN5spark9WiFiClassE>:
	...
 80a2344:	1deb 080a 1de1 080a 1dd7 080a 1d49 080a     ............I...
 80a2354:	1dcb 080a 1dbf 080a 1e49 080a 1e51 080a     ........I...Q...
 80a2364:	1db3 080a 1dab 080a 1da1 080a 1d97 080a     ................
 80a2374:	1d53 080a                                   S...

080a2378 <_ZTVN5spark12NetworkClassE>:
	...
 80a2380:	1e09 080a 1e13 080a 1e1d 080a 1e27 080a     ............'...
 80a2390:	1e31 080a 1e3d 080a 1e49 080a 1e51 080a     1...=...I...Q...
 80a23a0:	1e59 080a 1e65 080a 1e6d 080a 1e77 080a     Y...e...m...w...
 80a23b0:	1e81 080a                                   ....

080a23b4 <_ZSt7nothrow>:
 80a23b4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a23c4:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a23d4:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a23e4:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a23f4:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a2404:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a2414:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a2424:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a2434:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a2444:	646e 632e                                    nd.c.

080a2449 <link_const_variable_data_end>:
 80a2449:	00          	.byte	0x00
	...

080a244c <link_constructors_location>:
 80a244c:	080a0145 	.word	0x080a0145
 80a2450:	080a13f5 	.word	0x080a13f5
 80a2454:	080a1791 	.word	0x080a1791
 80a2458:	080a1841 	.word	0x080a1841
 80a245c:	080a1851 	.word	0x080a1851
 80a2460:	080a186d 	.word	0x080a186d
 80a2464:	080a1df5 	.word	0x080a1df5
 80a2468:	080a1ed1 	.word	0x080a1ed1
 80a246c:	080a204d 	.word	0x080a204d
