
c:/Users/venne/OneDrive/Documents/GitHub/ee1301/Iot2/iot2_1/target/3.3.0/photon/iot2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d00  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1d20  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a1d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000046c  20000070  20000070  00030070  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a1d94  080a1d94  00021d94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1dbc  080a1dbc  00021dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00097c65  00000000  00000000  00021dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000db98  00000000  00000000  000b9a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00011c33  00000000  00000000  000c75bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ae8  00000000  00000000  000d91f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003aa8  00000000  00000000  000dacd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024821  00000000  00000000  000de780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000245a3  00000000  00000000  00102fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000afda6  00000000  00000000  00127544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000043d0  00000000  00000000  001d72ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f001 fcaf 	bl	80a1994 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f001 fcb7 	bl	80a19b0 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a1d24 	.word	0x080a1d24
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000070 	.word	0x20000070
 80a0058:	200004d9 	.word	0x200004d9
 80a005c:	200004d9 	.word	0x200004d9

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f000 fc23 	bl	80a08ac <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a1cf8 	.word	0x080a1cf8
 80a0084:	080a1d14 	.word	0x080a1d14

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f82b 	bl	80a00e8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f000 bbc1 	b.w	80a081c <_post_loop>

080a009a <_Znaj>:
 80a009a:	f000 ba03 	b.w	80a04a4 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f000 ba09 	b.w	80a04b4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
 */

int tempPIN = A0;
double tempC = 0.0;

void setup() {
 80a00b4:	b510      	push	{r4, lr}
  pinMode(tempPIN,INPUT);
 80a00b6:	4b09      	ldr	r3, [pc, #36]	; (80a00dc <setup+0x28>)
 80a00b8:	2100      	movs	r1, #0
 80a00ba:	8818      	ldrh	r0, [r3, #0]
 80a00bc:	f000 fefc 	bl	80a0eb8 <pinMode>
  Serial.begin(9600);
 80a00c0:	f000 fcf6 	bl	80a0ab0 <_Z16_fetch_usbserialv>
 80a00c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00c8:	f000 fcd8 	bl	80a0a7c <_ZN9USBSerial5beginEl>
  Particle.variable("temp", tempC);

}
 80a00cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a00d0:	2300      	movs	r3, #0
 80a00d2:	2209      	movs	r2, #9
 80a00d4:	4902      	ldr	r1, [pc, #8]	; (80a00e0 <setup+0x2c>)
 80a00d6:	4803      	ldr	r0, [pc, #12]	; (80a00e4 <setup+0x30>)
 80a00d8:	f000 b9d4 	b.w	80a0484 <spark_variable>
 80a00dc:	20000000 	.word	0x20000000
 80a00e0:	20000070 	.word	0x20000070
 80a00e4:	080a1b10 	.word	0x080a1b10

080a00e8 <loop>:

void loop() {
 80a00e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int ADCreading = analogRead(tempPIN);
 80a00ea:	4b1f      	ldr	r3, [pc, #124]	; (80a0168 <loop+0x80>)
  tempC = (ADCreading - 620) * 0.0806;
 80a00ec:	4e1f      	ldr	r6, [pc, #124]	; (80a016c <loop+0x84>)
  int ADCreading = analogRead(tempPIN);
 80a00ee:	8818      	ldrh	r0, [r3, #0]
 80a00f0:	f000 fef3 	bl	80a0eda <analogRead>
 80a00f4:	4604      	mov	r4, r0
  tempC = (ADCreading - 620) * 0.0806;
 80a00f6:	f5a0 701b 	sub.w	r0, r0, #620	; 0x26c
 80a00fa:	f001 f8e3 	bl	80a12c4 <__aeabi_i2d>
 80a00fe:	a318      	add	r3, pc, #96	; (adr r3, 80a0160 <loop+0x78>)
 80a0100:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0104:	f001 f948 	bl	80a1398 <__aeabi_dmul>
 80a0108:	e9c6 0100 	strd	r0, r1, [r6]
  Serial.print(ADCreading);
 80a010c:	f000 fcd0 	bl	80a0ab0 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80a0110:	2c00      	cmp	r4, #0
 80a0112:	4605      	mov	r5, r0
 80a0114:	da20      	bge.n	80a0158 <loop+0x70>
            t = print('-');
 80a0116:	212d      	movs	r1, #45	; 0x2d
 80a0118:	f000 fa30 	bl	80a057c <_ZN5Print5printEc>
            val = -n;
 80a011c:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a011e:	220a      	movs	r2, #10
 80a0120:	4628      	mov	r0, r5
 80a0122:	f000 fa44 	bl	80a05ae <_ZN5Print11printNumberEmh>
  Serial.print(", ");
 80a0126:	f000 fcc3 	bl	80a0ab0 <_Z16_fetch_usbserialv>
 80a012a:	4911      	ldr	r1, [pc, #68]	; (80a0170 <loop+0x88>)
 80a012c:	f000 fa22 	bl	80a0574 <_ZN5Print5printEPKc>
   Serial.print(tempC);
 80a0130:	f000 fcbe 	bl	80a0ab0 <_Z16_fetch_usbserialv>
 80a0134:	2302      	movs	r3, #2
 80a0136:	9300      	str	r3, [sp, #0]
 80a0138:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a013c:	f000 fb16 	bl	80a076c <_ZN5Print5printEdi>
  Serial.println(" degC");
 80a0140:	f000 fcb6 	bl	80a0ab0 <_Z16_fetch_usbserialv>
 80a0144:	490b      	ldr	r1, [pc, #44]	; (80a0174 <loop+0x8c>)
 80a0146:	f000 fa28 	bl	80a059a <_ZN5Print7printlnEPKc>
  //Serial.printf("%4d, %6.3f degC\n",ADCreading,tempC);
  delay(500);
 80a014a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a014e:	b002      	add	sp, #8
 80a0150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(500);
 80a0154:	f000 bb22 	b.w	80a079c <delay>
            val = n;
 80a0158:	4621      	mov	r1, r4
 80a015a:	e7e0      	b.n	80a011e <loop+0x36>
 80a015c:	f3af 8000 	nop.w
 80a0160:	9c0ebee0 	.word	0x9c0ebee0
 80a0164:	3fb4a233 	.word	0x3fb4a233
 80a0168:	20000000 	.word	0x20000000
 80a016c:	20000070 	.word	0x20000070
 80a0170:	080a1b15 	.word	0x080a1b15
 80a0174:	080a1b18 	.word	0x080a1b18

080a0178 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0178:	b508      	push	{r3, lr}
 80a017a:	4b02      	ldr	r3, [pc, #8]	; (80a0184 <HAL_Validate_Pin_Function+0xc>)
 80a017c:	681b      	ldr	r3, [r3, #0]
 80a017e:	685b      	ldr	r3, [r3, #4]
 80a0180:	9301      	str	r3, [sp, #4]
 80a0182:	bd08      	pop	{r3, pc}
 80a0184:	080601b0 	.word	0x080601b0

080a0188 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0188:	b508      	push	{r3, lr}
 80a018a:	4b02      	ldr	r3, [pc, #8]	; (80a0194 <HAL_Pin_Mode+0xc>)
 80a018c:	681b      	ldr	r3, [r3, #0]
 80a018e:	689b      	ldr	r3, [r3, #8]
 80a0190:	9301      	str	r3, [sp, #4]
 80a0192:	bd08      	pop	{r3, pc}
 80a0194:	080601b0 	.word	0x080601b0

080a0198 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a0198:	b508      	push	{r3, lr}
 80a019a:	4b02      	ldr	r3, [pc, #8]	; (80a01a4 <hal_adc_read+0xc>)
 80a019c:	681b      	ldr	r3, [r3, #0]
 80a019e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a01a0:	9301      	str	r3, [sp, #4]
 80a01a2:	bd08      	pop	{r3, pc}
 80a01a4:	080601b0 	.word	0x080601b0

080a01a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01a8:	b508      	push	{r3, lr}
 80a01aa:	4b02      	ldr	r3, [pc, #8]	; (80a01b4 <HAL_RNG_GetRandomNumber+0xc>)
 80a01ac:	681b      	ldr	r3, [r3, #0]
 80a01ae:	685b      	ldr	r3, [r3, #4]
 80a01b0:	9301      	str	r3, [sp, #4]
 80a01b2:	bd08      	pop	{r3, pc}
 80a01b4:	0806019c 	.word	0x0806019c

080a01b8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a01b8:	b508      	push	{r3, lr}
 80a01ba:	4b02      	ldr	r3, [pc, #8]	; (80a01c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a01bc:	681b      	ldr	r3, [r3, #0]
 80a01be:	695b      	ldr	r3, [r3, #20]
 80a01c0:	9301      	str	r3, [sp, #4]
 80a01c2:	bd08      	pop	{r3, pc}
 80a01c4:	0806019c 	.word	0x0806019c

080a01c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a01c8:	b508      	push	{r3, lr}
 80a01ca:	4b02      	ldr	r3, [pc, #8]	; (80a01d4 <os_mutex_recursive_create+0xc>)
 80a01cc:	681b      	ldr	r3, [r3, #0]
 80a01ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a01d0:	9301      	str	r3, [sp, #4]
 80a01d2:	bd08      	pop	{r3, pc}
 80a01d4:	080601d0 	.word	0x080601d0

080a01d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a01d8:	b508      	push	{r3, lr}
 80a01da:	4b02      	ldr	r3, [pc, #8]	; (80a01e4 <os_mutex_recursive_destroy+0xc>)
 80a01dc:	681b      	ldr	r3, [r3, #0]
 80a01de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a01e0:	9301      	str	r3, [sp, #4]
 80a01e2:	bd08      	pop	{r3, pc}
 80a01e4:	080601d0 	.word	0x080601d0

080a01e8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a01e8:	b508      	push	{r3, lr}
 80a01ea:	4b02      	ldr	r3, [pc, #8]	; (80a01f4 <hal_usart_write+0xc>)
 80a01ec:	681b      	ldr	r3, [r3, #0]
 80a01ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01f0:	9301      	str	r3, [sp, #4]
 80a01f2:	bd08      	pop	{r3, pc}
 80a01f4:	080601c4 	.word	0x080601c4

080a01f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a01f8:	b508      	push	{r3, lr}
 80a01fa:	4b02      	ldr	r3, [pc, #8]	; (80a0204 <hal_usart_available+0xc>)
 80a01fc:	681b      	ldr	r3, [r3, #0]
 80a01fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0200:	9301      	str	r3, [sp, #4]
 80a0202:	bd08      	pop	{r3, pc}
 80a0204:	080601c4 	.word	0x080601c4

080a0208 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0208:	b508      	push	{r3, lr}
 80a020a:	4b02      	ldr	r3, [pc, #8]	; (80a0214 <hal_usart_read+0xc>)
 80a020c:	681b      	ldr	r3, [r3, #0]
 80a020e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0210:	9301      	str	r3, [sp, #4]
 80a0212:	bd08      	pop	{r3, pc}
 80a0214:	080601c4 	.word	0x080601c4

080a0218 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0218:	b508      	push	{r3, lr}
 80a021a:	4b02      	ldr	r3, [pc, #8]	; (80a0224 <hal_usart_peek+0xc>)
 80a021c:	681b      	ldr	r3, [r3, #0]
 80a021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0220:	9301      	str	r3, [sp, #4]
 80a0222:	bd08      	pop	{r3, pc}
 80a0224:	080601c4 	.word	0x080601c4

080a0228 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0228:	b508      	push	{r3, lr}
 80a022a:	4b02      	ldr	r3, [pc, #8]	; (80a0234 <hal_usart_flush+0xc>)
 80a022c:	681b      	ldr	r3, [r3, #0]
 80a022e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0230:	9301      	str	r3, [sp, #4]
 80a0232:	bd08      	pop	{r3, pc}
 80a0234:	080601c4 	.word	0x080601c4

080a0238 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a0238:	b508      	push	{r3, lr}
 80a023a:	4b02      	ldr	r3, [pc, #8]	; (80a0244 <hal_usart_is_enabled+0xc>)
 80a023c:	681b      	ldr	r3, [r3, #0]
 80a023e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0240:	9301      	str	r3, [sp, #4]
 80a0242:	bd08      	pop	{r3, pc}
 80a0244:	080601c4 	.word	0x080601c4

080a0248 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <hal_usart_available_data_for_write+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601c4 	.word	0x080601c4

080a0258 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <hal_usart_init_ex+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601c4 	.word	0x080601c4

080a0268 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <hal_i2c_write+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601ac 	.word	0x080601ac

080a0278 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b02      	ldr	r3, [pc, #8]	; (80a0284 <hal_i2c_available+0xc>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0280:	9301      	str	r3, [sp, #4]
 80a0282:	bd08      	pop	{r3, pc}
 80a0284:	080601ac 	.word	0x080601ac

080a0288 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b02      	ldr	r3, [pc, #8]	; (80a0294 <hal_i2c_read+0xc>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0290:	9301      	str	r3, [sp, #4]
 80a0292:	bd08      	pop	{r3, pc}
 80a0294:	080601ac 	.word	0x080601ac

080a0298 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0298:	b508      	push	{r3, lr}
 80a029a:	4b02      	ldr	r3, [pc, #8]	; (80a02a4 <hal_i2c_peek+0xc>)
 80a029c:	681b      	ldr	r3, [r3, #0]
 80a029e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02a0:	9301      	str	r3, [sp, #4]
 80a02a2:	bd08      	pop	{r3, pc}
 80a02a4:	080601ac 	.word	0x080601ac

080a02a8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a02a8:	b508      	push	{r3, lr}
 80a02aa:	4b02      	ldr	r3, [pc, #8]	; (80a02b4 <hal_i2c_flush+0xc>)
 80a02ac:	681b      	ldr	r3, [r3, #0]
 80a02ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02b0:	9301      	str	r3, [sp, #4]
 80a02b2:	bd08      	pop	{r3, pc}
 80a02b4:	080601ac 	.word	0x080601ac

080a02b8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a02b8:	b508      	push	{r3, lr}
 80a02ba:	4b02      	ldr	r3, [pc, #8]	; (80a02c4 <hal_i2c_is_enabled+0xc>)
 80a02bc:	681b      	ldr	r3, [r3, #0]
 80a02be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a02c0:	9301      	str	r3, [sp, #4]
 80a02c2:	bd08      	pop	{r3, pc}
 80a02c4:	080601ac 	.word	0x080601ac

080a02c8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a02c8:	b508      	push	{r3, lr}
 80a02ca:	4b03      	ldr	r3, [pc, #12]	; (80a02d8 <hal_i2c_init+0x10>)
 80a02cc:	681b      	ldr	r3, [r3, #0]
 80a02ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a02d2:	9301      	str	r3, [sp, #4]
 80a02d4:	bd08      	pop	{r3, pc}
 80a02d6:	0000      	.short	0x0000
 80a02d8:	080601ac 	.word	0x080601ac

080a02dc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <hal_spi_init+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	69db      	ldr	r3, [r3, #28]
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	080601b4 	.word	0x080601b4

080a02ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b02      	ldr	r3, [pc, #8]	; (80a02f8 <hal_spi_is_enabled+0xc>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	6a1b      	ldr	r3, [r3, #32]
 80a02f4:	9301      	str	r3, [sp, #4]
 80a02f6:	bd08      	pop	{r3, pc}
 80a02f8:	080601b4 	.word	0x080601b4

080a02fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b02      	ldr	r3, [pc, #8]	; (80a0308 <HAL_USB_USART_Init+0xc>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	681b      	ldr	r3, [r3, #0]
 80a0304:	9301      	str	r3, [sp, #4]
 80a0306:	bd08      	pop	{r3, pc}
 80a0308:	080601d8 	.word	0x080601d8

080a030c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a030c:	b508      	push	{r3, lr}
 80a030e:	4b02      	ldr	r3, [pc, #8]	; (80a0318 <HAL_USB_USART_Begin+0xc>)
 80a0310:	681b      	ldr	r3, [r3, #0]
 80a0312:	685b      	ldr	r3, [r3, #4]
 80a0314:	9301      	str	r3, [sp, #4]
 80a0316:	bd08      	pop	{r3, pc}
 80a0318:	080601d8 	.word	0x080601d8

080a031c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a031c:	b508      	push	{r3, lr}
 80a031e:	4b02      	ldr	r3, [pc, #8]	; (80a0328 <HAL_USB_USART_Available_Data+0xc>)
 80a0320:	681b      	ldr	r3, [r3, #0]
 80a0322:	691b      	ldr	r3, [r3, #16]
 80a0324:	9301      	str	r3, [sp, #4]
 80a0326:	bd08      	pop	{r3, pc}
 80a0328:	080601d8 	.word	0x080601d8

080a032c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a032c:	b508      	push	{r3, lr}
 80a032e:	4b02      	ldr	r3, [pc, #8]	; (80a0338 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0330:	681b      	ldr	r3, [r3, #0]
 80a0332:	695b      	ldr	r3, [r3, #20]
 80a0334:	9301      	str	r3, [sp, #4]
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080601d8 	.word	0x080601d8

080a033c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b02      	ldr	r3, [pc, #8]	; (80a0348 <HAL_USB_USART_Receive_Data+0xc>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	699b      	ldr	r3, [r3, #24]
 80a0344:	9301      	str	r3, [sp, #4]
 80a0346:	bd08      	pop	{r3, pc}
 80a0348:	080601d8 	.word	0x080601d8

080a034c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a034c:	b508      	push	{r3, lr}
 80a034e:	4b02      	ldr	r3, [pc, #8]	; (80a0358 <HAL_USB_USART_Send_Data+0xc>)
 80a0350:	681b      	ldr	r3, [r3, #0]
 80a0352:	69db      	ldr	r3, [r3, #28]
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	bd08      	pop	{r3, pc}
 80a0358:	080601d8 	.word	0x080601d8

080a035c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <HAL_USB_USART_Flush_Data+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	6a1b      	ldr	r3, [r3, #32]
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601d8 	.word	0x080601d8

080a036c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <inet_gethostbyname+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601c0 	.word	0x080601c0

080a037c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <set_system_mode+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	685b      	ldr	r3, [r3, #4]
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	080601a4 	.word	0x080601a4

080a038c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <system_delay_ms+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	695b      	ldr	r3, [r3, #20]
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	080601a4 	.word	0x080601a4

080a039c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b03      	ldr	r3, [pc, #12]	; (80a03ac <system_ctrl_set_app_request_handler+0x10>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a03a6:	9301      	str	r3, [sp, #4]
 80a03a8:	bd08      	pop	{r3, pc}
 80a03aa:	0000      	.short	0x0000
 80a03ac:	080601a4 	.word	0x080601a4

080a03b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b03      	ldr	r3, [pc, #12]	; (80a03c0 <system_ctrl_set_result+0x10>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a03ba:	9301      	str	r3, [sp, #4]
 80a03bc:	bd08      	pop	{r3, pc}
 80a03be:	0000      	.short	0x0000
 80a03c0:	080601a4 	.word	0x080601a4

080a03c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <network_connect+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	685b      	ldr	r3, [r3, #4]
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601c8 	.word	0x080601c8

080a03d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <network_connecting+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	689b      	ldr	r3, [r3, #8]
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601c8 	.word	0x080601c8

080a03e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <network_disconnect+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	68db      	ldr	r3, [r3, #12]
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c8 	.word	0x080601c8

080a03f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <network_ready+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	691b      	ldr	r3, [r3, #16]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c8 	.word	0x080601c8

080a0404 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <network_on+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	695b      	ldr	r3, [r3, #20]
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601c8 	.word	0x080601c8

080a0414 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <network_off+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	699b      	ldr	r3, [r3, #24]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601c8 	.word	0x080601c8

080a0424 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <network_listen+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	69db      	ldr	r3, [r3, #28]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601c8 	.word	0x080601c8

080a0434 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <network_listening+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6a1b      	ldr	r3, [r3, #32]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601c8 	.word	0x080601c8

080a0444 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <network_set_listen_timeout+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601c8 	.word	0x080601c8

080a0454 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <network_get_listen_timeout+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c8 	.word	0x080601c8

080a0464 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <network_is_on+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601c8 	.word	0x080601c8

080a0474 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <network_is_off+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601c8 	.word	0x080601c8

080a0484 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <spark_variable+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	681b      	ldr	r3, [r3, #0]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601cc 	.word	0x080601cc

080a0494 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601cc 	.word	0x080601cc

080a04a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <malloc+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	681b      	ldr	r3, [r3, #0]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601a0 	.word	0x080601a0

080a04b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <free+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	685b      	ldr	r3, [r3, #4]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601a0 	.word	0x080601a0

080a04c4 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <__assert_func+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601a0 	.word	0x080601a0

080a04d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <newlib_impure_ptr_callback+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601a0 	.word	0x080601a0

080a04e4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a04e4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a04e6:	2600      	movs	r6, #0
 80a04e8:	4604      	mov	r4, r0
 80a04ea:	460d      	mov	r5, r1
 80a04ec:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a04f0:	f7ff fe6a 	bl	80a01c8 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a04f4:	4628      	mov	r0, r5
    _spi = spi;
 80a04f6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a04f8:	f7ff fef0 	bl	80a02dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a04fc:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a04fe:	6066      	str	r6, [r4, #4]
}
 80a0500:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0504 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0504:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0506:	2000      	movs	r0, #0
 80a0508:	4b04      	ldr	r3, [pc, #16]	; (80a051c <_GLOBAL__sub_I_System+0x18>)
 80a050a:	601a      	str	r2, [r3, #0]
 80a050c:	4b04      	ldr	r3, [pc, #16]	; (80a0520 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a050e:	4a05      	ldr	r2, [pc, #20]	; (80a0524 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0510:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a0514:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0516:	f7ff bf31 	b.w	80a037c <set_system_mode>
 80a051a:	bf00      	nop
 80a051c:	20000084 	.word	0x20000084
 80a0520:	20000078 	.word	0x20000078
 80a0524:	ffff0000 	.word	0xffff0000

080a0528 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a052a:	4606      	mov	r6, r0
 80a052c:	460d      	mov	r5, r1
  size_t n = 0;
 80a052e:	2400      	movs	r4, #0
 80a0530:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0532:	42bd      	cmp	r5, r7
 80a0534:	d00c      	beq.n	80a0550 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0536:	6833      	ldr	r3, [r6, #0]
 80a0538:	4630      	mov	r0, r6
 80a053a:	689b      	ldr	r3, [r3, #8]
 80a053c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0540:	4798      	blx	r3
     if (chunk>=0)
 80a0542:	1e03      	subs	r3, r0, #0
 80a0544:	db01      	blt.n	80a054a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0546:	441c      	add	r4, r3
  while (size--) {
 80a0548:	e7f3      	b.n	80a0532 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a054a:	2c00      	cmp	r4, #0
 80a054c:	bf08      	it	eq
 80a054e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0550:	4620      	mov	r0, r4
 80a0552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0554 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0554:	b570      	push	{r4, r5, r6, lr}
 80a0556:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0558:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a055a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a055c:	b149      	cbz	r1, 80a0572 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a055e:	f001 fa5d 	bl	80a1a1c <strlen>
 80a0562:	682b      	ldr	r3, [r5, #0]
 80a0564:	4602      	mov	r2, r0
 80a0566:	4621      	mov	r1, r4
 80a0568:	4628      	mov	r0, r5
    }
 80a056a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a056e:	68db      	ldr	r3, [r3, #12]
 80a0570:	4718      	bx	r3
    }
 80a0572:	bd70      	pop	{r4, r5, r6, pc}

080a0574 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a0574:	b508      	push	{r3, lr}
  return write(str);
 80a0576:	f7ff ffed 	bl	80a0554 <_ZN5Print5writeEPKc>
}
 80a057a:	bd08      	pop	{r3, pc}

080a057c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a057c:	6803      	ldr	r3, [r0, #0]
 80a057e:	689b      	ldr	r3, [r3, #8]
 80a0580:	4718      	bx	r3

080a0582 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0582:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0584:	210d      	movs	r1, #13
{
 80a0586:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0588:	f7ff fff8 	bl	80a057c <_ZN5Print5printEc>
  n += print('\n');
 80a058c:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a058e:	4604      	mov	r4, r0
  n += print('\n');
 80a0590:	4628      	mov	r0, r5
 80a0592:	f7ff fff3 	bl	80a057c <_ZN5Print5printEc>
  return n;
}
 80a0596:	4420      	add	r0, r4
 80a0598:	bd38      	pop	{r3, r4, r5, pc}

080a059a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a059a:	b538      	push	{r3, r4, r5, lr}
 80a059c:	4605      	mov	r5, r0
  return write(str);
 80a059e:	f7ff ffd9 	bl	80a0554 <_ZN5Print5writeEPKc>
 80a05a2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a05a4:	4628      	mov	r0, r5
 80a05a6:	f7ff ffec 	bl	80a0582 <_ZN5Print7printlnEv>
  return n;
}
 80a05aa:	4420      	add	r0, r4
 80a05ac:	bd38      	pop	{r3, r4, r5, pc}

080a05ae <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a05ae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a05b0:	2a01      	cmp	r2, #1
 80a05b2:	bf98      	it	ls
 80a05b4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a05b6:	b530      	push	{r4, r5, lr}
 80a05b8:	b08b      	sub	sp, #44	; 0x2c
 80a05ba:	460c      	mov	r4, r1
  *str = '\0';
 80a05bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a05c0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a05c2:	4625      	mov	r5, r4
 80a05c4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a05c8:	fb04 5312 	mls	r3, r4, r2, r5
 80a05cc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a05ce:	2b09      	cmp	r3, #9
 80a05d0:	bf94      	ite	ls
 80a05d2:	3330      	addls	r3, #48	; 0x30
 80a05d4:	3337      	addhi	r3, #55	; 0x37
 80a05d6:	b2db      	uxtb	r3, r3
  } while(n);
 80a05d8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a05da:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a05de:	d9f0      	bls.n	80a05c2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a05e0:	f7ff ffb8 	bl	80a0554 <_ZN5Print5writeEPKc>
}
 80a05e4:	b00b      	add	sp, #44	; 0x2c
 80a05e6:	bd30      	pop	{r4, r5, pc}

080a05e8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a05e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a05ec:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a05ee:	4619      	mov	r1, r3
 80a05f0:	4610      	mov	r0, r2
{
 80a05f2:	4692      	mov	sl, r2
 80a05f4:	461f      	mov	r7, r3
 80a05f6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a05fa:	f001 f967 	bl	80a18cc <__aeabi_dcmpun>
 80a05fe:	b140      	cbz	r0, 80a0612 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a0600:	4951      	ldr	r1, [pc, #324]	; (80a0748 <_ZN5Print10printFloatEdh+0x160>)
 80a0602:	4628      	mov	r0, r5
 80a0604:	f7ff ffa6 	bl	80a0554 <_ZN5Print5writeEPKc>
 80a0608:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a060a:	4620      	mov	r0, r4
 80a060c:	b003      	add	sp, #12
 80a060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a0612:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a0616:	f04f 32ff 	mov.w	r2, #4294967295
 80a061a:	4650      	mov	r0, sl
 80a061c:	4621      	mov	r1, r4
 80a061e:	4b4b      	ldr	r3, [pc, #300]	; (80a074c <_ZN5Print10printFloatEdh+0x164>)
 80a0620:	f001 f954 	bl	80a18cc <__aeabi_dcmpun>
 80a0624:	b948      	cbnz	r0, 80a063a <_ZN5Print10printFloatEdh+0x52>
 80a0626:	f04f 32ff 	mov.w	r2, #4294967295
 80a062a:	4650      	mov	r0, sl
 80a062c:	4621      	mov	r1, r4
 80a062e:	4b47      	ldr	r3, [pc, #284]	; (80a074c <_ZN5Print10printFloatEdh+0x164>)
 80a0630:	f001 f92e 	bl	80a1890 <__aeabi_dcmple>
 80a0634:	b908      	cbnz	r0, 80a063a <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a0636:	4946      	ldr	r1, [pc, #280]	; (80a0750 <_ZN5Print10printFloatEdh+0x168>)
 80a0638:	e7e3      	b.n	80a0602 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a063a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a063e:	4650      	mov	r0, sl
 80a0640:	4639      	mov	r1, r7
 80a0642:	4b44      	ldr	r3, [pc, #272]	; (80a0754 <_ZN5Print10printFloatEdh+0x16c>)
 80a0644:	f001 f938 	bl	80a18b8 <__aeabi_dcmpgt>
 80a0648:	b108      	cbz	r0, 80a064e <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a064a:	4943      	ldr	r1, [pc, #268]	; (80a0758 <_ZN5Print10printFloatEdh+0x170>)
 80a064c:	e7d9      	b.n	80a0602 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a064e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0652:	4650      	mov	r0, sl
 80a0654:	4639      	mov	r1, r7
 80a0656:	4b41      	ldr	r3, [pc, #260]	; (80a075c <_ZN5Print10printFloatEdh+0x174>)
 80a0658:	f001 f910 	bl	80a187c <__aeabi_dcmplt>
 80a065c:	2800      	cmp	r0, #0
 80a065e:	d1f4      	bne.n	80a064a <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a0660:	2200      	movs	r2, #0
 80a0662:	2300      	movs	r3, #0
 80a0664:	4650      	mov	r0, sl
 80a0666:	4639      	mov	r1, r7
 80a0668:	f001 f908 	bl	80a187c <__aeabi_dcmplt>
 80a066c:	4604      	mov	r4, r0
 80a066e:	b130      	cbz	r0, 80a067e <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a0670:	212d      	movs	r1, #45	; 0x2d
 80a0672:	4628      	mov	r0, r5
 80a0674:	f7ff ff82 	bl	80a057c <_ZN5Print5printEc>
 80a0678:	4604      	mov	r4, r0
     number = -number;
 80a067a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a067e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a0682:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a0684:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a0688:	4935      	ldr	r1, [pc, #212]	; (80a0760 <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a068a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a0764 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a068e:	fa5f f38b 	uxtb.w	r3, fp
 80a0692:	429e      	cmp	r6, r3
 80a0694:	d906      	bls.n	80a06a4 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a0696:	4642      	mov	r2, r8
 80a0698:	464b      	mov	r3, r9
 80a069a:	f000 ffa7 	bl	80a15ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a069e:	f10b 0b01 	add.w	fp, fp, #1
 80a06a2:	e7f4      	b.n	80a068e <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a06a4:	463b      	mov	r3, r7
 80a06a6:	4652      	mov	r2, sl
 80a06a8:	f000 fcc0 	bl	80a102c <__adddf3>
 80a06ac:	4689      	mov	r9, r1
 80a06ae:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a06b0:	f001 f94a 	bl	80a1948 <__aeabi_d2uiz>
 80a06b4:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a06b6:	f000 fdf5 	bl	80a12a4 <__aeabi_ui2d>
 80a06ba:	4602      	mov	r2, r0
 80a06bc:	460b      	mov	r3, r1
 80a06be:	4640      	mov	r0, r8
 80a06c0:	4649      	mov	r1, r9
 80a06c2:	f000 fcb1 	bl	80a1028 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a06c6:	220a      	movs	r2, #10
 80a06c8:	4680      	mov	r8, r0
 80a06ca:	4689      	mov	r9, r1
 80a06cc:	4628      	mov	r0, r5
 80a06ce:	4639      	mov	r1, r7
 80a06d0:	f7ff ff6d 	bl	80a05ae <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a06d4:	4404      	add	r4, r0
  if (digits > 0) {
 80a06d6:	2e00      	cmp	r6, #0
 80a06d8:	d097      	beq.n	80a060a <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a06da:	4628      	mov	r0, r5
 80a06dc:	4922      	ldr	r1, [pc, #136]	; (80a0768 <_ZN5Print10printFloatEdh+0x180>)
 80a06de:	f7ff ff39 	bl	80a0554 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a06e2:	f04f 0a00 	mov.w	sl, #0
 80a06e6:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a0764 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a06ea:	4404      	add	r4, r0
  while (digits-- > 0)
 80a06ec:	2e00      	cmp	r6, #0
 80a06ee:	d08c      	beq.n	80a060a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a06f0:	4652      	mov	r2, sl
 80a06f2:	465b      	mov	r3, fp
 80a06f4:	4640      	mov	r0, r8
 80a06f6:	4649      	mov	r1, r9
 80a06f8:	f000 fe4e 	bl	80a1398 <__aeabi_dmul>
 80a06fc:	4680      	mov	r8, r0
 80a06fe:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a0700:	f001 f8fa 	bl	80a18f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a0704:	1e07      	subs	r7, r0, #0
 80a0706:	da1b      	bge.n	80a0740 <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a0708:	212d      	movs	r1, #45	; 0x2d
 80a070a:	4628      	mov	r0, r5
 80a070c:	f7ff ff36 	bl	80a057c <_ZN5Print5printEc>
 80a0710:	4603      	mov	r3, r0
            val = -n;
 80a0712:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a0714:	220a      	movs	r2, #10
 80a0716:	4628      	mov	r0, r5
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	f7ff ff48 	bl	80a05ae <_ZN5Print11printNumberEmh>
 80a071e:	9b01      	ldr	r3, [sp, #4]
 80a0720:	3e01      	subs	r6, #1
 80a0722:	4403      	add	r3, r0
    remainder -= toPrint;
 80a0724:	4638      	mov	r0, r7
    n += print(toPrint);
 80a0726:	441c      	add	r4, r3
    remainder -= toPrint;
 80a0728:	f000 fdcc 	bl	80a12c4 <__aeabi_i2d>
 80a072c:	4602      	mov	r2, r0
 80a072e:	460b      	mov	r3, r1
 80a0730:	4640      	mov	r0, r8
 80a0732:	4649      	mov	r1, r9
 80a0734:	f000 fc78 	bl	80a1028 <__aeabi_dsub>
 80a0738:	b2f6      	uxtb	r6, r6
 80a073a:	4680      	mov	r8, r0
 80a073c:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a073e:	e7d5      	b.n	80a06ec <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a0740:	4639      	mov	r1, r7
        size_t t = 0;
 80a0742:	2300      	movs	r3, #0
 80a0744:	e7e6      	b.n	80a0714 <_ZN5Print10printFloatEdh+0x12c>
 80a0746:	bf00      	nop
 80a0748:	080a1b1e 	.word	0x080a1b1e
 80a074c:	7fefffff 	.word	0x7fefffff
 80a0750:	080a1b22 	.word	0x080a1b22
 80a0754:	41efffff 	.word	0x41efffff
 80a0758:	080a1b26 	.word	0x080a1b26
 80a075c:	c1efffff 	.word	0xc1efffff
 80a0760:	3fe00000 	.word	0x3fe00000
 80a0764:	40240000 	.word	0x40240000
 80a0768:	080a1b2a 	.word	0x080a1b2a

080a076c <_ZN5Print5printEdi>:
  return printFloat(n, digits);
 80a076c:	f89d 1000 	ldrb.w	r1, [sp]
 80a0770:	9100      	str	r1, [sp, #0]
 80a0772:	f7ff bf39 	b.w	80a05e8 <_ZN5Print10printFloatEdh>
	...

080a0778 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0778:	4b01      	ldr	r3, [pc, #4]	; (80a0780 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a077a:	4a02      	ldr	r2, [pc, #8]	; (80a0784 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a077c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a077e:	4770      	bx	lr
 80a0780:	20000088 	.word	0x20000088
 80a0784:	080a1b2c 	.word	0x080a1b2c

080a0788 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0788:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a078a:	681a      	ldr	r2, [r3, #0]
 80a078c:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a078e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0790:	4770      	bx	lr
 80a0792:	bf00      	nop
 80a0794:	20000004 	.word	0x20000004
 80a0798:	2000008c 	.word	0x2000008c

080a079c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a079c:	2100      	movs	r1, #0
 80a079e:	f7ff bdf5 	b.w	80a038c <system_delay_ms>
	...

080a07a4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a07a4:	2200      	movs	r2, #0
 80a07a6:	4b01      	ldr	r3, [pc, #4]	; (80a07ac <_GLOBAL__sub_I_RGB+0x8>)
 80a07a8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a07aa:	4770      	bx	lr
 80a07ac:	20000090 	.word	0x20000090

080a07b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a07b0:	4b01      	ldr	r3, [pc, #4]	; (80a07b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a07b2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a07b4:	4770      	bx	lr
 80a07b6:	bf00      	nop
 80a07b8:	20000008 	.word	0x20000008

080a07bc <serialEventRun>:
{
 80a07bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a07be:	4b13      	ldr	r3, [pc, #76]	; (80a080c <serialEventRun+0x50>)
 80a07c0:	b143      	cbz	r3, 80a07d4 <serialEventRun+0x18>
 80a07c2:	f000 f975 	bl	80a0ab0 <_Z16_fetch_usbserialv>
 80a07c6:	6803      	ldr	r3, [r0, #0]
 80a07c8:	691b      	ldr	r3, [r3, #16]
 80a07ca:	4798      	blx	r3
 80a07cc:	2800      	cmp	r0, #0
 80a07ce:	dd01      	ble.n	80a07d4 <serialEventRun+0x18>
        serialEvent();
 80a07d0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a07d4:	4b0e      	ldr	r3, [pc, #56]	; (80a0810 <serialEventRun+0x54>)
 80a07d6:	b143      	cbz	r3, 80a07ea <serialEventRun+0x2e>
 80a07d8:	f000 fbb2 	bl	80a0f40 <_Z22__fetch_global_Serial1v>
 80a07dc:	6803      	ldr	r3, [r0, #0]
 80a07de:	691b      	ldr	r3, [r3, #16]
 80a07e0:	4798      	blx	r3
 80a07e2:	2800      	cmp	r0, #0
 80a07e4:	dd01      	ble.n	80a07ea <serialEventRun+0x2e>
        serialEvent1();
 80a07e6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a07ea:	4b0a      	ldr	r3, [pc, #40]	; (80a0814 <serialEventRun+0x58>)
 80a07ec:	b10b      	cbz	r3, 80a07f2 <serialEventRun+0x36>
 80a07ee:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a07f2:	4b09      	ldr	r3, [pc, #36]	; (80a0818 <serialEventRun+0x5c>)
 80a07f4:	b143      	cbz	r3, 80a0808 <serialEventRun+0x4c>
 80a07f6:	f000 f995 	bl	80a0b24 <_Z17_fetch_usbserial1v>
 80a07fa:	6803      	ldr	r3, [r0, #0]
 80a07fc:	691b      	ldr	r3, [r3, #16]
 80a07fe:	4798      	blx	r3
 80a0800:	2800      	cmp	r0, #0
 80a0802:	dd01      	ble.n	80a0808 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0804:	f3af 8000 	nop.w
}
 80a0808:	bd08      	pop	{r3, pc}
 80a080a:	bf00      	nop
	...

080a081c <_post_loop>:
{
 80a081c:	b508      	push	{r3, lr}
	serialEventRun();
 80a081e:	f7ff ffcd 	bl	80a07bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0822:	f7ff fcc9 	bl	80a01b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0826:	4b01      	ldr	r3, [pc, #4]	; (80a082c <_post_loop+0x10>)
 80a0828:	6018      	str	r0, [r3, #0]
}
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	20000414 	.word	0x20000414

080a0830 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0830:	4805      	ldr	r0, [pc, #20]	; (80a0848 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0832:	4a06      	ldr	r2, [pc, #24]	; (80a084c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0834:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0836:	1a12      	subs	r2, r2, r0
 80a0838:	4905      	ldr	r1, [pc, #20]	; (80a0850 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a083a:	f001 f8ab 	bl	80a1994 <memcpy>
    __backup_sram_signature = signature;
 80a083e:	4b05      	ldr	r3, [pc, #20]	; (80a0854 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0840:	4a05      	ldr	r2, [pc, #20]	; (80a0858 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0842:	601a      	str	r2, [r3, #0]
}
 80a0844:	bd08      	pop	{r3, pc}
 80a0846:	bf00      	nop
 80a0848:	40024000 	.word	0x40024000
 80a084c:	40024004 	.word	0x40024004
 80a0850:	080a1d20 	.word	0x080a1d20
 80a0854:	40024000 	.word	0x40024000
 80a0858:	9a271c1e 	.word	0x9a271c1e

080a085c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a085c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a085e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0860:	461a      	mov	r2, r3
 80a0862:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0866:	9300      	str	r3, [sp, #0]
 80a0868:	f7ff fda2 	bl	80a03b0 <system_ctrl_set_result>
}
 80a086c:	b003      	add	sp, #12
 80a086e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0874 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0874:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0876:	8843      	ldrh	r3, [r0, #2]
 80a0878:	2b0a      	cmp	r3, #10
 80a087a:	d008      	beq.n	80a088e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a087c:	2b50      	cmp	r3, #80	; 0x50
 80a087e:	d10b      	bne.n	80a0898 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0880:	4b09      	ldr	r3, [pc, #36]	; (80a08a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0882:	681b      	ldr	r3, [r3, #0]
 80a0884:	b14b      	cbz	r3, 80a089a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0886:	b003      	add	sp, #12
 80a0888:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a088c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a088e:	f7ff ffe5 	bl	80a085c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0892:	b003      	add	sp, #12
 80a0894:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0898:	2300      	movs	r3, #0
 80a089a:	461a      	mov	r2, r3
 80a089c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a08a0:	9300      	str	r3, [sp, #0]
 80a08a2:	f7ff fd85 	bl	80a03b0 <system_ctrl_set_result>
}
 80a08a6:	e7f4      	b.n	80a0892 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a08a8:	200000a4 	.word	0x200000a4

080a08ac <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a08ac:	2100      	movs	r1, #0
{
 80a08ae:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a08b0:	4811      	ldr	r0, [pc, #68]	; (80a08f8 <module_user_init_hook+0x4c>)
 80a08b2:	f7ff fe0f 	bl	80a04d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a08b6:	4b11      	ldr	r3, [pc, #68]	; (80a08fc <module_user_init_hook+0x50>)
 80a08b8:	681a      	ldr	r2, [r3, #0]
 80a08ba:	4b11      	ldr	r3, [pc, #68]	; (80a0900 <module_user_init_hook+0x54>)
 80a08bc:	429a      	cmp	r2, r3
 80a08be:	bf0c      	ite	eq
 80a08c0:	2201      	moveq	r2, #1
 80a08c2:	2200      	movne	r2, #0
 80a08c4:	4b0f      	ldr	r3, [pc, #60]	; (80a0904 <module_user_init_hook+0x58>)
 80a08c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a08c8:	d001      	beq.n	80a08ce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a08ca:	f7ff ffb1 	bl	80a0830 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a08ce:	f7ff fc6b 	bl	80a01a8 <HAL_RNG_GetRandomNumber>
 80a08d2:	4604      	mov	r4, r0
    srand(seed);
 80a08d4:	f001 f874 	bl	80a19c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a08d8:	4b0b      	ldr	r3, [pc, #44]	; (80a0908 <module_user_init_hook+0x5c>)
 80a08da:	b113      	cbz	r3, 80a08e2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a08dc:	4620      	mov	r0, r4
 80a08de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a08e2:	2100      	movs	r1, #0
 80a08e4:	4808      	ldr	r0, [pc, #32]	; (80a0908 <module_user_init_hook+0x5c>)
 80a08e6:	f7ff fdd5 	bl	80a0494 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a08ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a08ee:	2100      	movs	r1, #0
 80a08f0:	4806      	ldr	r0, [pc, #24]	; (80a090c <module_user_init_hook+0x60>)
 80a08f2:	f7ff bd53 	b.w	80a039c <system_ctrl_set_app_request_handler>
 80a08f6:	bf00      	nop
 80a08f8:	080a07b1 	.word	0x080a07b1
 80a08fc:	40024000 	.word	0x40024000
 80a0900:	9a271c1e 	.word	0x9a271c1e
 80a0904:	200000a0 	.word	0x200000a0
 80a0908:	00000000 	.word	0x00000000
 80a090c:	080a0875 	.word	0x080a0875

080a0910 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0910:	4770      	bx	lr

080a0912 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0914:	460e      	mov	r6, r1
 80a0916:	2400      	movs	r4, #0
 80a0918:	f100 0708 	add.w	r7, r0, #8
 80a091c:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a091e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0922:	220a      	movs	r2, #10
 80a0924:	4630      	mov	r0, r6
 80a0926:	f7ff fe42 	bl	80a05ae <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a092a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a092c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a092e:	d101      	bne.n	80a0934 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0930:	4620      	mov	r0, r4
 80a0932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0934:	2c00      	cmp	r4, #0
 80a0936:	d0f2      	beq.n	80a091e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0938:	212e      	movs	r1, #46	; 0x2e
 80a093a:	4630      	mov	r0, r6
 80a093c:	f7ff fe1e 	bl	80a057c <_ZN5Print5printEc>
 80a0940:	4404      	add	r4, r0
 80a0942:	e7ec      	b.n	80a091e <_ZNK9IPAddress7printToER5Print+0xc>

080a0944 <_ZN9IPAddressD0Ev>:
 80a0944:	b510      	push	{r4, lr}
 80a0946:	4604      	mov	r4, r0
 80a0948:	2118      	movs	r1, #24
 80a094a:	f7ff fba8 	bl	80a009e <_ZdlPvj>
 80a094e:	4620      	mov	r0, r4
 80a0950:	bd10      	pop	{r4, pc}
	...

080a0954 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0954:	b510      	push	{r4, lr}
 80a0956:	4604      	mov	r4, r0
 80a0958:	4b04      	ldr	r3, [pc, #16]	; (80a096c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a095a:	2211      	movs	r2, #17
 80a095c:	2100      	movs	r1, #0
 80a095e:	f840 3b04 	str.w	r3, [r0], #4
 80a0962:	f001 f825 	bl	80a19b0 <memset>
}
 80a0966:	4620      	mov	r0, r4
 80a0968:	bd10      	pop	{r4, pc}
 80a096a:	bf00      	nop
 80a096c:	080a1b54 	.word	0x080a1b54

080a0970 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0970:	4603      	mov	r3, r0
 80a0972:	4a07      	ldr	r2, [pc, #28]	; (80a0990 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0974:	b510      	push	{r4, lr}
 80a0976:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a097a:	f101 0210 	add.w	r2, r1, #16
 80a097e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0982:	4291      	cmp	r1, r2
 80a0984:	f843 4b04 	str.w	r4, [r3], #4
 80a0988:	d1f9      	bne.n	80a097e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a098a:	780a      	ldrb	r2, [r1, #0]
 80a098c:	701a      	strb	r2, [r3, #0]
}
 80a098e:	bd10      	pop	{r4, pc}
 80a0990:	080a1b54 	.word	0x080a1b54

080a0994 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a0994:	4a02      	ldr	r2, [pc, #8]	; (80a09a0 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a0996:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a099a:	2204      	movs	r2, #4
 80a099c:	7502      	strb	r2, [r0, #20]
}
 80a099e:	4770      	bx	lr
 80a09a0:	080a1b54 	.word	0x080a1b54

080a09a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a09a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a09a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a09aa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a09ae:	2304      	movs	r3, #4
 80a09b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a09b4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a09b8:	6044      	str	r4, [r0, #4]
 80a09ba:	7503      	strb	r3, [r0, #20]
}
 80a09bc:	bd10      	pop	{r4, pc}
	...

080a09c0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a09c0:	b513      	push	{r0, r1, r4, lr}
 80a09c2:	4c04      	ldr	r4, [pc, #16]	; (80a09d4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a09c4:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a09c6:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a09ca:	9400      	str	r4, [sp, #0]
 80a09cc:	f7ff ffea 	bl	80a09a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a09d0:	b002      	add	sp, #8
 80a09d2:	bd10      	pop	{r4, pc}
 80a09d4:	080a1b54 	.word	0x080a1b54

080a09d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a09d8:	7441      	strb	r1, [r0, #17]
}
 80a09da:	4770      	bx	lr

080a09dc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09dc:	4770      	bx	lr

080a09de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a09de:	4770      	bx	lr

080a09e0 <_ZN9USBSerial4readEv>:
{
 80a09e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a09e2:	2100      	movs	r1, #0
 80a09e4:	7c00      	ldrb	r0, [r0, #16]
 80a09e6:	f7ff fca9 	bl	80a033c <HAL_USB_USART_Receive_Data>
}
 80a09ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09ee:	bd08      	pop	{r3, pc}

080a09f0 <_ZN9USBSerial4peekEv>:
{
 80a09f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a09f2:	2101      	movs	r1, #1
 80a09f4:	7c00      	ldrb	r0, [r0, #16]
 80a09f6:	f7ff fca1 	bl	80a033c <HAL_USB_USART_Receive_Data>
}
 80a09fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09fe:	bd08      	pop	{r3, pc}

080a0a00 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0a00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0a02:	7c00      	ldrb	r0, [r0, #16]
 80a0a04:	f7ff fc92 	bl	80a032c <HAL_USB_USART_Available_Data_For_Write>
}
 80a0a08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a0c:	bd08      	pop	{r3, pc}

080a0a0e <_ZN9USBSerial9availableEv>:
{
 80a0a0e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0a10:	7c00      	ldrb	r0, [r0, #16]
 80a0a12:	f7ff fc83 	bl	80a031c <HAL_USB_USART_Available_Data>
}
 80a0a16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a1a:	bd08      	pop	{r3, pc}

080a0a1c <_ZN9USBSerial5writeEh>:
{
 80a0a1c:	b538      	push	{r3, r4, r5, lr}
 80a0a1e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a20:	7c00      	ldrb	r0, [r0, #16]
{
 80a0a22:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a24:	f7ff fc82 	bl	80a032c <HAL_USB_USART_Available_Data_For_Write>
 80a0a28:	2800      	cmp	r0, #0
 80a0a2a:	dc01      	bgt.n	80a0a30 <_ZN9USBSerial5writeEh+0x14>
 80a0a2c:	7c60      	ldrb	r0, [r4, #17]
 80a0a2e:	b128      	cbz	r0, 80a0a3c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0a30:	4629      	mov	r1, r5
 80a0a32:	7c20      	ldrb	r0, [r4, #16]
 80a0a34:	f7ff fc8a 	bl	80a034c <HAL_USB_USART_Send_Data>
 80a0a38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0a3c:	bd38      	pop	{r3, r4, r5, pc}

080a0a3e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0a3e:	7c00      	ldrb	r0, [r0, #16]
 80a0a40:	f7ff bc8c 	b.w	80a035c <HAL_USB_USART_Flush_Data>

080a0a44 <_ZN9USBSerialD0Ev>:
 80a0a44:	b510      	push	{r4, lr}
 80a0a46:	4604      	mov	r4, r0
 80a0a48:	2114      	movs	r1, #20
 80a0a4a:	f7ff fb28 	bl	80a009e <_ZdlPvj>
 80a0a4e:	4620      	mov	r0, r4
 80a0a50:	bd10      	pop	{r4, pc}

080a0a52 <__tcf_1>:
 80a0a52:	4770      	bx	lr

080a0a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a54:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a5a:	4604      	mov	r4, r0
 80a0a5c:	4608      	mov	r0, r1
 80a0a5e:	2100      	movs	r1, #0
 80a0a60:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0a64:	4b04      	ldr	r3, [pc, #16]	; (80a0a78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0a66:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a68:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0a6a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0a6c:	4611      	mov	r1, r2
  _blocking = true;
 80a0a6e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0a70:	f7ff fc44 	bl	80a02fc <HAL_USB_USART_Init>
}
 80a0a74:	4620      	mov	r0, r4
 80a0a76:	bd10      	pop	{r4, pc}
 80a0a78:	080a1b68 	.word	0x080a1b68

080a0a7c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0a7c:	2200      	movs	r2, #0
 80a0a7e:	7c00      	ldrb	r0, [r0, #16]
 80a0a80:	f7ff bc44 	b.w	80a030c <HAL_USB_USART_Begin>

080a0a84 <_Z19acquireSerialBufferv>:
{
 80a0a84:	b510      	push	{r4, lr}
 80a0a86:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0a88:	2214      	movs	r2, #20
 80a0a8a:	2100      	movs	r1, #0
 80a0a8c:	f000 ff90 	bl	80a19b0 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0a90:	4b05      	ldr	r3, [pc, #20]	; (80a0aa8 <_Z19acquireSerialBufferv+0x24>)
}
 80a0a92:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0a94:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0a96:	4b05      	ldr	r3, [pc, #20]	; (80a0aac <_Z19acquireSerialBufferv+0x28>)
 80a0a98:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a9a:	f240 1301 	movw	r3, #257	; 0x101
 80a0a9e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0aa0:	2381      	movs	r3, #129	; 0x81
 80a0aa2:	8223      	strh	r3, [r4, #16]
}
 80a0aa4:	bd10      	pop	{r4, pc}
 80a0aa6:	bf00      	nop
 80a0aa8:	200000d8 	.word	0x200000d8
 80a0aac:	200001d9 	.word	0x200001d9

080a0ab0 <_Z16_fetch_usbserialv>:
{
 80a0ab0:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0ab2:	4d0e      	ldr	r5, [pc, #56]	; (80a0aec <_Z16_fetch_usbserialv+0x3c>)
{
 80a0ab4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0ab6:	a801      	add	r0, sp, #4
 80a0ab8:	f7ff ffe4 	bl	80a0a84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0abc:	7829      	ldrb	r1, [r5, #0]
 80a0abe:	f3bf 8f5b 	dmb	ish
 80a0ac2:	f011 0401 	ands.w	r4, r1, #1
 80a0ac6:	d10e      	bne.n	80a0ae6 <_Z16_fetch_usbserialv+0x36>
 80a0ac8:	4628      	mov	r0, r5
 80a0aca:	f7ff faea 	bl	80a00a2 <__cxa_guard_acquire>
 80a0ace:	b150      	cbz	r0, 80a0ae6 <_Z16_fetch_usbserialv+0x36>
 80a0ad0:	4621      	mov	r1, r4
 80a0ad2:	aa01      	add	r2, sp, #4
 80a0ad4:	4806      	ldr	r0, [pc, #24]	; (80a0af0 <_Z16_fetch_usbserialv+0x40>)
 80a0ad6:	f7ff ffbd 	bl	80a0a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ada:	4628      	mov	r0, r5
 80a0adc:	f7ff fae6 	bl	80a00ac <__cxa_guard_release>
 80a0ae0:	4804      	ldr	r0, [pc, #16]	; (80a0af4 <_Z16_fetch_usbserialv+0x44>)
 80a0ae2:	f000 ff51 	bl	80a1988 <atexit>
	return _usbserial;
}
 80a0ae6:	4802      	ldr	r0, [pc, #8]	; (80a0af0 <_Z16_fetch_usbserialv+0x40>)
 80a0ae8:	b007      	add	sp, #28
 80a0aea:	bd30      	pop	{r4, r5, pc}
 80a0aec:	200000a8 	.word	0x200000a8
 80a0af0:	200000b0 	.word	0x200000b0
 80a0af4:	080a09dd 	.word	0x080a09dd

080a0af8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0af8:	b510      	push	{r4, lr}
 80a0afa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0afc:	2214      	movs	r2, #20
 80a0afe:	2100      	movs	r1, #0
 80a0b00:	f000 ff56 	bl	80a19b0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0b04:	4b05      	ldr	r3, [pc, #20]	; (80a0b1c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0b06:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0b08:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0b0a:	4b05      	ldr	r3, [pc, #20]	; (80a0b20 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0b0c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0b0e:	f240 1301 	movw	r3, #257	; 0x101
 80a0b12:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0b14:	2381      	movs	r3, #129	; 0x81
 80a0b16:	8223      	strh	r3, [r4, #16]
}
 80a0b18:	bd10      	pop	{r4, pc}
 80a0b1a:	bf00      	nop
 80a0b1c:	2000025a 	.word	0x2000025a
 80a0b20:	2000035b 	.word	0x2000035b

080a0b24 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0b24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b26:	4c0e      	ldr	r4, [pc, #56]	; (80a0b60 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0b28:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0b2a:	a801      	add	r0, sp, #4
 80a0b2c:	f7ff ffe4 	bl	80a0af8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b30:	7823      	ldrb	r3, [r4, #0]
 80a0b32:	f3bf 8f5b 	dmb	ish
 80a0b36:	07db      	lsls	r3, r3, #31
 80a0b38:	d40e      	bmi.n	80a0b58 <_Z17_fetch_usbserial1v+0x34>
 80a0b3a:	4620      	mov	r0, r4
 80a0b3c:	f7ff fab1 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b40:	b150      	cbz	r0, 80a0b58 <_Z17_fetch_usbserial1v+0x34>
 80a0b42:	2101      	movs	r1, #1
 80a0b44:	aa01      	add	r2, sp, #4
 80a0b46:	4807      	ldr	r0, [pc, #28]	; (80a0b64 <_Z17_fetch_usbserial1v+0x40>)
 80a0b48:	f7ff ff84 	bl	80a0a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b4c:	4620      	mov	r0, r4
 80a0b4e:	f7ff faad 	bl	80a00ac <__cxa_guard_release>
 80a0b52:	4805      	ldr	r0, [pc, #20]	; (80a0b68 <_Z17_fetch_usbserial1v+0x44>)
 80a0b54:	f000 ff18 	bl	80a1988 <atexit>
  return _usbserial1;
}
 80a0b58:	4802      	ldr	r0, [pc, #8]	; (80a0b64 <_Z17_fetch_usbserial1v+0x40>)
 80a0b5a:	b006      	add	sp, #24
 80a0b5c:	bd10      	pop	{r4, pc}
 80a0b5e:	bf00      	nop
 80a0b60:	200000ac 	.word	0x200000ac
 80a0b64:	200000c4 	.word	0x200000c4
 80a0b68:	080a0a53 	.word	0x080a0a53

080a0b6c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a0b6c:	4770      	bx	lr

080a0b6e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b6e:	7441      	strb	r1, [r0, #17]
}
 80a0b70:	4770      	bx	lr

080a0b72 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0b72:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0b74:	7c00      	ldrb	r0, [r0, #16]
 80a0b76:	f7ff fb67 	bl	80a0248 <hal_usart_available_data_for_write>
}
 80a0b7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b7e:	bd08      	pop	{r3, pc}

080a0b80 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0b80:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0b82:	7c00      	ldrb	r0, [r0, #16]
 80a0b84:	f7ff fb38 	bl	80a01f8 <hal_usart_available>
}
 80a0b88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b8c:	bd08      	pop	{r3, pc}

080a0b8e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0b8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0b90:	7c00      	ldrb	r0, [r0, #16]
 80a0b92:	f7ff fb41 	bl	80a0218 <hal_usart_peek>
}
 80a0b96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b9a:	bd08      	pop	{r3, pc}

080a0b9c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0b9c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0b9e:	7c00      	ldrb	r0, [r0, #16]
 80a0ba0:	f7ff fb32 	bl	80a0208 <hal_usart_read>
}
 80a0ba4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0ba8:	bd08      	pop	{r3, pc}

080a0baa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0baa:	7c00      	ldrb	r0, [r0, #16]
 80a0bac:	f7ff bb3c 	b.w	80a0228 <hal_usart_flush>

080a0bb0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0bb0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0bb2:	7c46      	ldrb	r6, [r0, #17]
{
 80a0bb4:	4604      	mov	r4, r0
 80a0bb6:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0bb8:	b12e      	cbz	r6, 80a0bc6 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0bba:	4629      	mov	r1, r5
 80a0bbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0bc2:	f7ff bb11 	b.w	80a01e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0bc6:	7c00      	ldrb	r0, [r0, #16]
 80a0bc8:	f7ff fb3e 	bl	80a0248 <hal_usart_available_data_for_write>
 80a0bcc:	2800      	cmp	r0, #0
 80a0bce:	dcf4      	bgt.n	80a0bba <_ZN11USARTSerial5writeEh+0xa>
}
 80a0bd0:	4630      	mov	r0, r6
 80a0bd2:	bd70      	pop	{r4, r5, r6, pc}

080a0bd4 <_ZN11USARTSerialD0Ev>:
 80a0bd4:	b510      	push	{r4, lr}
 80a0bd6:	4604      	mov	r4, r0
 80a0bd8:	2114      	movs	r1, #20
 80a0bda:	f7ff fa60 	bl	80a009e <_ZdlPvj>
 80a0bde:	4620      	mov	r0, r4
 80a0be0:	bd10      	pop	{r4, pc}
	...

080a0be4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0be4:	b510      	push	{r4, lr}
 80a0be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0bea:	4604      	mov	r4, r0
 80a0bec:	4608      	mov	r0, r1
 80a0bee:	4611      	mov	r1, r2
 80a0bf0:	2200      	movs	r2, #0
 80a0bf2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a0bf6:	4b04      	ldr	r3, [pc, #16]	; (80a0c08 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a0bf8:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a0bfa:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0bfc:	2301      	movs	r3, #1
 80a0bfe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a0c00:	f7ff fb2a 	bl	80a0258 <hal_usart_init_ex>
}
 80a0c04:	4620      	mov	r0, r4
 80a0c06:	bd10      	pop	{r4, pc}
 80a0c08:	080a1b98 	.word	0x080a1b98

080a0c0c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0c0c:	4770      	bx	lr

080a0c0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c10:	4606      	mov	r6, r0
 80a0c12:	4615      	mov	r5, r2
 80a0c14:	460c      	mov	r4, r1
 80a0c16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c18:	42bc      	cmp	r4, r7
 80a0c1a:	d006      	beq.n	80a0c2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0c1c:	6833      	ldr	r3, [r6, #0]
 80a0c1e:	4630      	mov	r0, r6
 80a0c20:	689b      	ldr	r3, [r3, #8]
 80a0c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0c26:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0c28:	e7f6      	b.n	80a0c18 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0c2a:	4628      	mov	r0, r5
 80a0c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c2e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0c2e:	2200      	movs	r2, #0
 80a0c30:	7c00      	ldrb	r0, [r0, #16]
 80a0c32:	f7ff bb19 	b.w	80a0268 <hal_i2c_write>

080a0c36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0c36:	2100      	movs	r1, #0
 80a0c38:	7c00      	ldrb	r0, [r0, #16]
 80a0c3a:	f7ff bb1d 	b.w	80a0278 <hal_i2c_available>

080a0c3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0c3e:	2100      	movs	r1, #0
 80a0c40:	7c00      	ldrb	r0, [r0, #16]
 80a0c42:	f7ff bb21 	b.w	80a0288 <hal_i2c_read>

080a0c46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0c46:	2100      	movs	r1, #0
 80a0c48:	7c00      	ldrb	r0, [r0, #16]
 80a0c4a:	f7ff bb25 	b.w	80a0298 <hal_i2c_peek>

080a0c4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0c4e:	2100      	movs	r1, #0
 80a0c50:	7c00      	ldrb	r0, [r0, #16]
 80a0c52:	f7ff bb29 	b.w	80a02a8 <hal_i2c_flush>

080a0c56 <_ZN7TwoWireD0Ev>:
 80a0c56:	b510      	push	{r4, lr}
 80a0c58:	4604      	mov	r4, r0
 80a0c5a:	2114      	movs	r1, #20
 80a0c5c:	f7ff fa1f 	bl	80a009e <_ZdlPvj>
 80a0c60:	4620      	mov	r0, r4
 80a0c62:	bd10      	pop	{r4, pc}

080a0c64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c64:	b510      	push	{r4, lr}
 80a0c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c6a:	4604      	mov	r4, r0
 80a0c6c:	4608      	mov	r0, r1
 80a0c6e:	2100      	movs	r1, #0
 80a0c70:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0c74:	4b03      	ldr	r3, [pc, #12]	; (80a0c84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0c76:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0c78:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0c7a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0c7c:	f7ff fb24 	bl	80a02c8 <hal_i2c_init>
}
 80a0c80:	4620      	mov	r0, r4
 80a0c82:	bd10      	pop	{r4, pc}
 80a0c84:	080a1bc8 	.word	0x080a1bc8

080a0c88 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0c88:	2200      	movs	r2, #0
 80a0c8a:	6840      	ldr	r0, [r0, #4]
 80a0c8c:	4611      	mov	r1, r2
 80a0c8e:	f7ff bbb1 	b.w	80a03f4 <network_ready>

080a0c92 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c94:	4615      	mov	r5, r2
 80a0c96:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0c98:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0c9a:	460e      	mov	r6, r1
 80a0c9c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0c9e:	2100      	movs	r1, #0
 80a0ca0:	a803      	add	r0, sp, #12
 80a0ca2:	f000 fe85 	bl	80a19b0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0ca6:	4628      	mov	r0, r5
 80a0ca8:	f000 feb8 	bl	80a1a1c <strlen>
 80a0cac:	2700      	movs	r7, #0
 80a0cae:	b281      	uxth	r1, r0
 80a0cb0:	6873      	ldr	r3, [r6, #4]
 80a0cb2:	4628      	mov	r0, r5
 80a0cb4:	9700      	str	r7, [sp, #0]
 80a0cb6:	aa03      	add	r2, sp, #12
 80a0cb8:	f7ff fb58 	bl	80a036c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0cbc:	b130      	cbz	r0, 80a0ccc <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0cbe:	4639      	mov	r1, r7
 80a0cc0:	4620      	mov	r0, r4
 80a0cc2:	f7ff fe67 	bl	80a0994 <_ZN9IPAddressC1Em>
    }
 80a0cc6:	4620      	mov	r0, r4
 80a0cc8:	b009      	add	sp, #36	; 0x24
 80a0cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	a903      	add	r1, sp, #12
 80a0cd0:	f7ff fe4e 	bl	80a0970 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0cd4:	e7f7      	b.n	80a0cc6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0cd6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0cd6:	2200      	movs	r2, #0
 80a0cd8:	6840      	ldr	r0, [r0, #4]
 80a0cda:	4611      	mov	r1, r2
 80a0cdc:	f7ff bbaa 	b.w	80a0434 <network_listening>

080a0ce0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0ce0:	2200      	movs	r2, #0
 80a0ce2:	6840      	ldr	r0, [r0, #4]
 80a0ce4:	4611      	mov	r1, r2
 80a0ce6:	f7ff bbb5 	b.w	80a0454 <network_get_listen_timeout>

080a0cea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0cea:	2200      	movs	r2, #0
 80a0cec:	6840      	ldr	r0, [r0, #4]
 80a0cee:	f7ff bba9 	b.w	80a0444 <network_set_listen_timeout>

080a0cf2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0cf2:	2200      	movs	r2, #0
 80a0cf4:	6840      	ldr	r0, [r0, #4]
 80a0cf6:	f081 0101 	eor.w	r1, r1, #1
 80a0cfa:	f7ff bb93 	b.w	80a0424 <network_listen>

080a0cfe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0cfe:	2300      	movs	r3, #0
 80a0d00:	6840      	ldr	r0, [r0, #4]
 80a0d02:	461a      	mov	r2, r3
 80a0d04:	4619      	mov	r1, r3
 80a0d06:	f7ff bb85 	b.w	80a0414 <network_off>

080a0d0a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a0d0a:	2300      	movs	r3, #0
 80a0d0c:	6840      	ldr	r0, [r0, #4]
 80a0d0e:	461a      	mov	r2, r3
 80a0d10:	4619      	mov	r1, r3
 80a0d12:	f7ff bb77 	b.w	80a0404 <network_on>

080a0d16 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0d16:	2200      	movs	r2, #0
 80a0d18:	6840      	ldr	r0, [r0, #4]
 80a0d1a:	4611      	mov	r1, r2
 80a0d1c:	f7ff bb5a 	b.w	80a03d4 <network_connecting>

080a0d20 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0d20:	2200      	movs	r2, #0
 80a0d22:	2102      	movs	r1, #2
 80a0d24:	6840      	ldr	r0, [r0, #4]
 80a0d26:	f7ff bb5d 	b.w	80a03e4 <network_disconnect>

080a0d2a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0d2a:	2300      	movs	r3, #0
 80a0d2c:	6840      	ldr	r0, [r0, #4]
 80a0d2e:	461a      	mov	r2, r3
 80a0d30:	f7ff bb48 	b.w	80a03c4 <network_connect>

080a0d34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0d34:	2204      	movs	r2, #4
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0d38:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0d3a:	4a02      	ldr	r2, [pc, #8]	; (80a0d44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0d3c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0d3e:	4770      	bx	lr
 80a0d40:	200003dc 	.word	0x200003dc
 80a0d44:	080a1bf0 	.word	0x080a1bf0

080a0d48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d48:	2300      	movs	r3, #0
 80a0d4a:	6840      	ldr	r0, [r0, #4]
 80a0d4c:	461a      	mov	r2, r3
 80a0d4e:	f7ff bb39 	b.w	80a03c4 <network_connect>

080a0d52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d52:	2200      	movs	r2, #0
 80a0d54:	2102      	movs	r1, #2
 80a0d56:	6840      	ldr	r0, [r0, #4]
 80a0d58:	f7ff bb44 	b.w	80a03e4 <network_disconnect>

080a0d5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d5c:	2200      	movs	r2, #0
 80a0d5e:	6840      	ldr	r0, [r0, #4]
 80a0d60:	4611      	mov	r1, r2
 80a0d62:	f7ff bb37 	b.w	80a03d4 <network_connecting>

080a0d66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d66:	2200      	movs	r2, #0
 80a0d68:	6840      	ldr	r0, [r0, #4]
 80a0d6a:	4611      	mov	r1, r2
 80a0d6c:	f7ff bb42 	b.w	80a03f4 <network_ready>

080a0d70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d70:	2300      	movs	r3, #0
 80a0d72:	6840      	ldr	r0, [r0, #4]
 80a0d74:	461a      	mov	r2, r3
 80a0d76:	4619      	mov	r1, r3
 80a0d78:	f7ff bb44 	b.w	80a0404 <network_on>

080a0d7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d7c:	2300      	movs	r3, #0
 80a0d7e:	6840      	ldr	r0, [r0, #4]
 80a0d80:	461a      	mov	r2, r3
 80a0d82:	4619      	mov	r1, r3
 80a0d84:	f7ff bb46 	b.w	80a0414 <network_off>

080a0d88 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0d88:	2100      	movs	r1, #0
 80a0d8a:	6840      	ldr	r0, [r0, #4]
 80a0d8c:	f7ff bb6a 	b.w	80a0464 <network_is_on>

080a0d90 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0d90:	2100      	movs	r1, #0
 80a0d92:	6840      	ldr	r0, [r0, #4]
 80a0d94:	f7ff bb6e 	b.w	80a0474 <network_is_off>

080a0d98 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0d98:	2200      	movs	r2, #0
 80a0d9a:	6840      	ldr	r0, [r0, #4]
 80a0d9c:	f081 0101 	eor.w	r1, r1, #1
 80a0da0:	f7ff bb40 	b.w	80a0424 <network_listen>

080a0da4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0da4:	2200      	movs	r2, #0
 80a0da6:	6840      	ldr	r0, [r0, #4]
 80a0da8:	f7ff bb4c 	b.w	80a0444 <network_set_listen_timeout>

080a0dac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0dac:	2200      	movs	r2, #0
 80a0dae:	6840      	ldr	r0, [r0, #4]
 80a0db0:	4611      	mov	r1, r2
 80a0db2:	f7ff bb4f 	b.w	80a0454 <network_get_listen_timeout>

080a0db6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0db6:	2200      	movs	r2, #0
 80a0db8:	6840      	ldr	r0, [r0, #4]
 80a0dba:	4611      	mov	r1, r2
 80a0dbc:	f7ff bb3a 	b.w	80a0434 <network_listening>

080a0dc0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0dc0:	b570      	push	{r4, r5, r6, lr}
 80a0dc2:	4615      	mov	r5, r2
 80a0dc4:	b08e      	sub	sp, #56	; 0x38
 80a0dc6:	4604      	mov	r4, r0
    IPAddress addr;
 80a0dc8:	a808      	add	r0, sp, #32
 80a0dca:	f7ff fdc3 	bl	80a0954 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0dce:	2211      	movs	r2, #17
 80a0dd0:	2100      	movs	r1, #0
 80a0dd2:	a803      	add	r0, sp, #12
 80a0dd4:	f000 fdec 	bl	80a19b0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0dd8:	2600      	movs	r6, #0
 80a0dda:	4628      	mov	r0, r5
 80a0ddc:	f000 fe1e 	bl	80a1a1c <strlen>
 80a0de0:	4b0a      	ldr	r3, [pc, #40]	; (80a0e0c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0de2:	9600      	str	r6, [sp, #0]
 80a0de4:	b281      	uxth	r1, r0
 80a0de6:	685b      	ldr	r3, [r3, #4]
 80a0de8:	4628      	mov	r0, r5
 80a0dea:	aa03      	add	r2, sp, #12
 80a0dec:	f7ff fabe 	bl	80a036c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0df0:	b130      	cbz	r0, 80a0e00 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0df2:	4631      	mov	r1, r6
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	f7ff fdcd 	bl	80a0994 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0dfa:	4620      	mov	r0, r4
 80a0dfc:	b00e      	add	sp, #56	; 0x38
 80a0dfe:	bd70      	pop	{r4, r5, r6, pc}
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	a903      	add	r1, sp, #12
 80a0e04:	f7ff fdb4 	bl	80a0970 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0e08:	e7f7      	b.n	80a0dfa <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0e0a:	bf00      	nop
 80a0e0c:	200003dc 	.word	0x200003dc

080a0e10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0e10:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0e12:	4a03      	ldr	r2, [pc, #12]	; (80a0e20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e14:	601a      	str	r2, [r3, #0]
 80a0e16:	2200      	movs	r2, #0
 80a0e18:	605a      	str	r2, [r3, #4]

} // spark
 80a0e1a:	4770      	bx	lr
 80a0e1c:	200003e4 	.word	0x200003e4
 80a0e20:	080a1c2c 	.word	0x080a1c2c

080a0e24 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0e24:	4b02      	ldr	r3, [pc, #8]	; (80a0e30 <__tcf_0+0xc>)
 80a0e26:	6898      	ldr	r0, [r3, #8]
 80a0e28:	b108      	cbz	r0, 80a0e2e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0e2a:	f7ff b9d5 	b.w	80a01d8 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0e2e:	4770      	bx	lr
 80a0e30:	200003f0 	.word	0x200003f0

080a0e34 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0e34:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0e36:	b570      	push	{r4, r5, r6, lr}
 80a0e38:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0e3a:	d901      	bls.n	80a0e40 <pinAvailable+0xc>
    return false;
 80a0e3c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0e3e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0e40:	f1a0 030d 	sub.w	r3, r0, #13
 80a0e44:	2b02      	cmp	r3, #2
 80a0e46:	d90b      	bls.n	80a0e60 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0e48:	2801      	cmp	r0, #1
 80a0e4a:	d824      	bhi.n	80a0e96 <pinAvailable+0x62>
 80a0e4c:	f000 f8c2 	bl	80a0fd4 <_Z19__fetch_global_Wirev>
 80a0e50:	2100      	movs	r1, #0
 80a0e52:	7c00      	ldrb	r0, [r0, #16]
 80a0e54:	f7ff fa30 	bl	80a02b8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0e58:	f080 0001 	eor.w	r0, r0, #1
 80a0e5c:	b2c0      	uxtb	r0, r0
 80a0e5e:	e7ee      	b.n	80a0e3e <pinAvailable+0xa>
 80a0e60:	4e12      	ldr	r6, [pc, #72]	; (80a0eac <pinAvailable+0x78>)
 80a0e62:	7831      	ldrb	r1, [r6, #0]
 80a0e64:	f3bf 8f5b 	dmb	ish
 80a0e68:	f011 0501 	ands.w	r5, r1, #1
 80a0e6c:	d10d      	bne.n	80a0e8a <pinAvailable+0x56>
 80a0e6e:	4630      	mov	r0, r6
 80a0e70:	f7ff f917 	bl	80a00a2 <__cxa_guard_acquire>
 80a0e74:	b148      	cbz	r0, 80a0e8a <pinAvailable+0x56>
 80a0e76:	4629      	mov	r1, r5
 80a0e78:	480d      	ldr	r0, [pc, #52]	; (80a0eb0 <pinAvailable+0x7c>)
 80a0e7a:	f7ff fb33 	bl	80a04e4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0e7e:	4630      	mov	r0, r6
 80a0e80:	f7ff f914 	bl	80a00ac <__cxa_guard_release>
 80a0e84:	480b      	ldr	r0, [pc, #44]	; (80a0eb4 <pinAvailable+0x80>)
 80a0e86:	f000 fd7f 	bl	80a1988 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0e8a:	4b09      	ldr	r3, [pc, #36]	; (80a0eb0 <pinAvailable+0x7c>)
 80a0e8c:	7818      	ldrb	r0, [r3, #0]
 80a0e8e:	f7ff fa2d 	bl	80a02ec <hal_spi_is_enabled>
 80a0e92:	2800      	cmp	r0, #0
 80a0e94:	d1d2      	bne.n	80a0e3c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0e96:	3c12      	subs	r4, #18
 80a0e98:	2c01      	cmp	r4, #1
 80a0e9a:	d805      	bhi.n	80a0ea8 <pinAvailable+0x74>
 80a0e9c:	f000 f850 	bl	80a0f40 <_Z22__fetch_global_Serial1v>
 80a0ea0:	7c00      	ldrb	r0, [r0, #16]
 80a0ea2:	f7ff f9c9 	bl	80a0238 <hal_usart_is_enabled>
 80a0ea6:	e7d7      	b.n	80a0e58 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0ea8:	2001      	movs	r0, #1
 80a0eaa:	e7c8      	b.n	80a0e3e <pinAvailable+0xa>
 80a0eac:	200003ec 	.word	0x200003ec
 80a0eb0:	200003f0 	.word	0x200003f0
 80a0eb4:	080a0e25 	.word	0x080a0e25

080a0eb8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0eb8:	2817      	cmp	r0, #23
{
 80a0eba:	b538      	push	{r3, r4, r5, lr}
 80a0ebc:	4604      	mov	r4, r0
 80a0ebe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ec0:	d80a      	bhi.n	80a0ed8 <pinMode+0x20>
 80a0ec2:	29ff      	cmp	r1, #255	; 0xff
 80a0ec4:	d008      	beq.n	80a0ed8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0ec6:	f7ff ffb5 	bl	80a0e34 <pinAvailable>
 80a0eca:	b128      	cbz	r0, 80a0ed8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0ecc:	4629      	mov	r1, r5
 80a0ece:	4620      	mov	r0, r4
}
 80a0ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0ed4:	f7ff b958 	b.w	80a0188 <HAL_Pin_Mode>
}
 80a0ed8:	bd38      	pop	{r3, r4, r5, pc}

080a0eda <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a0eda:	b510      	push	{r4, lr}
 80a0edc:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a0ede:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a0ee0:	bf9c      	itt	ls
 80a0ee2:	340a      	addls	r4, #10
 80a0ee4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0ee6:	4620      	mov	r0, r4
 80a0ee8:	f7ff ffa4 	bl	80a0e34 <pinAvailable>
 80a0eec:	b150      	cbz	r0, 80a0f04 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a0eee:	2103      	movs	r1, #3
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	f7ff f941 	bl	80a0178 <HAL_Validate_Pin_Function>
 80a0ef6:	2803      	cmp	r0, #3
 80a0ef8:	d104      	bne.n	80a0f04 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a0efa:	4620      	mov	r0, r4
}
 80a0efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a0f00:	f7ff b94a 	b.w	80a0198 <hal_adc_read>
}
 80a0f04:	2000      	movs	r0, #0
 80a0f06:	bd10      	pop	{r4, pc}

080a0f08 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0f08:	4770      	bx	lr
	...

080a0f0c <_Z20acquireSerial1Bufferv>:
{
 80a0f0c:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a0f0e:	2514      	movs	r5, #20
{
 80a0f10:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a0f12:	462a      	mov	r2, r5
 80a0f14:	2100      	movs	r1, #0
 80a0f16:	f000 fd4b 	bl	80a19b0 <memset>
 80a0f1a:	8025      	strh	r5, [r4, #0]
 80a0f1c:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0f1e:	4e07      	ldr	r6, [pc, #28]	; (80a0f3c <_Z20acquireSerial1Bufferv+0x30>)
 80a0f20:	4628      	mov	r0, r5
 80a0f22:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a0f24:	8125      	strh	r5, [r4, #8]
 80a0f26:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0f28:	f000 f878 	bl	80a101c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0f2c:	4631      	mov	r1, r6
    };
 80a0f2e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0f30:	4628      	mov	r0, r5
 80a0f32:	f000 f873 	bl	80a101c <_ZnajRKSt9nothrow_t>
    };
 80a0f36:	60e0      	str	r0, [r4, #12]
}
 80a0f38:	4620      	mov	r0, r4
 80a0f3a:	bd70      	pop	{r4, r5, r6, pc}
 80a0f3c:	080a1c60 	.word	0x080a1c60

080a0f40 <_Z22__fetch_global_Serial1v>:
{
 80a0f40:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0f42:	4d0e      	ldr	r5, [pc, #56]	; (80a0f7c <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a0f44:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0f46:	7829      	ldrb	r1, [r5, #0]
 80a0f48:	f3bf 8f5b 	dmb	ish
 80a0f4c:	f011 0401 	ands.w	r4, r1, #1
 80a0f50:	d111      	bne.n	80a0f76 <_Z22__fetch_global_Serial1v+0x36>
 80a0f52:	4628      	mov	r0, r5
 80a0f54:	f7ff f8a5 	bl	80a00a2 <__cxa_guard_acquire>
 80a0f58:	b168      	cbz	r0, 80a0f76 <_Z22__fetch_global_Serial1v+0x36>
 80a0f5a:	a801      	add	r0, sp, #4
 80a0f5c:	f7ff ffd6 	bl	80a0f0c <_Z20acquireSerial1Bufferv>
 80a0f60:	4621      	mov	r1, r4
 80a0f62:	aa01      	add	r2, sp, #4
 80a0f64:	4806      	ldr	r0, [pc, #24]	; (80a0f80 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f66:	f7ff fe3d 	bl	80a0be4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a0f6a:	4628      	mov	r0, r5
 80a0f6c:	f7ff f89e 	bl	80a00ac <__cxa_guard_release>
 80a0f70:	4804      	ldr	r0, [pc, #16]	; (80a0f84 <_Z22__fetch_global_Serial1v+0x44>)
 80a0f72:	f000 fd09 	bl	80a1988 <atexit>
    return serial1;
}
 80a0f76:	4802      	ldr	r0, [pc, #8]	; (80a0f80 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f78:	b007      	add	sp, #28
 80a0f7a:	bd30      	pop	{r4, r5, pc}
 80a0f7c:	200003fc 	.word	0x200003fc
 80a0f80:	20000400 	.word	0x20000400
 80a0f84:	080a0f09 	.word	0x080a0f09

080a0f88 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0f88:	2300      	movs	r3, #0
 80a0f8a:	b507      	push	{r0, r1, r2, lr}
 80a0f8c:	461a      	mov	r2, r3
 80a0f8e:	4619      	mov	r1, r3
 80a0f90:	9300      	str	r3, [sp, #0]
 80a0f92:	4803      	ldr	r0, [pc, #12]	; (80a0fa0 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0f94:	f7ff fd14 	bl	80a09c0 <_ZN9IPAddressC1Ehhhh>
 80a0f98:	b003      	add	sp, #12
 80a0f9a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0f9e:	bf00      	nop
 80a0fa0:	20000418 	.word	0x20000418

080a0fa4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0fa4:	4770      	bx	lr
	...

080a0fa8 <_Z17acquireWireBufferv>:
{
 80a0fa8:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0faa:	2314      	movs	r3, #20
 80a0fac:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fae:	4e08      	ldr	r6, [pc, #32]	; (80a0fd0 <_Z17acquireWireBufferv+0x28>)
{
 80a0fb0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0fb2:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fb4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0fb6:	6085      	str	r5, [r0, #8]
 80a0fb8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fba:	4628      	mov	r0, r5
 80a0fbc:	f000 f82e 	bl	80a101c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fc0:	4631      	mov	r1, r6
	};
 80a0fc2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fc4:	4628      	mov	r0, r5
 80a0fc6:	f000 f829 	bl	80a101c <_ZnajRKSt9nothrow_t>
	};
 80a0fca:	60e0      	str	r0, [r4, #12]
}
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	bd70      	pop	{r4, r5, r6, pc}
 80a0fd0:	080a1c60 	.word	0x080a1c60

080a0fd4 <_Z19__fetch_global_Wirev>:
{
 80a0fd4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0fd6:	4d0e      	ldr	r5, [pc, #56]	; (80a1010 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a0fd8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0fda:	7829      	ldrb	r1, [r5, #0]
 80a0fdc:	f3bf 8f5b 	dmb	ish
 80a0fe0:	f011 0401 	ands.w	r4, r1, #1
 80a0fe4:	d111      	bne.n	80a100a <_Z19__fetch_global_Wirev+0x36>
 80a0fe6:	4628      	mov	r0, r5
 80a0fe8:	f7ff f85b 	bl	80a00a2 <__cxa_guard_acquire>
 80a0fec:	b168      	cbz	r0, 80a100a <_Z19__fetch_global_Wirev+0x36>
 80a0fee:	a801      	add	r0, sp, #4
 80a0ff0:	f7ff ffda 	bl	80a0fa8 <_Z17acquireWireBufferv>
 80a0ff4:	4621      	mov	r1, r4
 80a0ff6:	aa01      	add	r2, sp, #4
 80a0ff8:	4806      	ldr	r0, [pc, #24]	; (80a1014 <_Z19__fetch_global_Wirev+0x40>)
 80a0ffa:	f7ff fe33 	bl	80a0c64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0ffe:	4628      	mov	r0, r5
 80a1000:	f7ff f854 	bl	80a00ac <__cxa_guard_release>
 80a1004:	4804      	ldr	r0, [pc, #16]	; (80a1018 <_Z19__fetch_global_Wirev+0x44>)
 80a1006:	f000 fcbf 	bl	80a1988 <atexit>
	return wire;
}
 80a100a:	4802      	ldr	r0, [pc, #8]	; (80a1014 <_Z19__fetch_global_Wirev+0x40>)
 80a100c:	b007      	add	sp, #28
 80a100e:	bd30      	pop	{r4, r5, pc}
 80a1010:	20000430 	.word	0x20000430
 80a1014:	20000434 	.word	0x20000434
 80a1018:	080a0fa5 	.word	0x080a0fa5

080a101c <_ZnajRKSt9nothrow_t>:
 80a101c:	f7ff b83d 	b.w	80a009a <_Znaj>

080a1020 <__aeabi_drsub>:
 80a1020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1024:	e002      	b.n	80a102c <__adddf3>
 80a1026:	bf00      	nop

080a1028 <__aeabi_dsub>:
 80a1028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a102c <__adddf3>:
 80a102c:	b530      	push	{r4, r5, lr}
 80a102e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1032:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1036:	ea94 0f05 	teq	r4, r5
 80a103a:	bf08      	it	eq
 80a103c:	ea90 0f02 	teqeq	r0, r2
 80a1040:	bf1f      	itttt	ne
 80a1042:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1046:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a104a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a104e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1052:	f000 80e2 	beq.w	80a121a <__adddf3+0x1ee>
 80a1056:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a105a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a105e:	bfb8      	it	lt
 80a1060:	426d      	neglt	r5, r5
 80a1062:	dd0c      	ble.n	80a107e <__adddf3+0x52>
 80a1064:	442c      	add	r4, r5
 80a1066:	ea80 0202 	eor.w	r2, r0, r2
 80a106a:	ea81 0303 	eor.w	r3, r1, r3
 80a106e:	ea82 0000 	eor.w	r0, r2, r0
 80a1072:	ea83 0101 	eor.w	r1, r3, r1
 80a1076:	ea80 0202 	eor.w	r2, r0, r2
 80a107a:	ea81 0303 	eor.w	r3, r1, r3
 80a107e:	2d36      	cmp	r5, #54	; 0x36
 80a1080:	bf88      	it	hi
 80a1082:	bd30      	pophi	{r4, r5, pc}
 80a1084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1088:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a108c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1094:	d002      	beq.n	80a109c <__adddf3+0x70>
 80a1096:	4240      	negs	r0, r0
 80a1098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a109c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a10a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a10a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a10a8:	d002      	beq.n	80a10b0 <__adddf3+0x84>
 80a10aa:	4252      	negs	r2, r2
 80a10ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a10b0:	ea94 0f05 	teq	r4, r5
 80a10b4:	f000 80a7 	beq.w	80a1206 <__adddf3+0x1da>
 80a10b8:	f1a4 0401 	sub.w	r4, r4, #1
 80a10bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a10c0:	db0d      	blt.n	80a10de <__adddf3+0xb2>
 80a10c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a10c6:	fa22 f205 	lsr.w	r2, r2, r5
 80a10ca:	1880      	adds	r0, r0, r2
 80a10cc:	f141 0100 	adc.w	r1, r1, #0
 80a10d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a10d4:	1880      	adds	r0, r0, r2
 80a10d6:	fa43 f305 	asr.w	r3, r3, r5
 80a10da:	4159      	adcs	r1, r3
 80a10dc:	e00e      	b.n	80a10fc <__adddf3+0xd0>
 80a10de:	f1a5 0520 	sub.w	r5, r5, #32
 80a10e2:	f10e 0e20 	add.w	lr, lr, #32
 80a10e6:	2a01      	cmp	r2, #1
 80a10e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a10ec:	bf28      	it	cs
 80a10ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a10f2:	fa43 f305 	asr.w	r3, r3, r5
 80a10f6:	18c0      	adds	r0, r0, r3
 80a10f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a10fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1100:	d507      	bpl.n	80a1112 <__adddf3+0xe6>
 80a1102:	f04f 0e00 	mov.w	lr, #0
 80a1106:	f1dc 0c00 	rsbs	ip, ip, #0
 80a110a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a110e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1116:	d31b      	bcc.n	80a1150 <__adddf3+0x124>
 80a1118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a111c:	d30c      	bcc.n	80a1138 <__adddf3+0x10c>
 80a111e:	0849      	lsrs	r1, r1, #1
 80a1120:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1124:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1128:	f104 0401 	add.w	r4, r4, #1
 80a112c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1134:	f080 809a 	bcs.w	80a126c <__adddf3+0x240>
 80a1138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a113c:	bf08      	it	eq
 80a113e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1142:	f150 0000 	adcs.w	r0, r0, #0
 80a1146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a114a:	ea41 0105 	orr.w	r1, r1, r5
 80a114e:	bd30      	pop	{r4, r5, pc}
 80a1150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1154:	4140      	adcs	r0, r0
 80a1156:	eb41 0101 	adc.w	r1, r1, r1
 80a115a:	3c01      	subs	r4, #1
 80a115c:	bf28      	it	cs
 80a115e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1162:	d2e9      	bcs.n	80a1138 <__adddf3+0x10c>
 80a1164:	f091 0f00 	teq	r1, #0
 80a1168:	bf04      	itt	eq
 80a116a:	4601      	moveq	r1, r0
 80a116c:	2000      	moveq	r0, #0
 80a116e:	fab1 f381 	clz	r3, r1
 80a1172:	bf08      	it	eq
 80a1174:	3320      	addeq	r3, #32
 80a1176:	f1a3 030b 	sub.w	r3, r3, #11
 80a117a:	f1b3 0220 	subs.w	r2, r3, #32
 80a117e:	da0c      	bge.n	80a119a <__adddf3+0x16e>
 80a1180:	320c      	adds	r2, #12
 80a1182:	dd08      	ble.n	80a1196 <__adddf3+0x16a>
 80a1184:	f102 0c14 	add.w	ip, r2, #20
 80a1188:	f1c2 020c 	rsb	r2, r2, #12
 80a118c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1190:	fa21 f102 	lsr.w	r1, r1, r2
 80a1194:	e00c      	b.n	80a11b0 <__adddf3+0x184>
 80a1196:	f102 0214 	add.w	r2, r2, #20
 80a119a:	bfd8      	it	le
 80a119c:	f1c2 0c20 	rsble	ip, r2, #32
 80a11a0:	fa01 f102 	lsl.w	r1, r1, r2
 80a11a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a11a8:	bfdc      	itt	le
 80a11aa:	ea41 010c 	orrle.w	r1, r1, ip
 80a11ae:	4090      	lslle	r0, r2
 80a11b0:	1ae4      	subs	r4, r4, r3
 80a11b2:	bfa2      	ittt	ge
 80a11b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a11b8:	4329      	orrge	r1, r5
 80a11ba:	bd30      	popge	{r4, r5, pc}
 80a11bc:	ea6f 0404 	mvn.w	r4, r4
 80a11c0:	3c1f      	subs	r4, #31
 80a11c2:	da1c      	bge.n	80a11fe <__adddf3+0x1d2>
 80a11c4:	340c      	adds	r4, #12
 80a11c6:	dc0e      	bgt.n	80a11e6 <__adddf3+0x1ba>
 80a11c8:	f104 0414 	add.w	r4, r4, #20
 80a11cc:	f1c4 0220 	rsb	r2, r4, #32
 80a11d0:	fa20 f004 	lsr.w	r0, r0, r4
 80a11d4:	fa01 f302 	lsl.w	r3, r1, r2
 80a11d8:	ea40 0003 	orr.w	r0, r0, r3
 80a11dc:	fa21 f304 	lsr.w	r3, r1, r4
 80a11e0:	ea45 0103 	orr.w	r1, r5, r3
 80a11e4:	bd30      	pop	{r4, r5, pc}
 80a11e6:	f1c4 040c 	rsb	r4, r4, #12
 80a11ea:	f1c4 0220 	rsb	r2, r4, #32
 80a11ee:	fa20 f002 	lsr.w	r0, r0, r2
 80a11f2:	fa01 f304 	lsl.w	r3, r1, r4
 80a11f6:	ea40 0003 	orr.w	r0, r0, r3
 80a11fa:	4629      	mov	r1, r5
 80a11fc:	bd30      	pop	{r4, r5, pc}
 80a11fe:	fa21 f004 	lsr.w	r0, r1, r4
 80a1202:	4629      	mov	r1, r5
 80a1204:	bd30      	pop	{r4, r5, pc}
 80a1206:	f094 0f00 	teq	r4, #0
 80a120a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a120e:	bf06      	itte	eq
 80a1210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1214:	3401      	addeq	r4, #1
 80a1216:	3d01      	subne	r5, #1
 80a1218:	e74e      	b.n	80a10b8 <__adddf3+0x8c>
 80a121a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a121e:	bf18      	it	ne
 80a1220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1224:	d029      	beq.n	80a127a <__adddf3+0x24e>
 80a1226:	ea94 0f05 	teq	r4, r5
 80a122a:	bf08      	it	eq
 80a122c:	ea90 0f02 	teqeq	r0, r2
 80a1230:	d005      	beq.n	80a123e <__adddf3+0x212>
 80a1232:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1236:	bf04      	itt	eq
 80a1238:	4619      	moveq	r1, r3
 80a123a:	4610      	moveq	r0, r2
 80a123c:	bd30      	pop	{r4, r5, pc}
 80a123e:	ea91 0f03 	teq	r1, r3
 80a1242:	bf1e      	ittt	ne
 80a1244:	2100      	movne	r1, #0
 80a1246:	2000      	movne	r0, #0
 80a1248:	bd30      	popne	{r4, r5, pc}
 80a124a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a124e:	d105      	bne.n	80a125c <__adddf3+0x230>
 80a1250:	0040      	lsls	r0, r0, #1
 80a1252:	4149      	adcs	r1, r1
 80a1254:	bf28      	it	cs
 80a1256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a125a:	bd30      	pop	{r4, r5, pc}
 80a125c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1260:	bf3c      	itt	cc
 80a1262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1266:	bd30      	popcc	{r4, r5, pc}
 80a1268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a126c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1274:	f04f 0000 	mov.w	r0, #0
 80a1278:	bd30      	pop	{r4, r5, pc}
 80a127a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a127e:	bf1a      	itte	ne
 80a1280:	4619      	movne	r1, r3
 80a1282:	4610      	movne	r0, r2
 80a1284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1288:	bf1c      	itt	ne
 80a128a:	460b      	movne	r3, r1
 80a128c:	4602      	movne	r2, r0
 80a128e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1292:	bf06      	itte	eq
 80a1294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1298:	ea91 0f03 	teqeq	r1, r3
 80a129c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a12a0:	bd30      	pop	{r4, r5, pc}
 80a12a2:	bf00      	nop

080a12a4 <__aeabi_ui2d>:
 80a12a4:	f090 0f00 	teq	r0, #0
 80a12a8:	bf04      	itt	eq
 80a12aa:	2100      	moveq	r1, #0
 80a12ac:	4770      	bxeq	lr
 80a12ae:	b530      	push	{r4, r5, lr}
 80a12b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a12b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a12b8:	f04f 0500 	mov.w	r5, #0
 80a12bc:	f04f 0100 	mov.w	r1, #0
 80a12c0:	e750      	b.n	80a1164 <__adddf3+0x138>
 80a12c2:	bf00      	nop

080a12c4 <__aeabi_i2d>:
 80a12c4:	f090 0f00 	teq	r0, #0
 80a12c8:	bf04      	itt	eq
 80a12ca:	2100      	moveq	r1, #0
 80a12cc:	4770      	bxeq	lr
 80a12ce:	b530      	push	{r4, r5, lr}
 80a12d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a12d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a12d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a12dc:	bf48      	it	mi
 80a12de:	4240      	negmi	r0, r0
 80a12e0:	f04f 0100 	mov.w	r1, #0
 80a12e4:	e73e      	b.n	80a1164 <__adddf3+0x138>
 80a12e6:	bf00      	nop

080a12e8 <__aeabi_f2d>:
 80a12e8:	0042      	lsls	r2, r0, #1
 80a12ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a12ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80a12f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a12f6:	bf1f      	itttt	ne
 80a12f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a12fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1304:	4770      	bxne	lr
 80a1306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a130a:	bf08      	it	eq
 80a130c:	4770      	bxeq	lr
 80a130e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1312:	bf04      	itt	eq
 80a1314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1318:	4770      	bxeq	lr
 80a131a:	b530      	push	{r4, r5, lr}
 80a131c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1328:	e71c      	b.n	80a1164 <__adddf3+0x138>
 80a132a:	bf00      	nop

080a132c <__aeabi_ul2d>:
 80a132c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1330:	bf08      	it	eq
 80a1332:	4770      	bxeq	lr
 80a1334:	b530      	push	{r4, r5, lr}
 80a1336:	f04f 0500 	mov.w	r5, #0
 80a133a:	e00a      	b.n	80a1352 <__aeabi_l2d+0x16>

080a133c <__aeabi_l2d>:
 80a133c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1340:	bf08      	it	eq
 80a1342:	4770      	bxeq	lr
 80a1344:	b530      	push	{r4, r5, lr}
 80a1346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a134a:	d502      	bpl.n	80a1352 <__aeabi_l2d+0x16>
 80a134c:	4240      	negs	r0, r0
 80a134e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1352:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1356:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a135a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a135e:	f43f aed8 	beq.w	80a1112 <__adddf3+0xe6>
 80a1362:	f04f 0203 	mov.w	r2, #3
 80a1366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a136a:	bf18      	it	ne
 80a136c:	3203      	addne	r2, #3
 80a136e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1372:	bf18      	it	ne
 80a1374:	3203      	addne	r2, #3
 80a1376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a137a:	f1c2 0320 	rsb	r3, r2, #32
 80a137e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1382:	fa20 f002 	lsr.w	r0, r0, r2
 80a1386:	fa01 fe03 	lsl.w	lr, r1, r3
 80a138a:	ea40 000e 	orr.w	r0, r0, lr
 80a138e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1392:	4414      	add	r4, r2
 80a1394:	e6bd      	b.n	80a1112 <__adddf3+0xe6>
 80a1396:	bf00      	nop

080a1398 <__aeabi_dmul>:
 80a1398:	b570      	push	{r4, r5, r6, lr}
 80a139a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a139e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a13a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a13a6:	bf1d      	ittte	ne
 80a13a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a13ac:	ea94 0f0c 	teqne	r4, ip
 80a13b0:	ea95 0f0c 	teqne	r5, ip
 80a13b4:	f000 f8de 	bleq	80a1574 <__aeabi_dmul+0x1dc>
 80a13b8:	442c      	add	r4, r5
 80a13ba:	ea81 0603 	eor.w	r6, r1, r3
 80a13be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a13c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a13c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a13ca:	bf18      	it	ne
 80a13cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a13d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a13d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a13d8:	d038      	beq.n	80a144c <__aeabi_dmul+0xb4>
 80a13da:	fba0 ce02 	umull	ip, lr, r0, r2
 80a13de:	f04f 0500 	mov.w	r5, #0
 80a13e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a13e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a13ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a13ee:	f04f 0600 	mov.w	r6, #0
 80a13f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a13f6:	f09c 0f00 	teq	ip, #0
 80a13fa:	bf18      	it	ne
 80a13fc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a140c:	d204      	bcs.n	80a1418 <__aeabi_dmul+0x80>
 80a140e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1412:	416d      	adcs	r5, r5
 80a1414:	eb46 0606 	adc.w	r6, r6, r6
 80a1418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a141c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a142c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1430:	bf88      	it	hi
 80a1432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1436:	d81e      	bhi.n	80a1476 <__aeabi_dmul+0xde>
 80a1438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a143c:	bf08      	it	eq
 80a143e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1442:	f150 0000 	adcs.w	r0, r0, #0
 80a1446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a144a:	bd70      	pop	{r4, r5, r6, pc}
 80a144c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1450:	ea46 0101 	orr.w	r1, r6, r1
 80a1454:	ea40 0002 	orr.w	r0, r0, r2
 80a1458:	ea81 0103 	eor.w	r1, r1, r3
 80a145c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1460:	bfc2      	ittt	gt
 80a1462:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a146a:	bd70      	popgt	{r4, r5, r6, pc}
 80a146c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1470:	f04f 0e00 	mov.w	lr, #0
 80a1474:	3c01      	subs	r4, #1
 80a1476:	f300 80ab 	bgt.w	80a15d0 <__aeabi_dmul+0x238>
 80a147a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a147e:	bfde      	ittt	le
 80a1480:	2000      	movle	r0, #0
 80a1482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1486:	bd70      	pople	{r4, r5, r6, pc}
 80a1488:	f1c4 0400 	rsb	r4, r4, #0
 80a148c:	3c20      	subs	r4, #32
 80a148e:	da35      	bge.n	80a14fc <__aeabi_dmul+0x164>
 80a1490:	340c      	adds	r4, #12
 80a1492:	dc1b      	bgt.n	80a14cc <__aeabi_dmul+0x134>
 80a1494:	f104 0414 	add.w	r4, r4, #20
 80a1498:	f1c4 0520 	rsb	r5, r4, #32
 80a149c:	fa00 f305 	lsl.w	r3, r0, r5
 80a14a0:	fa20 f004 	lsr.w	r0, r0, r4
 80a14a4:	fa01 f205 	lsl.w	r2, r1, r5
 80a14a8:	ea40 0002 	orr.w	r0, r0, r2
 80a14ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a14b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a14b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a14b8:	fa21 f604 	lsr.w	r6, r1, r4
 80a14bc:	eb42 0106 	adc.w	r1, r2, r6
 80a14c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a14c4:	bf08      	it	eq
 80a14c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a14ca:	bd70      	pop	{r4, r5, r6, pc}
 80a14cc:	f1c4 040c 	rsb	r4, r4, #12
 80a14d0:	f1c4 0520 	rsb	r5, r4, #32
 80a14d4:	fa00 f304 	lsl.w	r3, r0, r4
 80a14d8:	fa20 f005 	lsr.w	r0, r0, r5
 80a14dc:	fa01 f204 	lsl.w	r2, r1, r4
 80a14e0:	ea40 0002 	orr.w	r0, r0, r2
 80a14e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a14e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a14ec:	f141 0100 	adc.w	r1, r1, #0
 80a14f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a14f4:	bf08      	it	eq
 80a14f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a14fa:	bd70      	pop	{r4, r5, r6, pc}
 80a14fc:	f1c4 0520 	rsb	r5, r4, #32
 80a1500:	fa00 f205 	lsl.w	r2, r0, r5
 80a1504:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1508:	fa20 f304 	lsr.w	r3, r0, r4
 80a150c:	fa01 f205 	lsl.w	r2, r1, r5
 80a1510:	ea43 0302 	orr.w	r3, r3, r2
 80a1514:	fa21 f004 	lsr.w	r0, r1, r4
 80a1518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a151c:	fa21 f204 	lsr.w	r2, r1, r4
 80a1520:	ea20 0002 	bic.w	r0, r0, r2
 80a1524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a152c:	bf08      	it	eq
 80a152e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1532:	bd70      	pop	{r4, r5, r6, pc}
 80a1534:	f094 0f00 	teq	r4, #0
 80a1538:	d10f      	bne.n	80a155a <__aeabi_dmul+0x1c2>
 80a153a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a153e:	0040      	lsls	r0, r0, #1
 80a1540:	eb41 0101 	adc.w	r1, r1, r1
 80a1544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1548:	bf08      	it	eq
 80a154a:	3c01      	subeq	r4, #1
 80a154c:	d0f7      	beq.n	80a153e <__aeabi_dmul+0x1a6>
 80a154e:	ea41 0106 	orr.w	r1, r1, r6
 80a1552:	f095 0f00 	teq	r5, #0
 80a1556:	bf18      	it	ne
 80a1558:	4770      	bxne	lr
 80a155a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a155e:	0052      	lsls	r2, r2, #1
 80a1560:	eb43 0303 	adc.w	r3, r3, r3
 80a1564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1568:	bf08      	it	eq
 80a156a:	3d01      	subeq	r5, #1
 80a156c:	d0f7      	beq.n	80a155e <__aeabi_dmul+0x1c6>
 80a156e:	ea43 0306 	orr.w	r3, r3, r6
 80a1572:	4770      	bx	lr
 80a1574:	ea94 0f0c 	teq	r4, ip
 80a1578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a157c:	bf18      	it	ne
 80a157e:	ea95 0f0c 	teqne	r5, ip
 80a1582:	d00c      	beq.n	80a159e <__aeabi_dmul+0x206>
 80a1584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1588:	bf18      	it	ne
 80a158a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a158e:	d1d1      	bne.n	80a1534 <__aeabi_dmul+0x19c>
 80a1590:	ea81 0103 	eor.w	r1, r1, r3
 80a1594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1598:	f04f 0000 	mov.w	r0, #0
 80a159c:	bd70      	pop	{r4, r5, r6, pc}
 80a159e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a15a2:	bf06      	itte	eq
 80a15a4:	4610      	moveq	r0, r2
 80a15a6:	4619      	moveq	r1, r3
 80a15a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a15ac:	d019      	beq.n	80a15e2 <__aeabi_dmul+0x24a>
 80a15ae:	ea94 0f0c 	teq	r4, ip
 80a15b2:	d102      	bne.n	80a15ba <__aeabi_dmul+0x222>
 80a15b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a15b8:	d113      	bne.n	80a15e2 <__aeabi_dmul+0x24a>
 80a15ba:	ea95 0f0c 	teq	r5, ip
 80a15be:	d105      	bne.n	80a15cc <__aeabi_dmul+0x234>
 80a15c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a15c4:	bf1c      	itt	ne
 80a15c6:	4610      	movne	r0, r2
 80a15c8:	4619      	movne	r1, r3
 80a15ca:	d10a      	bne.n	80a15e2 <__aeabi_dmul+0x24a>
 80a15cc:	ea81 0103 	eor.w	r1, r1, r3
 80a15d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a15d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a15d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a15dc:	f04f 0000 	mov.w	r0, #0
 80a15e0:	bd70      	pop	{r4, r5, r6, pc}
 80a15e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a15e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a15ea:	bd70      	pop	{r4, r5, r6, pc}

080a15ec <__aeabi_ddiv>:
 80a15ec:	b570      	push	{r4, r5, r6, lr}
 80a15ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a15f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a15f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a15fa:	bf1d      	ittte	ne
 80a15fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1600:	ea94 0f0c 	teqne	r4, ip
 80a1604:	ea95 0f0c 	teqne	r5, ip
 80a1608:	f000 f8a7 	bleq	80a175a <__aeabi_ddiv+0x16e>
 80a160c:	eba4 0405 	sub.w	r4, r4, r5
 80a1610:	ea81 0e03 	eor.w	lr, r1, r3
 80a1614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1618:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a161c:	f000 8088 	beq.w	80a1730 <__aeabi_ddiv+0x144>
 80a1620:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a162c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1630:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a163c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1644:	429d      	cmp	r5, r3
 80a1646:	bf08      	it	eq
 80a1648:	4296      	cmpeq	r6, r2
 80a164a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a164e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1652:	d202      	bcs.n	80a165a <__aeabi_ddiv+0x6e>
 80a1654:	085b      	lsrs	r3, r3, #1
 80a1656:	ea4f 0232 	mov.w	r2, r2, rrx
 80a165a:	1ab6      	subs	r6, r6, r2
 80a165c:	eb65 0503 	sbc.w	r5, r5, r3
 80a1660:	085b      	lsrs	r3, r3, #1
 80a1662:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a166a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a166e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1672:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1676:	bf22      	ittt	cs
 80a1678:	1ab6      	subcs	r6, r6, r2
 80a167a:	4675      	movcs	r5, lr
 80a167c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1680:	085b      	lsrs	r3, r3, #1
 80a1682:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1686:	ebb6 0e02 	subs.w	lr, r6, r2
 80a168a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a168e:	bf22      	ittt	cs
 80a1690:	1ab6      	subcs	r6, r6, r2
 80a1692:	4675      	movcs	r5, lr
 80a1694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1698:	085b      	lsrs	r3, r3, #1
 80a169a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a169e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a16a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a16a6:	bf22      	ittt	cs
 80a16a8:	1ab6      	subcs	r6, r6, r2
 80a16aa:	4675      	movcs	r5, lr
 80a16ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a16b0:	085b      	lsrs	r3, r3, #1
 80a16b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a16b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a16ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a16be:	bf22      	ittt	cs
 80a16c0:	1ab6      	subcs	r6, r6, r2
 80a16c2:	4675      	movcs	r5, lr
 80a16c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a16c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a16cc:	d018      	beq.n	80a1700 <__aeabi_ddiv+0x114>
 80a16ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a16d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a16d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a16da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a16de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a16e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a16e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a16ea:	d1c0      	bne.n	80a166e <__aeabi_ddiv+0x82>
 80a16ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a16f0:	d10b      	bne.n	80a170a <__aeabi_ddiv+0x11e>
 80a16f2:	ea41 0100 	orr.w	r1, r1, r0
 80a16f6:	f04f 0000 	mov.w	r0, #0
 80a16fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a16fe:	e7b6      	b.n	80a166e <__aeabi_ddiv+0x82>
 80a1700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1704:	bf04      	itt	eq
 80a1706:	4301      	orreq	r1, r0
 80a1708:	2000      	moveq	r0, #0
 80a170a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a170e:	bf88      	it	hi
 80a1710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1714:	f63f aeaf 	bhi.w	80a1476 <__aeabi_dmul+0xde>
 80a1718:	ebb5 0c03 	subs.w	ip, r5, r3
 80a171c:	bf04      	itt	eq
 80a171e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1726:	f150 0000 	adcs.w	r0, r0, #0
 80a172a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a172e:	bd70      	pop	{r4, r5, r6, pc}
 80a1730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a173c:	bfc2      	ittt	gt
 80a173e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1746:	bd70      	popgt	{r4, r5, r6, pc}
 80a1748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a174c:	f04f 0e00 	mov.w	lr, #0
 80a1750:	3c01      	subs	r4, #1
 80a1752:	e690      	b.n	80a1476 <__aeabi_dmul+0xde>
 80a1754:	ea45 0e06 	orr.w	lr, r5, r6
 80a1758:	e68d      	b.n	80a1476 <__aeabi_dmul+0xde>
 80a175a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a175e:	ea94 0f0c 	teq	r4, ip
 80a1762:	bf08      	it	eq
 80a1764:	ea95 0f0c 	teqeq	r5, ip
 80a1768:	f43f af3b 	beq.w	80a15e2 <__aeabi_dmul+0x24a>
 80a176c:	ea94 0f0c 	teq	r4, ip
 80a1770:	d10a      	bne.n	80a1788 <__aeabi_ddiv+0x19c>
 80a1772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1776:	f47f af34 	bne.w	80a15e2 <__aeabi_dmul+0x24a>
 80a177a:	ea95 0f0c 	teq	r5, ip
 80a177e:	f47f af25 	bne.w	80a15cc <__aeabi_dmul+0x234>
 80a1782:	4610      	mov	r0, r2
 80a1784:	4619      	mov	r1, r3
 80a1786:	e72c      	b.n	80a15e2 <__aeabi_dmul+0x24a>
 80a1788:	ea95 0f0c 	teq	r5, ip
 80a178c:	d106      	bne.n	80a179c <__aeabi_ddiv+0x1b0>
 80a178e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1792:	f43f aefd 	beq.w	80a1590 <__aeabi_dmul+0x1f8>
 80a1796:	4610      	mov	r0, r2
 80a1798:	4619      	mov	r1, r3
 80a179a:	e722      	b.n	80a15e2 <__aeabi_dmul+0x24a>
 80a179c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a17a0:	bf18      	it	ne
 80a17a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a17a6:	f47f aec5 	bne.w	80a1534 <__aeabi_dmul+0x19c>
 80a17aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a17ae:	f47f af0d 	bne.w	80a15cc <__aeabi_dmul+0x234>
 80a17b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a17b6:	f47f aeeb 	bne.w	80a1590 <__aeabi_dmul+0x1f8>
 80a17ba:	e712      	b.n	80a15e2 <__aeabi_dmul+0x24a>

080a17bc <__gedf2>:
 80a17bc:	f04f 3cff 	mov.w	ip, #4294967295
 80a17c0:	e006      	b.n	80a17d0 <__cmpdf2+0x4>
 80a17c2:	bf00      	nop

080a17c4 <__ledf2>:
 80a17c4:	f04f 0c01 	mov.w	ip, #1
 80a17c8:	e002      	b.n	80a17d0 <__cmpdf2+0x4>
 80a17ca:	bf00      	nop

080a17cc <__cmpdf2>:
 80a17cc:	f04f 0c01 	mov.w	ip, #1
 80a17d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a17d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a17d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a17dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a17e0:	bf18      	it	ne
 80a17e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a17e6:	d01b      	beq.n	80a1820 <__cmpdf2+0x54>
 80a17e8:	b001      	add	sp, #4
 80a17ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a17ee:	bf0c      	ite	eq
 80a17f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a17f4:	ea91 0f03 	teqne	r1, r3
 80a17f8:	bf02      	ittt	eq
 80a17fa:	ea90 0f02 	teqeq	r0, r2
 80a17fe:	2000      	moveq	r0, #0
 80a1800:	4770      	bxeq	lr
 80a1802:	f110 0f00 	cmn.w	r0, #0
 80a1806:	ea91 0f03 	teq	r1, r3
 80a180a:	bf58      	it	pl
 80a180c:	4299      	cmppl	r1, r3
 80a180e:	bf08      	it	eq
 80a1810:	4290      	cmpeq	r0, r2
 80a1812:	bf2c      	ite	cs
 80a1814:	17d8      	asrcs	r0, r3, #31
 80a1816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a181a:	f040 0001 	orr.w	r0, r0, #1
 80a181e:	4770      	bx	lr
 80a1820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1828:	d102      	bne.n	80a1830 <__cmpdf2+0x64>
 80a182a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a182e:	d107      	bne.n	80a1840 <__cmpdf2+0x74>
 80a1830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1838:	d1d6      	bne.n	80a17e8 <__cmpdf2+0x1c>
 80a183a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a183e:	d0d3      	beq.n	80a17e8 <__cmpdf2+0x1c>
 80a1840:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1844:	4770      	bx	lr
 80a1846:	bf00      	nop

080a1848 <__aeabi_cdrcmple>:
 80a1848:	4684      	mov	ip, r0
 80a184a:	4610      	mov	r0, r2
 80a184c:	4662      	mov	r2, ip
 80a184e:	468c      	mov	ip, r1
 80a1850:	4619      	mov	r1, r3
 80a1852:	4663      	mov	r3, ip
 80a1854:	e000      	b.n	80a1858 <__aeabi_cdcmpeq>
 80a1856:	bf00      	nop

080a1858 <__aeabi_cdcmpeq>:
 80a1858:	b501      	push	{r0, lr}
 80a185a:	f7ff ffb7 	bl	80a17cc <__cmpdf2>
 80a185e:	2800      	cmp	r0, #0
 80a1860:	bf48      	it	mi
 80a1862:	f110 0f00 	cmnmi.w	r0, #0
 80a1866:	bd01      	pop	{r0, pc}

080a1868 <__aeabi_dcmpeq>:
 80a1868:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a186c:	f7ff fff4 	bl	80a1858 <__aeabi_cdcmpeq>
 80a1870:	bf0c      	ite	eq
 80a1872:	2001      	moveq	r0, #1
 80a1874:	2000      	movne	r0, #0
 80a1876:	f85d fb08 	ldr.w	pc, [sp], #8
 80a187a:	bf00      	nop

080a187c <__aeabi_dcmplt>:
 80a187c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1880:	f7ff ffea 	bl	80a1858 <__aeabi_cdcmpeq>
 80a1884:	bf34      	ite	cc
 80a1886:	2001      	movcc	r0, #1
 80a1888:	2000      	movcs	r0, #0
 80a188a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a188e:	bf00      	nop

080a1890 <__aeabi_dcmple>:
 80a1890:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1894:	f7ff ffe0 	bl	80a1858 <__aeabi_cdcmpeq>
 80a1898:	bf94      	ite	ls
 80a189a:	2001      	movls	r0, #1
 80a189c:	2000      	movhi	r0, #0
 80a189e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a18a2:	bf00      	nop

080a18a4 <__aeabi_dcmpge>:
 80a18a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a18a8:	f7ff ffce 	bl	80a1848 <__aeabi_cdrcmple>
 80a18ac:	bf94      	ite	ls
 80a18ae:	2001      	movls	r0, #1
 80a18b0:	2000      	movhi	r0, #0
 80a18b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a18b6:	bf00      	nop

080a18b8 <__aeabi_dcmpgt>:
 80a18b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a18bc:	f7ff ffc4 	bl	80a1848 <__aeabi_cdrcmple>
 80a18c0:	bf34      	ite	cc
 80a18c2:	2001      	movcc	r0, #1
 80a18c4:	2000      	movcs	r0, #0
 80a18c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a18ca:	bf00      	nop

080a18cc <__aeabi_dcmpun>:
 80a18cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a18d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a18d4:	d102      	bne.n	80a18dc <__aeabi_dcmpun+0x10>
 80a18d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a18da:	d10a      	bne.n	80a18f2 <__aeabi_dcmpun+0x26>
 80a18dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a18e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a18e4:	d102      	bne.n	80a18ec <__aeabi_dcmpun+0x20>
 80a18e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a18ea:	d102      	bne.n	80a18f2 <__aeabi_dcmpun+0x26>
 80a18ec:	f04f 0000 	mov.w	r0, #0
 80a18f0:	4770      	bx	lr
 80a18f2:	f04f 0001 	mov.w	r0, #1
 80a18f6:	4770      	bx	lr

080a18f8 <__aeabi_d2iz>:
 80a18f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a18fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1900:	d215      	bcs.n	80a192e <__aeabi_d2iz+0x36>
 80a1902:	d511      	bpl.n	80a1928 <__aeabi_d2iz+0x30>
 80a1904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a190c:	d912      	bls.n	80a1934 <__aeabi_d2iz+0x3c>
 80a190e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a191a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a191e:	fa23 f002 	lsr.w	r0, r3, r2
 80a1922:	bf18      	it	ne
 80a1924:	4240      	negne	r0, r0
 80a1926:	4770      	bx	lr
 80a1928:	f04f 0000 	mov.w	r0, #0
 80a192c:	4770      	bx	lr
 80a192e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a1932:	d105      	bne.n	80a1940 <__aeabi_d2iz+0x48>
 80a1934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a1938:	bf08      	it	eq
 80a193a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a193e:	4770      	bx	lr
 80a1940:	f04f 0000 	mov.w	r0, #0
 80a1944:	4770      	bx	lr
 80a1946:	bf00      	nop

080a1948 <__aeabi_d2uiz>:
 80a1948:	004a      	lsls	r2, r1, #1
 80a194a:	d211      	bcs.n	80a1970 <__aeabi_d2uiz+0x28>
 80a194c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a1950:	d211      	bcs.n	80a1976 <__aeabi_d2uiz+0x2e>
 80a1952:	d50d      	bpl.n	80a1970 <__aeabi_d2uiz+0x28>
 80a1954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a1958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a195c:	d40e      	bmi.n	80a197c <__aeabi_d2uiz+0x34>
 80a195e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a196a:	fa23 f002 	lsr.w	r0, r3, r2
 80a196e:	4770      	bx	lr
 80a1970:	f04f 0000 	mov.w	r0, #0
 80a1974:	4770      	bx	lr
 80a1976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a197a:	d102      	bne.n	80a1982 <__aeabi_d2uiz+0x3a>
 80a197c:	f04f 30ff 	mov.w	r0, #4294967295
 80a1980:	4770      	bx	lr
 80a1982:	f04f 0000 	mov.w	r0, #0
 80a1986:	4770      	bx	lr

080a1988 <atexit>:
 80a1988:	2300      	movs	r3, #0
 80a198a:	4601      	mov	r1, r0
 80a198c:	461a      	mov	r2, r3
 80a198e:	4618      	mov	r0, r3
 80a1990:	f000 b84c 	b.w	80a1a2c <__register_exitproc>

080a1994 <memcpy>:
 80a1994:	440a      	add	r2, r1
 80a1996:	4291      	cmp	r1, r2
 80a1998:	f100 33ff 	add.w	r3, r0, #4294967295
 80a199c:	d100      	bne.n	80a19a0 <memcpy+0xc>
 80a199e:	4770      	bx	lr
 80a19a0:	b510      	push	{r4, lr}
 80a19a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a19a6:	4291      	cmp	r1, r2
 80a19a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a19ac:	d1f9      	bne.n	80a19a2 <memcpy+0xe>
 80a19ae:	bd10      	pop	{r4, pc}

080a19b0 <memset>:
 80a19b0:	4603      	mov	r3, r0
 80a19b2:	4402      	add	r2, r0
 80a19b4:	4293      	cmp	r3, r2
 80a19b6:	d100      	bne.n	80a19ba <memset+0xa>
 80a19b8:	4770      	bx	lr
 80a19ba:	f803 1b01 	strb.w	r1, [r3], #1
 80a19be:	e7f9      	b.n	80a19b4 <memset+0x4>

080a19c0 <srand>:
 80a19c0:	b538      	push	{r3, r4, r5, lr}
 80a19c2:	4b10      	ldr	r3, [pc, #64]	; (80a1a04 <srand+0x44>)
 80a19c4:	4604      	mov	r4, r0
 80a19c6:	681d      	ldr	r5, [r3, #0]
 80a19c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a19ca:	b9b3      	cbnz	r3, 80a19fa <srand+0x3a>
 80a19cc:	2018      	movs	r0, #24
 80a19ce:	f7fe fd69 	bl	80a04a4 <malloc>
 80a19d2:	4602      	mov	r2, r0
 80a19d4:	63a8      	str	r0, [r5, #56]	; 0x38
 80a19d6:	b920      	cbnz	r0, 80a19e2 <srand+0x22>
 80a19d8:	2142      	movs	r1, #66	; 0x42
 80a19da:	4b0b      	ldr	r3, [pc, #44]	; (80a1a08 <srand+0x48>)
 80a19dc:	480b      	ldr	r0, [pc, #44]	; (80a1a0c <srand+0x4c>)
 80a19de:	f7fe fd71 	bl	80a04c4 <__assert_func>
 80a19e2:	490b      	ldr	r1, [pc, #44]	; (80a1a10 <srand+0x50>)
 80a19e4:	4b0b      	ldr	r3, [pc, #44]	; (80a1a14 <srand+0x54>)
 80a19e6:	e9c0 1300 	strd	r1, r3, [r0]
 80a19ea:	4b0b      	ldr	r3, [pc, #44]	; (80a1a18 <srand+0x58>)
 80a19ec:	2100      	movs	r1, #0
 80a19ee:	6083      	str	r3, [r0, #8]
 80a19f0:	230b      	movs	r3, #11
 80a19f2:	8183      	strh	r3, [r0, #12]
 80a19f4:	2001      	movs	r0, #1
 80a19f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a19fa:	2200      	movs	r2, #0
 80a19fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a19fe:	611c      	str	r4, [r3, #16]
 80a1a00:	615a      	str	r2, [r3, #20]
 80a1a02:	bd38      	pop	{r3, r4, r5, pc}
 80a1a04:	20000008 	.word	0x20000008
 80a1a08:	080a1c61 	.word	0x080a1c61
 80a1a0c:	080a1c78 	.word	0x080a1c78
 80a1a10:	abcd330e 	.word	0xabcd330e
 80a1a14:	e66d1234 	.word	0xe66d1234
 80a1a18:	0005deec 	.word	0x0005deec

080a1a1c <strlen>:
 80a1a1c:	4603      	mov	r3, r0
 80a1a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a22:	2a00      	cmp	r2, #0
 80a1a24:	d1fb      	bne.n	80a1a1e <strlen+0x2>
 80a1a26:	1a18      	subs	r0, r3, r0
 80a1a28:	3801      	subs	r0, #1
 80a1a2a:	4770      	bx	lr

080a1a2c <__register_exitproc>:
 80a1a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1a30:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a1ae0 <__register_exitproc+0xb4>
 80a1a34:	4606      	mov	r6, r0
 80a1a36:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a3a:	461f      	mov	r7, r3
 80a1a3c:	460d      	mov	r5, r1
 80a1a3e:	4691      	mov	r9, r2
 80a1a40:	f000 f858 	bl	80a1af4 <__retarget_lock_acquire_recursive>
 80a1a44:	4b27      	ldr	r3, [pc, #156]	; (80a1ae4 <__register_exitproc+0xb8>)
 80a1a46:	681c      	ldr	r4, [r3, #0]
 80a1a48:	b934      	cbnz	r4, 80a1a58 <__register_exitproc+0x2c>
 80a1a4a:	4c27      	ldr	r4, [pc, #156]	; (80a1ae8 <__register_exitproc+0xbc>)
 80a1a4c:	601c      	str	r4, [r3, #0]
 80a1a4e:	4b27      	ldr	r3, [pc, #156]	; (80a1aec <__register_exitproc+0xc0>)
 80a1a50:	b113      	cbz	r3, 80a1a58 <__register_exitproc+0x2c>
 80a1a52:	681b      	ldr	r3, [r3, #0]
 80a1a54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1a58:	6863      	ldr	r3, [r4, #4]
 80a1a5a:	2b1f      	cmp	r3, #31
 80a1a5c:	dd07      	ble.n	80a1a6e <__register_exitproc+0x42>
 80a1a5e:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a62:	f000 f849 	bl	80a1af8 <__retarget_lock_release_recursive>
 80a1a66:	f04f 30ff 	mov.w	r0, #4294967295
 80a1a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1a6e:	b35e      	cbz	r6, 80a1ac8 <__register_exitproc+0x9c>
 80a1a70:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1a74:	b988      	cbnz	r0, 80a1a9a <__register_exitproc+0x6e>
 80a1a76:	4b1e      	ldr	r3, [pc, #120]	; (80a1af0 <__register_exitproc+0xc4>)
 80a1a78:	b923      	cbnz	r3, 80a1a84 <__register_exitproc+0x58>
 80a1a7a:	f8d8 0000 	ldr.w	r0, [r8]
 80a1a7e:	f000 f83a 	bl	80a1af6 <__retarget_lock_release>
 80a1a82:	e7f0      	b.n	80a1a66 <__register_exitproc+0x3a>
 80a1a84:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1a88:	f7fe fd0c 	bl	80a04a4 <malloc>
 80a1a8c:	2800      	cmp	r0, #0
 80a1a8e:	d0f4      	beq.n	80a1a7a <__register_exitproc+0x4e>
 80a1a90:	2300      	movs	r3, #0
 80a1a92:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1a96:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1a9a:	2201      	movs	r2, #1
 80a1a9c:	6863      	ldr	r3, [r4, #4]
 80a1a9e:	2e02      	cmp	r6, #2
 80a1aa0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1aa4:	fa02 f203 	lsl.w	r2, r2, r3
 80a1aa8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1aac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1ab0:	ea43 0302 	orr.w	r3, r3, r2
 80a1ab4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1ab8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1abc:	bf02      	ittt	eq
 80a1abe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1ac2:	4313      	orreq	r3, r2
 80a1ac4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a1ac8:	6863      	ldr	r3, [r4, #4]
 80a1aca:	f8d8 0000 	ldr.w	r0, [r8]
 80a1ace:	1c5a      	adds	r2, r3, #1
 80a1ad0:	3302      	adds	r3, #2
 80a1ad2:	6062      	str	r2, [r4, #4]
 80a1ad4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1ad8:	f000 f80e 	bl	80a1af8 <__retarget_lock_release_recursive>
 80a1adc:	2000      	movs	r0, #0
 80a1ade:	e7c4      	b.n	80a1a6a <__register_exitproc+0x3e>
 80a1ae0:	2000006c 	.word	0x2000006c
 80a1ae4:	200004d4 	.word	0x200004d4
 80a1ae8:	20000448 	.word	0x20000448
 80a1aec:	00000000 	.word	0x00000000
 80a1af0:	080a04a5 	.word	0x080a04a5

080a1af4 <__retarget_lock_acquire_recursive>:
 80a1af4:	4770      	bx	lr

080a1af6 <__retarget_lock_release>:
 80a1af6:	4770      	bx	lr

080a1af8 <__retarget_lock_release_recursive>:
 80a1af8:	4770      	bx	lr

080a1afa <link_code_end>:
	...

080a1afc <dynalib_user>:
 80a1afc:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a1b0c:	0000 0000 6574 706d 2c00 0020 6420 6765     ....temp., . deg
 80a1b1c:	0043 616e 006e 6e69 0066 766f 0066 002e     C.nan.inf.ovf...
 80a1b2c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
 80a1b3c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a1b4c <_ZTV9IPAddress>:
	...
 80a1b54:	0913 080a 0911 080a 0945 080a               ........E...

080a1b60 <_ZTV9USBSerial>:
	...
 80a1b68:	09df 080a 0a45 080a 0a1d 080a 0529 080a     ....E.......)...
 80a1b78:	0a0f 080a 09e1 080a 09f1 080a 0a3f 080a     ............?...
 80a1b88:	0a01 080a 09d9 080a                         ........

080a1b90 <_ZTV11USARTSerial>:
	...
 80a1b98:	0b6d 080a 0bd5 080a 0bb1 080a 0529 080a     m...........)...
 80a1ba8:	0b81 080a 0b9d 080a 0b8f 080a 0bab 080a     ................
 80a1bb8:	0b6f 080a 0b73 080a                         o...s...

080a1bc0 <_ZTV7TwoWire>:
	...
 80a1bc8:	0c0d 080a 0c57 080a 0c2f 080a 0c0f 080a     ....W.../.......
 80a1bd8:	0c37 080a 0c3f 080a 0c47 080a 0c4f 080a     7...?...G...O...

080a1be8 <_ZTVN5spark9WiFiClassE>:
	...
 80a1bf0:	0d2b 080a 0d21 080a 0d17 080a 0c89 080a     +...!...........
 80a1c00:	0d0b 080a 0cff 080a 0d89 080a 0d91 080a     ................
 80a1c10:	0cf3 080a 0ceb 080a 0ce1 080a 0cd7 080a     ................
 80a1c20:	0c93 080a                                   ....

080a1c24 <_ZTVN5spark12NetworkClassE>:
	...
 80a1c2c:	0d49 080a 0d53 080a 0d5d 080a 0d67 080a     I...S...]...g...
 80a1c3c:	0d71 080a 0d7d 080a 0d89 080a 0d91 080a     q...}...........
 80a1c4c:	0d99 080a 0da5 080a 0dad 080a 0db7 080a     ................
 80a1c5c:	0dc1 080a                                   ....

080a1c60 <_ZSt7nothrow>:
 80a1c60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a1c70:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a1c80:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a1c90:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a1ca0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a1cb0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a1cc0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a1cd0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a1ce0:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a1cf0:	646e 632e                                    nd.c.

080a1cf5 <link_const_variable_data_end>:
 80a1cf5:	00          	.byte	0x00
	...

080a1cf8 <link_constructors_location>:
 80a1cf8:	080a0505 	.word	0x080a0505
 80a1cfc:	080a0779 	.word	0x080a0779
 80a1d00:	080a0789 	.word	0x080a0789
 80a1d04:	080a07a5 	.word	0x080a07a5
 80a1d08:	080a0d35 	.word	0x080a0d35
 80a1d0c:	080a0e11 	.word	0x080a0e11
 80a1d10:	080a0f89 	.word	0x080a0f89

080a1d14 <link_constructors_end>:
	...
