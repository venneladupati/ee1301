
c:/Users/venne/OneDrive/Documents/GitHub/ee1301/Iot2/iot2_5/target/3.3.0/photon/iot2_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001184  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a11a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a11a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000046c  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1214  080a1214  00021214  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a123c  080a123c  0002123c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0008d2c4  00000000  00000000  00021240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000d075  00000000  00000000  000ae504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0001189a  00000000  00000000  000bb579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001aa8  00000000  00000000  000cce13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003ac0  00000000  00000000  000ce8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000237fb  00000000  00000000  000d237b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002284e  00000000  00000000  000f5b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000afc3b  00000000  00000000  001183c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004128  00000000  00000000  001c8000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ff03 	bl	80a0e38 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ff0b 	bl	80a0e54 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a11a4 	.word	0x080a11a4
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	200004d9 	.word	0x200004d9
 80a0058:	200004d9 	.word	0x200004d9

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fb17 	bl	80a0690 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1180 	.word	0x080a1180
 80a0080:	080a11a0 	.word	0x080a11a0

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f829 	bl	80a00e0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bab5 	b.w	80a0600 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 b9dd 	b.w	80a0454 <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f000 b9e3 	b.w	80a0464 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

// Having declared these variables, let's move on to the setup function.
// The setup function is a standard part of any microcontroller program.
// It runs only once when the device boots up or is reset.

void setup() {
 80a00b0:	b508      	push	{r3, lr}

  // We are going to tell our device that D0 and D7 (which we named led1 and led2 respectively) are going to be output
  // (That means that we will be sending voltage to them, rather than monitoring voltage that comes from them)

  // It's important you do this here, inside the setup() function rather than outside it or in the loop function.
    pinMode(ButtonPIN, INPUT_PULLDOWN);
 80a00b2:	4b09      	ldr	r3, [pc, #36]	; (80a00d8 <setup+0x28>)
 80a00b4:	2103      	movs	r1, #3
 80a00b6:	8818      	ldrh	r0, [r3, #0]
 80a00b8:	f000 fdf0 	bl	80a0c9c <pinMode>
    pinMode(led1, OUTPUT);
 80a00bc:	4b07      	ldr	r3, [pc, #28]	; (80a00dc <setup+0x2c>)
 80a00be:	2101      	movs	r1, #1
 80a00c0:	8818      	ldrh	r0, [r3, #0]
 80a00c2:	f000 fdeb 	bl	80a0c9c <pinMode>
    Serial.begin(9600);
 80a00c6:	f000 fbe5 	bl	80a0894 <_Z16_fetch_usbserialv>

}
 80a00ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.begin(9600);
 80a00ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00d2:	f000 bbc5 	b.w	80a0860 <_ZN9USBSerial5beginEl>
 80a00d6:	bf00      	nop
 80a00d8:	20000000 	.word	0x20000000
 80a00dc:	20000074 	.word	0x20000074

080a00e0 <loop>:

// Next we have the loop function, the other essential part of a microcontroller program.
// This routine gets repeated over and over, as quickly as possible and as many times as possible, after the setup function is called.
// Note: Code that blocks for too long (like more than 5 seconds), can make weird things happen (like dropping the network connection).  The built-in delay function shown below safely interleaves required background activity, so arbitrarily long delays can safely be done if you need them.

void loop() {
 80a00e0:	b508      	push	{r3, lr}
  // To blink the LED, first we'll turn it on...

    ButtonOut = digitalRead(ButtonPIN);
 80a00e2:	4b09      	ldr	r3, [pc, #36]	; (80a0108 <loop+0x28>)
 80a00e4:	8818      	ldrh	r0, [r3, #0]
 80a00e6:	f000 fe03 	bl	80a0cf0 <digitalRead>
 80a00ea:	1e01      	subs	r1, r0, #0
 80a00ec:	bf14      	ite	ne
 80a00ee:	2201      	movne	r2, #1
 80a00f0:	2200      	moveq	r2, #0
 80a00f2:	4b06      	ldr	r3, [pc, #24]	; (80a010c <loop+0x2c>)

    if(ButtonOut == HIGH) {
      digitalWrite(led1, HIGH);
 80a00f4:	bf18      	it	ne
 80a00f6:	2101      	movne	r1, #1
    ButtonOut = digitalRead(ButtonPIN);
 80a00f8:	701a      	strb	r2, [r3, #0]
    if(ButtonOut == HIGH) {
 80a00fa:	4b05      	ldr	r3, [pc, #20]	; (80a0110 <loop+0x30>)
    } 
    else {
      digitalWrite(led1, LOW);
 80a00fc:	8818      	ldrh	r0, [r3, #0]
    }

  
 80a00fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      digitalWrite(led1, LOW);
 80a0102:	f000 bddc 	b.w	80a0cbe <digitalWrite>
 80a0106:	bf00      	nop
 80a0108:	20000000 	.word	0x20000000
 80a010c:	20000070 	.word	0x20000070
 80a0110:	20000074 	.word	0x20000074

080a0114 <_GLOBAL__sub_I_ButtonPIN>:
 80a0114:	b508      	push	{r3, lr}
    int scan(void (*handler)(WiFiAccessPoint* ap, T* instance), T* instance) {
        return scan((wlan_scan_result_t)handler, (void*)instance);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a0116:	2003      	movs	r0, #3
 80a0118:	f000 f910 	bl	80a033c <wlan_select_antenna>
 80a011c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0120:	2003      	movs	r0, #3
 80a0122:	f000 b90b 	b.w	80a033c <wlan_select_antenna>
	...

080a0128 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0128:	b508      	push	{r3, lr}
 80a012a:	4b02      	ldr	r3, [pc, #8]	; (80a0134 <HAL_Pin_Mode+0xc>)
 80a012c:	681b      	ldr	r3, [r3, #0]
 80a012e:	689b      	ldr	r3, [r3, #8]
 80a0130:	9301      	str	r3, [sp, #4]
 80a0132:	bd08      	pop	{r3, pc}
 80a0134:	080601b0 	.word	0x080601b0

080a0138 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0138:	b508      	push	{r3, lr}
 80a013a:	4b02      	ldr	r3, [pc, #8]	; (80a0144 <HAL_Get_Pin_Mode+0xc>)
 80a013c:	681b      	ldr	r3, [r3, #0]
 80a013e:	68db      	ldr	r3, [r3, #12]
 80a0140:	9301      	str	r3, [sp, #4]
 80a0142:	bd08      	pop	{r3, pc}
 80a0144:	080601b0 	.word	0x080601b0

080a0148 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0148:	b508      	push	{r3, lr}
 80a014a:	4b02      	ldr	r3, [pc, #8]	; (80a0154 <HAL_GPIO_Write+0xc>)
 80a014c:	681b      	ldr	r3, [r3, #0]
 80a014e:	691b      	ldr	r3, [r3, #16]
 80a0150:	9301      	str	r3, [sp, #4]
 80a0152:	bd08      	pop	{r3, pc}
 80a0154:	080601b0 	.word	0x080601b0

080a0158 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0158:	b508      	push	{r3, lr}
 80a015a:	4b02      	ldr	r3, [pc, #8]	; (80a0164 <HAL_GPIO_Read+0xc>)
 80a015c:	681b      	ldr	r3, [r3, #0]
 80a015e:	695b      	ldr	r3, [r3, #20]
 80a0160:	9301      	str	r3, [sp, #4]
 80a0162:	bd08      	pop	{r3, pc}
 80a0164:	080601b0 	.word	0x080601b0

080a0168 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0168:	b508      	push	{r3, lr}
 80a016a:	4b02      	ldr	r3, [pc, #8]	; (80a0174 <HAL_RNG_GetRandomNumber+0xc>)
 80a016c:	681b      	ldr	r3, [r3, #0]
 80a016e:	685b      	ldr	r3, [r3, #4]
 80a0170:	9301      	str	r3, [sp, #4]
 80a0172:	bd08      	pop	{r3, pc}
 80a0174:	0806019c 	.word	0x0806019c

080a0178 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0178:	b508      	push	{r3, lr}
 80a017a:	4b02      	ldr	r3, [pc, #8]	; (80a0184 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a017c:	681b      	ldr	r3, [r3, #0]
 80a017e:	695b      	ldr	r3, [r3, #20]
 80a0180:	9301      	str	r3, [sp, #4]
 80a0182:	bd08      	pop	{r3, pc}
 80a0184:	0806019c 	.word	0x0806019c

080a0188 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0188:	b508      	push	{r3, lr}
 80a018a:	4b02      	ldr	r3, [pc, #8]	; (80a0194 <os_mutex_recursive_create+0xc>)
 80a018c:	681b      	ldr	r3, [r3, #0]
 80a018e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0190:	9301      	str	r3, [sp, #4]
 80a0192:	bd08      	pop	{r3, pc}
 80a0194:	080601d0 	.word	0x080601d0

080a0198 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0198:	b508      	push	{r3, lr}
 80a019a:	4b02      	ldr	r3, [pc, #8]	; (80a01a4 <os_mutex_recursive_destroy+0xc>)
 80a019c:	681b      	ldr	r3, [r3, #0]
 80a019e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a01a0:	9301      	str	r3, [sp, #4]
 80a01a2:	bd08      	pop	{r3, pc}
 80a01a4:	080601d0 	.word	0x080601d0

080a01a8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a01a8:	b508      	push	{r3, lr}
 80a01aa:	4b02      	ldr	r3, [pc, #8]	; (80a01b4 <hal_usart_write+0xc>)
 80a01ac:	681b      	ldr	r3, [r3, #0]
 80a01ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01b0:	9301      	str	r3, [sp, #4]
 80a01b2:	bd08      	pop	{r3, pc}
 80a01b4:	080601c4 	.word	0x080601c4

080a01b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a01b8:	b508      	push	{r3, lr}
 80a01ba:	4b02      	ldr	r3, [pc, #8]	; (80a01c4 <hal_usart_available+0xc>)
 80a01bc:	681b      	ldr	r3, [r3, #0]
 80a01be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a01c0:	9301      	str	r3, [sp, #4]
 80a01c2:	bd08      	pop	{r3, pc}
 80a01c4:	080601c4 	.word	0x080601c4

080a01c8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a01c8:	b508      	push	{r3, lr}
 80a01ca:	4b02      	ldr	r3, [pc, #8]	; (80a01d4 <hal_usart_read+0xc>)
 80a01cc:	681b      	ldr	r3, [r3, #0]
 80a01ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a01d0:	9301      	str	r3, [sp, #4]
 80a01d2:	bd08      	pop	{r3, pc}
 80a01d4:	080601c4 	.word	0x080601c4

080a01d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a01d8:	b508      	push	{r3, lr}
 80a01da:	4b02      	ldr	r3, [pc, #8]	; (80a01e4 <hal_usart_peek+0xc>)
 80a01dc:	681b      	ldr	r3, [r3, #0]
 80a01de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a01e0:	9301      	str	r3, [sp, #4]
 80a01e2:	bd08      	pop	{r3, pc}
 80a01e4:	080601c4 	.word	0x080601c4

080a01e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a01e8:	b508      	push	{r3, lr}
 80a01ea:	4b02      	ldr	r3, [pc, #8]	; (80a01f4 <hal_usart_flush+0xc>)
 80a01ec:	681b      	ldr	r3, [r3, #0]
 80a01ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a01f0:	9301      	str	r3, [sp, #4]
 80a01f2:	bd08      	pop	{r3, pc}
 80a01f4:	080601c4 	.word	0x080601c4

080a01f8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a01f8:	b508      	push	{r3, lr}
 80a01fa:	4b02      	ldr	r3, [pc, #8]	; (80a0204 <hal_usart_is_enabled+0xc>)
 80a01fc:	681b      	ldr	r3, [r3, #0]
 80a01fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0200:	9301      	str	r3, [sp, #4]
 80a0202:	bd08      	pop	{r3, pc}
 80a0204:	080601c4 	.word	0x080601c4

080a0208 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0208:	b508      	push	{r3, lr}
 80a020a:	4b02      	ldr	r3, [pc, #8]	; (80a0214 <hal_usart_available_data_for_write+0xc>)
 80a020c:	681b      	ldr	r3, [r3, #0]
 80a020e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0210:	9301      	str	r3, [sp, #4]
 80a0212:	bd08      	pop	{r3, pc}
 80a0214:	080601c4 	.word	0x080601c4

080a0218 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a0218:	b508      	push	{r3, lr}
 80a021a:	4b02      	ldr	r3, [pc, #8]	; (80a0224 <hal_usart_init_ex+0xc>)
 80a021c:	681b      	ldr	r3, [r3, #0]
 80a021e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0220:	9301      	str	r3, [sp, #4]
 80a0222:	bd08      	pop	{r3, pc}
 80a0224:	080601c4 	.word	0x080601c4

080a0228 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0228:	b508      	push	{r3, lr}
 80a022a:	4b02      	ldr	r3, [pc, #8]	; (80a0234 <hal_i2c_write+0xc>)
 80a022c:	681b      	ldr	r3, [r3, #0]
 80a022e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0230:	9301      	str	r3, [sp, #4]
 80a0232:	bd08      	pop	{r3, pc}
 80a0234:	080601ac 	.word	0x080601ac

080a0238 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0238:	b508      	push	{r3, lr}
 80a023a:	4b02      	ldr	r3, [pc, #8]	; (80a0244 <hal_i2c_available+0xc>)
 80a023c:	681b      	ldr	r3, [r3, #0]
 80a023e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0240:	9301      	str	r3, [sp, #4]
 80a0242:	bd08      	pop	{r3, pc}
 80a0244:	080601ac 	.word	0x080601ac

080a0248 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0248:	b508      	push	{r3, lr}
 80a024a:	4b02      	ldr	r3, [pc, #8]	; (80a0254 <hal_i2c_read+0xc>)
 80a024c:	681b      	ldr	r3, [r3, #0]
 80a024e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0250:	9301      	str	r3, [sp, #4]
 80a0252:	bd08      	pop	{r3, pc}
 80a0254:	080601ac 	.word	0x080601ac

080a0258 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0258:	b508      	push	{r3, lr}
 80a025a:	4b02      	ldr	r3, [pc, #8]	; (80a0264 <hal_i2c_peek+0xc>)
 80a025c:	681b      	ldr	r3, [r3, #0]
 80a025e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	bd08      	pop	{r3, pc}
 80a0264:	080601ac 	.word	0x080601ac

080a0268 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0268:	b508      	push	{r3, lr}
 80a026a:	4b02      	ldr	r3, [pc, #8]	; (80a0274 <hal_i2c_flush+0xc>)
 80a026c:	681b      	ldr	r3, [r3, #0]
 80a026e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0270:	9301      	str	r3, [sp, #4]
 80a0272:	bd08      	pop	{r3, pc}
 80a0274:	080601ac 	.word	0x080601ac

080a0278 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0278:	b508      	push	{r3, lr}
 80a027a:	4b02      	ldr	r3, [pc, #8]	; (80a0284 <hal_i2c_is_enabled+0xc>)
 80a027c:	681b      	ldr	r3, [r3, #0]
 80a027e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0280:	9301      	str	r3, [sp, #4]
 80a0282:	bd08      	pop	{r3, pc}
 80a0284:	080601ac 	.word	0x080601ac

080a0288 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0288:	b508      	push	{r3, lr}
 80a028a:	4b03      	ldr	r3, [pc, #12]	; (80a0298 <hal_i2c_init+0x10>)
 80a028c:	681b      	ldr	r3, [r3, #0]
 80a028e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0292:	9301      	str	r3, [sp, #4]
 80a0294:	bd08      	pop	{r3, pc}
 80a0296:	0000      	.short	0x0000
 80a0298:	080601ac 	.word	0x080601ac

080a029c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a029c:	b508      	push	{r3, lr}
 80a029e:	4b02      	ldr	r3, [pc, #8]	; (80a02a8 <hal_spi_init+0xc>)
 80a02a0:	681b      	ldr	r3, [r3, #0]
 80a02a2:	69db      	ldr	r3, [r3, #28]
 80a02a4:	9301      	str	r3, [sp, #4]
 80a02a6:	bd08      	pop	{r3, pc}
 80a02a8:	080601b4 	.word	0x080601b4

080a02ac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a02ac:	b508      	push	{r3, lr}
 80a02ae:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <hal_spi_is_enabled+0xc>)
 80a02b0:	681b      	ldr	r3, [r3, #0]
 80a02b2:	6a1b      	ldr	r3, [r3, #32]
 80a02b4:	9301      	str	r3, [sp, #4]
 80a02b6:	bd08      	pop	{r3, pc}
 80a02b8:	080601b4 	.word	0x080601b4

080a02bc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a02bc:	b508      	push	{r3, lr}
 80a02be:	4b02      	ldr	r3, [pc, #8]	; (80a02c8 <HAL_USB_USART_Init+0xc>)
 80a02c0:	681b      	ldr	r3, [r3, #0]
 80a02c2:	681b      	ldr	r3, [r3, #0]
 80a02c4:	9301      	str	r3, [sp, #4]
 80a02c6:	bd08      	pop	{r3, pc}
 80a02c8:	080601d8 	.word	0x080601d8

080a02cc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b02      	ldr	r3, [pc, #8]	; (80a02d8 <HAL_USB_USART_Begin+0xc>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	685b      	ldr	r3, [r3, #4]
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	bd08      	pop	{r3, pc}
 80a02d8:	080601d8 	.word	0x080601d8

080a02dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <HAL_USB_USART_Available_Data+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	691b      	ldr	r3, [r3, #16]
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	080601d8 	.word	0x080601d8

080a02ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b02      	ldr	r3, [pc, #8]	; (80a02f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	695b      	ldr	r3, [r3, #20]
 80a02f4:	9301      	str	r3, [sp, #4]
 80a02f6:	bd08      	pop	{r3, pc}
 80a02f8:	080601d8 	.word	0x080601d8

080a02fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b02      	ldr	r3, [pc, #8]	; (80a0308 <HAL_USB_USART_Receive_Data+0xc>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	699b      	ldr	r3, [r3, #24]
 80a0304:	9301      	str	r3, [sp, #4]
 80a0306:	bd08      	pop	{r3, pc}
 80a0308:	080601d8 	.word	0x080601d8

080a030c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a030c:	b508      	push	{r3, lr}
 80a030e:	4b02      	ldr	r3, [pc, #8]	; (80a0318 <HAL_USB_USART_Send_Data+0xc>)
 80a0310:	681b      	ldr	r3, [r3, #0]
 80a0312:	69db      	ldr	r3, [r3, #28]
 80a0314:	9301      	str	r3, [sp, #4]
 80a0316:	bd08      	pop	{r3, pc}
 80a0318:	080601d8 	.word	0x080601d8

080a031c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a031c:	b508      	push	{r3, lr}
 80a031e:	4b02      	ldr	r3, [pc, #8]	; (80a0328 <HAL_USB_USART_Flush_Data+0xc>)
 80a0320:	681b      	ldr	r3, [r3, #0]
 80a0322:	6a1b      	ldr	r3, [r3, #32]
 80a0324:	9301      	str	r3, [sp, #4]
 80a0326:	bd08      	pop	{r3, pc}
 80a0328:	080601d8 	.word	0x080601d8

080a032c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a032c:	b508      	push	{r3, lr}
 80a032e:	4b02      	ldr	r3, [pc, #8]	; (80a0338 <inet_gethostbyname+0xc>)
 80a0330:	681b      	ldr	r3, [r3, #0]
 80a0332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0334:	9301      	str	r3, [sp, #4]
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080601c0 	.word	0x080601c0

080a033c <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b02      	ldr	r3, [pc, #8]	; (80a0348 <wlan_select_antenna+0xc>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0344:	9301      	str	r3, [sp, #4]
 80a0346:	bd08      	pop	{r3, pc}
 80a0348:	080601c0 	.word	0x080601c0

080a034c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a034c:	b508      	push	{r3, lr}
 80a034e:	4b02      	ldr	r3, [pc, #8]	; (80a0358 <set_system_mode+0xc>)
 80a0350:	681b      	ldr	r3, [r3, #0]
 80a0352:	685b      	ldr	r3, [r3, #4]
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	bd08      	pop	{r3, pc}
 80a0358:	080601a4 	.word	0x080601a4

080a035c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b03      	ldr	r3, [pc, #12]	; (80a036c <system_ctrl_set_app_request_handler+0x10>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0366:	9301      	str	r3, [sp, #4]
 80a0368:	bd08      	pop	{r3, pc}
 80a036a:	0000      	.short	0x0000
 80a036c:	080601a4 	.word	0x080601a4

080a0370 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b03      	ldr	r3, [pc, #12]	; (80a0380 <system_ctrl_set_result+0x10>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a037a:	9301      	str	r3, [sp, #4]
 80a037c:	bd08      	pop	{r3, pc}
 80a037e:	0000      	.short	0x0000
 80a0380:	080601a4 	.word	0x080601a4

080a0384 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <network_connect+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	685b      	ldr	r3, [r3, #4]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601c8 	.word	0x080601c8

080a0394 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <network_connecting+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	689b      	ldr	r3, [r3, #8]
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601c8 	.word	0x080601c8

080a03a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <network_disconnect+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	68db      	ldr	r3, [r3, #12]
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601c8 	.word	0x080601c8

080a03b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <network_ready+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	691b      	ldr	r3, [r3, #16]
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601c8 	.word	0x080601c8

080a03c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <network_on+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	695b      	ldr	r3, [r3, #20]
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601c8 	.word	0x080601c8

080a03d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <network_off+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	699b      	ldr	r3, [r3, #24]
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601c8 	.word	0x080601c8

080a03e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <network_listen+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	69db      	ldr	r3, [r3, #28]
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c8 	.word	0x080601c8

080a03f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <network_listening+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	6a1b      	ldr	r3, [r3, #32]
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c8 	.word	0x080601c8

080a0404 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <network_set_listen_timeout+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601c8 	.word	0x080601c8

080a0414 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <network_get_listen_timeout+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601c8 	.word	0x080601c8

080a0424 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <network_is_on+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601c8 	.word	0x080601c8

080a0434 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <network_is_off+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601c8 	.word	0x080601c8

080a0444 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601cc 	.word	0x080601cc

080a0454 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <malloc+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	681b      	ldr	r3, [r3, #0]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601a0 	.word	0x080601a0

080a0464 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <free+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	685b      	ldr	r3, [r3, #4]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601a0 	.word	0x080601a0

080a0474 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <__assert_func+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601a0 	.word	0x080601a0

080a0484 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <newlib_impure_ptr_callback+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601a0 	.word	0x080601a0

080a0494 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0494:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0496:	2600      	movs	r6, #0
 80a0498:	4604      	mov	r4, r0
 80a049a:	460d      	mov	r5, r1
 80a049c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a04a0:	f7ff fe72 	bl	80a0188 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a04a4:	4628      	mov	r0, r5
    _spi = spi;
 80a04a6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a04a8:	f7ff fef8 	bl	80a029c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a04ac:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a04ae:	6066      	str	r6, [r4, #4]
}
 80a04b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a04b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a04b4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a04b6:	2000      	movs	r0, #0
 80a04b8:	4b04      	ldr	r3, [pc, #16]	; (80a04cc <_GLOBAL__sub_I_System+0x18>)
 80a04ba:	601a      	str	r2, [r3, #0]
 80a04bc:	4b04      	ldr	r3, [pc, #16]	; (80a04d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a04be:	4a05      	ldr	r2, [pc, #20]	; (80a04d4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a04c0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a04c4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a04c6:	f7ff bf41 	b.w	80a034c <set_system_mode>
 80a04ca:	bf00      	nop
 80a04cc:	20000084 	.word	0x20000084
 80a04d0:	20000078 	.word	0x20000078
 80a04d4:	ffff0000 	.word	0xffff0000

080a04d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a04d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04da:	4606      	mov	r6, r0
 80a04dc:	460d      	mov	r5, r1
  size_t n = 0;
 80a04de:	2400      	movs	r4, #0
 80a04e0:	188f      	adds	r7, r1, r2
  while (size--) {
 80a04e2:	42bd      	cmp	r5, r7
 80a04e4:	d00c      	beq.n	80a0500 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a04e6:	6833      	ldr	r3, [r6, #0]
 80a04e8:	4630      	mov	r0, r6
 80a04ea:	689b      	ldr	r3, [r3, #8]
 80a04ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a04f0:	4798      	blx	r3
     if (chunk>=0)
 80a04f2:	1e03      	subs	r3, r0, #0
 80a04f4:	db01      	blt.n	80a04fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a04f6:	441c      	add	r4, r3
  while (size--) {
 80a04f8:	e7f3      	b.n	80a04e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a04fa:	2c00      	cmp	r4, #0
 80a04fc:	bf08      	it	eq
 80a04fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0500:	4620      	mov	r0, r4
 80a0502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0504 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0504:	b570      	push	{r4, r5, r6, lr}
 80a0506:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0508:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a050a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a050c:	b149      	cbz	r1, 80a0522 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a050e:	f000 fcd7 	bl	80a0ec0 <strlen>
 80a0512:	682b      	ldr	r3, [r5, #0]
 80a0514:	4602      	mov	r2, r0
 80a0516:	4621      	mov	r1, r4
 80a0518:	4628      	mov	r0, r5
    }
 80a051a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a051e:	68db      	ldr	r3, [r3, #12]
 80a0520:	4718      	bx	r3
    }
 80a0522:	bd70      	pop	{r4, r5, r6, pc}

080a0524 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0524:	6803      	ldr	r3, [r0, #0]
 80a0526:	689b      	ldr	r3, [r3, #8]
 80a0528:	4718      	bx	r3

080a052a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a052a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a052c:	2a01      	cmp	r2, #1
 80a052e:	bf98      	it	ls
 80a0530:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0532:	b530      	push	{r4, r5, lr}
 80a0534:	b08b      	sub	sp, #44	; 0x2c
 80a0536:	460c      	mov	r4, r1
  *str = '\0';
 80a0538:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a053c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a053e:	4625      	mov	r5, r4
 80a0540:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0544:	fb04 5312 	mls	r3, r4, r2, r5
 80a0548:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a054a:	2b09      	cmp	r3, #9
 80a054c:	bf94      	ite	ls
 80a054e:	3330      	addls	r3, #48	; 0x30
 80a0550:	3337      	addhi	r3, #55	; 0x37
 80a0552:	b2db      	uxtb	r3, r3
  } while(n);
 80a0554:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0556:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a055a:	d9f0      	bls.n	80a053e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a055c:	f7ff ffd2 	bl	80a0504 <_ZN5Print5writeEPKc>
}
 80a0560:	b00b      	add	sp, #44	; 0x2c
 80a0562:	bd30      	pop	{r4, r5, pc}

080a0564 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0564:	4b01      	ldr	r3, [pc, #4]	; (80a056c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0566:	4a02      	ldr	r2, [pc, #8]	; (80a0570 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0568:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a056a:	4770      	bx	lr
 80a056c:	20000088 	.word	0x20000088
 80a0570:	080a0fb4 	.word	0x080a0fb4

080a0574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0574:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0576:	681a      	ldr	r2, [r3, #0]
 80a0578:	4b02      	ldr	r3, [pc, #8]	; (80a0584 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a057a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a057c:	4770      	bx	lr
 80a057e:	bf00      	nop
 80a0580:	20000004 	.word	0x20000004
 80a0584:	2000008c 	.word	0x2000008c

080a0588 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0588:	2200      	movs	r2, #0
 80a058a:	4b01      	ldr	r3, [pc, #4]	; (80a0590 <_GLOBAL__sub_I_RGB+0x8>)
 80a058c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a058e:	4770      	bx	lr
 80a0590:	20000090 	.word	0x20000090

080a0594 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0594:	4b01      	ldr	r3, [pc, #4]	; (80a059c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0596:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0598:	4770      	bx	lr
 80a059a:	bf00      	nop
 80a059c:	20000008 	.word	0x20000008

080a05a0 <serialEventRun>:
{
 80a05a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a05a2:	4b13      	ldr	r3, [pc, #76]	; (80a05f0 <serialEventRun+0x50>)
 80a05a4:	b143      	cbz	r3, 80a05b8 <serialEventRun+0x18>
 80a05a6:	f000 f975 	bl	80a0894 <_Z16_fetch_usbserialv>
 80a05aa:	6803      	ldr	r3, [r0, #0]
 80a05ac:	691b      	ldr	r3, [r3, #16]
 80a05ae:	4798      	blx	r3
 80a05b0:	2800      	cmp	r0, #0
 80a05b2:	dd01      	ble.n	80a05b8 <serialEventRun+0x18>
        serialEvent();
 80a05b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a05b8:	4b0e      	ldr	r3, [pc, #56]	; (80a05f4 <serialEventRun+0x54>)
 80a05ba:	b143      	cbz	r3, 80a05ce <serialEventRun+0x2e>
 80a05bc:	f000 fbc6 	bl	80a0d4c <_Z22__fetch_global_Serial1v>
 80a05c0:	6803      	ldr	r3, [r0, #0]
 80a05c2:	691b      	ldr	r3, [r3, #16]
 80a05c4:	4798      	blx	r3
 80a05c6:	2800      	cmp	r0, #0
 80a05c8:	dd01      	ble.n	80a05ce <serialEventRun+0x2e>
        serialEvent1();
 80a05ca:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a05ce:	4b0a      	ldr	r3, [pc, #40]	; (80a05f8 <serialEventRun+0x58>)
 80a05d0:	b10b      	cbz	r3, 80a05d6 <serialEventRun+0x36>
 80a05d2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a05d6:	4b09      	ldr	r3, [pc, #36]	; (80a05fc <serialEventRun+0x5c>)
 80a05d8:	b143      	cbz	r3, 80a05ec <serialEventRun+0x4c>
 80a05da:	f000 f995 	bl	80a0908 <_Z17_fetch_usbserial1v>
 80a05de:	6803      	ldr	r3, [r0, #0]
 80a05e0:	691b      	ldr	r3, [r3, #16]
 80a05e2:	4798      	blx	r3
 80a05e4:	2800      	cmp	r0, #0
 80a05e6:	dd01      	ble.n	80a05ec <serialEventRun+0x4c>
        usbSerialEvent1();
 80a05e8:	f3af 8000 	nop.w
}
 80a05ec:	bd08      	pop	{r3, pc}
 80a05ee:	bf00      	nop
	...

080a0600 <_post_loop>:
{
 80a0600:	b508      	push	{r3, lr}
	serialEventRun();
 80a0602:	f7ff ffcd 	bl	80a05a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0606:	f7ff fdb7 	bl	80a0178 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a060a:	4b01      	ldr	r3, [pc, #4]	; (80a0610 <_post_loop+0x10>)
 80a060c:	6018      	str	r0, [r3, #0]
}
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	20000414 	.word	0x20000414

080a0614 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0614:	4805      	ldr	r0, [pc, #20]	; (80a062c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0616:	4a06      	ldr	r2, [pc, #24]	; (80a0630 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0618:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a061a:	1a12      	subs	r2, r2, r0
 80a061c:	4905      	ldr	r1, [pc, #20]	; (80a0634 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a061e:	f000 fc0b 	bl	80a0e38 <memcpy>
    __backup_sram_signature = signature;
 80a0622:	4b05      	ldr	r3, [pc, #20]	; (80a0638 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0624:	4a05      	ldr	r2, [pc, #20]	; (80a063c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0626:	601a      	str	r2, [r3, #0]
}
 80a0628:	bd08      	pop	{r3, pc}
 80a062a:	bf00      	nop
 80a062c:	40024000 	.word	0x40024000
 80a0630:	40024004 	.word	0x40024004
 80a0634:	080a11a0 	.word	0x080a11a0
 80a0638:	40024000 	.word	0x40024000
 80a063c:	9a271c1e 	.word	0x9a271c1e

080a0640 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0640:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0642:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0644:	461a      	mov	r2, r3
 80a0646:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a064a:	9300      	str	r3, [sp, #0]
 80a064c:	f7ff fe90 	bl	80a0370 <system_ctrl_set_result>
}
 80a0650:	b003      	add	sp, #12
 80a0652:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0658 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0658:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a065a:	8843      	ldrh	r3, [r0, #2]
 80a065c:	2b0a      	cmp	r3, #10
 80a065e:	d008      	beq.n	80a0672 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0660:	2b50      	cmp	r3, #80	; 0x50
 80a0662:	d10b      	bne.n	80a067c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0664:	4b09      	ldr	r3, [pc, #36]	; (80a068c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0666:	681b      	ldr	r3, [r3, #0]
 80a0668:	b14b      	cbz	r3, 80a067e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a066a:	b003      	add	sp, #12
 80a066c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0670:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0672:	f7ff ffe5 	bl	80a0640 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0676:	b003      	add	sp, #12
 80a0678:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a067c:	2300      	movs	r3, #0
 80a067e:	461a      	mov	r2, r3
 80a0680:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0684:	9300      	str	r3, [sp, #0]
 80a0686:	f7ff fe73 	bl	80a0370 <system_ctrl_set_result>
}
 80a068a:	e7f4      	b.n	80a0676 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a068c:	200000a4 	.word	0x200000a4

080a0690 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0690:	2100      	movs	r1, #0
{
 80a0692:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0694:	4811      	ldr	r0, [pc, #68]	; (80a06dc <module_user_init_hook+0x4c>)
 80a0696:	f7ff fef5 	bl	80a0484 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a069a:	4b11      	ldr	r3, [pc, #68]	; (80a06e0 <module_user_init_hook+0x50>)
 80a069c:	681a      	ldr	r2, [r3, #0]
 80a069e:	4b11      	ldr	r3, [pc, #68]	; (80a06e4 <module_user_init_hook+0x54>)
 80a06a0:	429a      	cmp	r2, r3
 80a06a2:	bf0c      	ite	eq
 80a06a4:	2201      	moveq	r2, #1
 80a06a6:	2200      	movne	r2, #0
 80a06a8:	4b0f      	ldr	r3, [pc, #60]	; (80a06e8 <module_user_init_hook+0x58>)
 80a06aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a06ac:	d001      	beq.n	80a06b2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a06ae:	f7ff ffb1 	bl	80a0614 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a06b2:	f7ff fd59 	bl	80a0168 <HAL_RNG_GetRandomNumber>
 80a06b6:	4604      	mov	r4, r0
    srand(seed);
 80a06b8:	f000 fbd4 	bl	80a0e64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a06bc:	4b0b      	ldr	r3, [pc, #44]	; (80a06ec <module_user_init_hook+0x5c>)
 80a06be:	b113      	cbz	r3, 80a06c6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a06c0:	4620      	mov	r0, r4
 80a06c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a06c6:	2100      	movs	r1, #0
 80a06c8:	4808      	ldr	r0, [pc, #32]	; (80a06ec <module_user_init_hook+0x5c>)
 80a06ca:	f7ff febb 	bl	80a0444 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a06ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a06d2:	2100      	movs	r1, #0
 80a06d4:	4806      	ldr	r0, [pc, #24]	; (80a06f0 <module_user_init_hook+0x60>)
 80a06d6:	f7ff be41 	b.w	80a035c <system_ctrl_set_app_request_handler>
 80a06da:	bf00      	nop
 80a06dc:	080a0595 	.word	0x080a0595
 80a06e0:	40024000 	.word	0x40024000
 80a06e4:	9a271c1e 	.word	0x9a271c1e
 80a06e8:	200000a0 	.word	0x200000a0
 80a06ec:	00000000 	.word	0x00000000
 80a06f0:	080a0659 	.word	0x080a0659

080a06f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a06f4:	4770      	bx	lr

080a06f6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a06f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06f8:	460e      	mov	r6, r1
 80a06fa:	2400      	movs	r4, #0
 80a06fc:	f100 0708 	add.w	r7, r0, #8
 80a0700:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0702:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0706:	220a      	movs	r2, #10
 80a0708:	4630      	mov	r0, r6
 80a070a:	f7ff ff0e 	bl	80a052a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a070e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0710:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0712:	d101      	bne.n	80a0718 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0714:	4620      	mov	r0, r4
 80a0716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0718:	2c00      	cmp	r4, #0
 80a071a:	d0f2      	beq.n	80a0702 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a071c:	212e      	movs	r1, #46	; 0x2e
 80a071e:	4630      	mov	r0, r6
 80a0720:	f7ff ff00 	bl	80a0524 <_ZN5Print5printEc>
 80a0724:	4404      	add	r4, r0
 80a0726:	e7ec      	b.n	80a0702 <_ZNK9IPAddress7printToER5Print+0xc>

080a0728 <_ZN9IPAddressD0Ev>:
 80a0728:	b510      	push	{r4, lr}
 80a072a:	4604      	mov	r4, r0
 80a072c:	2118      	movs	r1, #24
 80a072e:	f7ff fcb4 	bl	80a009a <_ZdlPvj>
 80a0732:	4620      	mov	r0, r4
 80a0734:	bd10      	pop	{r4, pc}
	...

080a0738 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0738:	b510      	push	{r4, lr}
 80a073a:	4604      	mov	r4, r0
 80a073c:	4b04      	ldr	r3, [pc, #16]	; (80a0750 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a073e:	2211      	movs	r2, #17
 80a0740:	2100      	movs	r1, #0
 80a0742:	f840 3b04 	str.w	r3, [r0], #4
 80a0746:	f000 fb85 	bl	80a0e54 <memset>
}
 80a074a:	4620      	mov	r0, r4
 80a074c:	bd10      	pop	{r4, pc}
 80a074e:	bf00      	nop
 80a0750:	080a0fdc 	.word	0x080a0fdc

080a0754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0754:	4603      	mov	r3, r0
 80a0756:	4a07      	ldr	r2, [pc, #28]	; (80a0774 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0758:	b510      	push	{r4, lr}
 80a075a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a075e:	f101 0210 	add.w	r2, r1, #16
 80a0762:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0766:	4291      	cmp	r1, r2
 80a0768:	f843 4b04 	str.w	r4, [r3], #4
 80a076c:	d1f9      	bne.n	80a0762 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a076e:	780a      	ldrb	r2, [r1, #0]
 80a0770:	701a      	strb	r2, [r3, #0]
}
 80a0772:	bd10      	pop	{r4, pc}
 80a0774:	080a0fdc 	.word	0x080a0fdc

080a0778 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a0778:	4a02      	ldr	r2, [pc, #8]	; (80a0784 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a077a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a077e:	2204      	movs	r2, #4
 80a0780:	7502      	strb	r2, [r0, #20]
}
 80a0782:	4770      	bx	lr
 80a0784:	080a0fdc 	.word	0x080a0fdc

080a0788 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0788:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a078a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a078e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0792:	2304      	movs	r3, #4
 80a0794:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0798:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a079c:	6044      	str	r4, [r0, #4]
 80a079e:	7503      	strb	r3, [r0, #20]
}
 80a07a0:	bd10      	pop	{r4, pc}
	...

080a07a4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a07a4:	b513      	push	{r0, r1, r4, lr}
 80a07a6:	4c04      	ldr	r4, [pc, #16]	; (80a07b8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a07a8:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a07aa:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a07ae:	9400      	str	r4, [sp, #0]
 80a07b0:	f7ff ffea 	bl	80a0788 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a07b4:	b002      	add	sp, #8
 80a07b6:	bd10      	pop	{r4, pc}
 80a07b8:	080a0fdc 	.word	0x080a0fdc

080a07bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a07bc:	7441      	strb	r1, [r0, #17]
}
 80a07be:	4770      	bx	lr

080a07c0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a07c0:	4770      	bx	lr

080a07c2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a07c2:	4770      	bx	lr

080a07c4 <_ZN9USBSerial4readEv>:
{
 80a07c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a07c6:	2100      	movs	r1, #0
 80a07c8:	7c00      	ldrb	r0, [r0, #16]
 80a07ca:	f7ff fd97 	bl	80a02fc <HAL_USB_USART_Receive_Data>
}
 80a07ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07d2:	bd08      	pop	{r3, pc}

080a07d4 <_ZN9USBSerial4peekEv>:
{
 80a07d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a07d6:	2101      	movs	r1, #1
 80a07d8:	7c00      	ldrb	r0, [r0, #16]
 80a07da:	f7ff fd8f 	bl	80a02fc <HAL_USB_USART_Receive_Data>
}
 80a07de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07e2:	bd08      	pop	{r3, pc}

080a07e4 <_ZN9USBSerial17availableForWriteEv>:
{
 80a07e4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a07e6:	7c00      	ldrb	r0, [r0, #16]
 80a07e8:	f7ff fd80 	bl	80a02ec <HAL_USB_USART_Available_Data_For_Write>
}
 80a07ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07f0:	bd08      	pop	{r3, pc}

080a07f2 <_ZN9USBSerial9availableEv>:
{
 80a07f2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a07f4:	7c00      	ldrb	r0, [r0, #16]
 80a07f6:	f7ff fd71 	bl	80a02dc <HAL_USB_USART_Available_Data>
}
 80a07fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07fe:	bd08      	pop	{r3, pc}

080a0800 <_ZN9USBSerial5writeEh>:
{
 80a0800:	b538      	push	{r3, r4, r5, lr}
 80a0802:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0804:	7c00      	ldrb	r0, [r0, #16]
{
 80a0806:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0808:	f7ff fd70 	bl	80a02ec <HAL_USB_USART_Available_Data_For_Write>
 80a080c:	2800      	cmp	r0, #0
 80a080e:	dc01      	bgt.n	80a0814 <_ZN9USBSerial5writeEh+0x14>
 80a0810:	7c60      	ldrb	r0, [r4, #17]
 80a0812:	b128      	cbz	r0, 80a0820 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0814:	4629      	mov	r1, r5
 80a0816:	7c20      	ldrb	r0, [r4, #16]
 80a0818:	f7ff fd78 	bl	80a030c <HAL_USB_USART_Send_Data>
 80a081c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0820:	bd38      	pop	{r3, r4, r5, pc}

080a0822 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0822:	7c00      	ldrb	r0, [r0, #16]
 80a0824:	f7ff bd7a 	b.w	80a031c <HAL_USB_USART_Flush_Data>

080a0828 <_ZN9USBSerialD0Ev>:
 80a0828:	b510      	push	{r4, lr}
 80a082a:	4604      	mov	r4, r0
 80a082c:	2114      	movs	r1, #20
 80a082e:	f7ff fc34 	bl	80a009a <_ZdlPvj>
 80a0832:	4620      	mov	r0, r4
 80a0834:	bd10      	pop	{r4, pc}

080a0836 <__tcf_1>:
 80a0836:	4770      	bx	lr

080a0838 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0838:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a083e:	4604      	mov	r4, r0
 80a0840:	4608      	mov	r0, r1
 80a0842:	2100      	movs	r1, #0
 80a0844:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0848:	4b04      	ldr	r3, [pc, #16]	; (80a085c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a084a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a084c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a084e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0850:	4611      	mov	r1, r2
  _blocking = true;
 80a0852:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0854:	f7ff fd32 	bl	80a02bc <HAL_USB_USART_Init>
}
 80a0858:	4620      	mov	r0, r4
 80a085a:	bd10      	pop	{r4, pc}
 80a085c:	080a0ff0 	.word	0x080a0ff0

080a0860 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0860:	2200      	movs	r2, #0
 80a0862:	7c00      	ldrb	r0, [r0, #16]
 80a0864:	f7ff bd32 	b.w	80a02cc <HAL_USB_USART_Begin>

080a0868 <_Z19acquireSerialBufferv>:
{
 80a0868:	b510      	push	{r4, lr}
 80a086a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a086c:	2214      	movs	r2, #20
 80a086e:	2100      	movs	r1, #0
 80a0870:	f000 faf0 	bl	80a0e54 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0874:	4b05      	ldr	r3, [pc, #20]	; (80a088c <_Z19acquireSerialBufferv+0x24>)
}
 80a0876:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0878:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a087a:	4b05      	ldr	r3, [pc, #20]	; (80a0890 <_Z19acquireSerialBufferv+0x28>)
 80a087c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a087e:	f240 1301 	movw	r3, #257	; 0x101
 80a0882:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0884:	2381      	movs	r3, #129	; 0x81
 80a0886:	8223      	strh	r3, [r4, #16]
}
 80a0888:	bd10      	pop	{r4, pc}
 80a088a:	bf00      	nop
 80a088c:	200000d8 	.word	0x200000d8
 80a0890:	200001d9 	.word	0x200001d9

080a0894 <_Z16_fetch_usbserialv>:
{
 80a0894:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0896:	4d0e      	ldr	r5, [pc, #56]	; (80a08d0 <_Z16_fetch_usbserialv+0x3c>)
{
 80a0898:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a089a:	a801      	add	r0, sp, #4
 80a089c:	f7ff ffe4 	bl	80a0868 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a08a0:	7829      	ldrb	r1, [r5, #0]
 80a08a2:	f3bf 8f5b 	dmb	ish
 80a08a6:	f011 0401 	ands.w	r4, r1, #1
 80a08aa:	d10e      	bne.n	80a08ca <_Z16_fetch_usbserialv+0x36>
 80a08ac:	4628      	mov	r0, r5
 80a08ae:	f7ff fbf6 	bl	80a009e <__cxa_guard_acquire>
 80a08b2:	b150      	cbz	r0, 80a08ca <_Z16_fetch_usbserialv+0x36>
 80a08b4:	4621      	mov	r1, r4
 80a08b6:	aa01      	add	r2, sp, #4
 80a08b8:	4806      	ldr	r0, [pc, #24]	; (80a08d4 <_Z16_fetch_usbserialv+0x40>)
 80a08ba:	f7ff ffbd 	bl	80a0838 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a08be:	4628      	mov	r0, r5
 80a08c0:	f7ff fbf2 	bl	80a00a8 <__cxa_guard_release>
 80a08c4:	4804      	ldr	r0, [pc, #16]	; (80a08d8 <_Z16_fetch_usbserialv+0x44>)
 80a08c6:	f000 fab1 	bl	80a0e2c <atexit>
	return _usbserial;
}
 80a08ca:	4802      	ldr	r0, [pc, #8]	; (80a08d4 <_Z16_fetch_usbserialv+0x40>)
 80a08cc:	b007      	add	sp, #28
 80a08ce:	bd30      	pop	{r4, r5, pc}
 80a08d0:	200000a8 	.word	0x200000a8
 80a08d4:	200000b0 	.word	0x200000b0
 80a08d8:	080a07c1 	.word	0x080a07c1

080a08dc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a08dc:	b510      	push	{r4, lr}
 80a08de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a08e0:	2214      	movs	r2, #20
 80a08e2:	2100      	movs	r1, #0
 80a08e4:	f000 fab6 	bl	80a0e54 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a08e8:	4b05      	ldr	r3, [pc, #20]	; (80a0900 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a08ea:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a08ec:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a08ee:	4b05      	ldr	r3, [pc, #20]	; (80a0904 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a08f0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a08f2:	f240 1301 	movw	r3, #257	; 0x101
 80a08f6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a08f8:	2381      	movs	r3, #129	; 0x81
 80a08fa:	8223      	strh	r3, [r4, #16]
}
 80a08fc:	bd10      	pop	{r4, pc}
 80a08fe:	bf00      	nop
 80a0900:	2000025a 	.word	0x2000025a
 80a0904:	2000035b 	.word	0x2000035b

080a0908 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0908:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a090a:	4c0e      	ldr	r4, [pc, #56]	; (80a0944 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a090c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a090e:	a801      	add	r0, sp, #4
 80a0910:	f7ff ffe4 	bl	80a08dc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0914:	7823      	ldrb	r3, [r4, #0]
 80a0916:	f3bf 8f5b 	dmb	ish
 80a091a:	07db      	lsls	r3, r3, #31
 80a091c:	d40e      	bmi.n	80a093c <_Z17_fetch_usbserial1v+0x34>
 80a091e:	4620      	mov	r0, r4
 80a0920:	f7ff fbbd 	bl	80a009e <__cxa_guard_acquire>
 80a0924:	b150      	cbz	r0, 80a093c <_Z17_fetch_usbserial1v+0x34>
 80a0926:	2101      	movs	r1, #1
 80a0928:	aa01      	add	r2, sp, #4
 80a092a:	4807      	ldr	r0, [pc, #28]	; (80a0948 <_Z17_fetch_usbserial1v+0x40>)
 80a092c:	f7ff ff84 	bl	80a0838 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0930:	4620      	mov	r0, r4
 80a0932:	f7ff fbb9 	bl	80a00a8 <__cxa_guard_release>
 80a0936:	4805      	ldr	r0, [pc, #20]	; (80a094c <_Z17_fetch_usbserial1v+0x44>)
 80a0938:	f000 fa78 	bl	80a0e2c <atexit>
  return _usbserial1;
}
 80a093c:	4802      	ldr	r0, [pc, #8]	; (80a0948 <_Z17_fetch_usbserial1v+0x40>)
 80a093e:	b006      	add	sp, #24
 80a0940:	bd10      	pop	{r4, pc}
 80a0942:	bf00      	nop
 80a0944:	200000ac 	.word	0x200000ac
 80a0948:	200000c4 	.word	0x200000c4
 80a094c:	080a0837 	.word	0x080a0837

080a0950 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a0950:	4770      	bx	lr

080a0952 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0952:	7441      	strb	r1, [r0, #17]
}
 80a0954:	4770      	bx	lr

080a0956 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0956:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0958:	7c00      	ldrb	r0, [r0, #16]
 80a095a:	f7ff fc55 	bl	80a0208 <hal_usart_available_data_for_write>
}
 80a095e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0962:	bd08      	pop	{r3, pc}

080a0964 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0964:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0966:	7c00      	ldrb	r0, [r0, #16]
 80a0968:	f7ff fc26 	bl	80a01b8 <hal_usart_available>
}
 80a096c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0970:	bd08      	pop	{r3, pc}

080a0972 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0972:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0974:	7c00      	ldrb	r0, [r0, #16]
 80a0976:	f7ff fc2f 	bl	80a01d8 <hal_usart_peek>
}
 80a097a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a097e:	bd08      	pop	{r3, pc}

080a0980 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0980:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0982:	7c00      	ldrb	r0, [r0, #16]
 80a0984:	f7ff fc20 	bl	80a01c8 <hal_usart_read>
}
 80a0988:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a098c:	bd08      	pop	{r3, pc}

080a098e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a098e:	7c00      	ldrb	r0, [r0, #16]
 80a0990:	f7ff bc2a 	b.w	80a01e8 <hal_usart_flush>

080a0994 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0994:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0996:	7c46      	ldrb	r6, [r0, #17]
{
 80a0998:	4604      	mov	r4, r0
 80a099a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a099c:	b12e      	cbz	r6, 80a09aa <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a099e:	4629      	mov	r1, r5
 80a09a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a09a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a09a6:	f7ff bbff 	b.w	80a01a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a09aa:	7c00      	ldrb	r0, [r0, #16]
 80a09ac:	f7ff fc2c 	bl	80a0208 <hal_usart_available_data_for_write>
 80a09b0:	2800      	cmp	r0, #0
 80a09b2:	dcf4      	bgt.n	80a099e <_ZN11USARTSerial5writeEh+0xa>
}
 80a09b4:	4630      	mov	r0, r6
 80a09b6:	bd70      	pop	{r4, r5, r6, pc}

080a09b8 <_ZN11USARTSerialD0Ev>:
 80a09b8:	b510      	push	{r4, lr}
 80a09ba:	4604      	mov	r4, r0
 80a09bc:	2114      	movs	r1, #20
 80a09be:	f7ff fb6c 	bl	80a009a <_ZdlPvj>
 80a09c2:	4620      	mov	r0, r4
 80a09c4:	bd10      	pop	{r4, pc}
	...

080a09c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a09c8:	b510      	push	{r4, lr}
 80a09ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a09ce:	4604      	mov	r4, r0
 80a09d0:	4608      	mov	r0, r1
 80a09d2:	4611      	mov	r1, r2
 80a09d4:	2200      	movs	r2, #0
 80a09d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a09da:	4b04      	ldr	r3, [pc, #16]	; (80a09ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a09dc:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a09de:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a09e0:	2301      	movs	r3, #1
 80a09e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a09e4:	f7ff fc18 	bl	80a0218 <hal_usart_init_ex>
}
 80a09e8:	4620      	mov	r0, r4
 80a09ea:	bd10      	pop	{r4, pc}
 80a09ec:	080a1020 	.word	0x080a1020

080a09f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a09f0:	4770      	bx	lr

080a09f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a09f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09f4:	4606      	mov	r6, r0
 80a09f6:	4615      	mov	r5, r2
 80a09f8:	460c      	mov	r4, r1
 80a09fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a09fc:	42bc      	cmp	r4, r7
 80a09fe:	d006      	beq.n	80a0a0e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0a00:	6833      	ldr	r3, [r6, #0]
 80a0a02:	4630      	mov	r0, r6
 80a0a04:	689b      	ldr	r3, [r3, #8]
 80a0a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0a0a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0a0c:	e7f6      	b.n	80a09fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0a0e:	4628      	mov	r0, r5
 80a0a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a12 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0a12:	2200      	movs	r2, #0
 80a0a14:	7c00      	ldrb	r0, [r0, #16]
 80a0a16:	f7ff bc07 	b.w	80a0228 <hal_i2c_write>

080a0a1a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0a1a:	2100      	movs	r1, #0
 80a0a1c:	7c00      	ldrb	r0, [r0, #16]
 80a0a1e:	f7ff bc0b 	b.w	80a0238 <hal_i2c_available>

080a0a22 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0a22:	2100      	movs	r1, #0
 80a0a24:	7c00      	ldrb	r0, [r0, #16]
 80a0a26:	f7ff bc0f 	b.w	80a0248 <hal_i2c_read>

080a0a2a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0a2a:	2100      	movs	r1, #0
 80a0a2c:	7c00      	ldrb	r0, [r0, #16]
 80a0a2e:	f7ff bc13 	b.w	80a0258 <hal_i2c_peek>

080a0a32 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0a32:	2100      	movs	r1, #0
 80a0a34:	7c00      	ldrb	r0, [r0, #16]
 80a0a36:	f7ff bc17 	b.w	80a0268 <hal_i2c_flush>

080a0a3a <_ZN7TwoWireD0Ev>:
 80a0a3a:	b510      	push	{r4, lr}
 80a0a3c:	4604      	mov	r4, r0
 80a0a3e:	2114      	movs	r1, #20
 80a0a40:	f7ff fb2b 	bl	80a009a <_ZdlPvj>
 80a0a44:	4620      	mov	r0, r4
 80a0a46:	bd10      	pop	{r4, pc}

080a0a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0a48:	b510      	push	{r4, lr}
 80a0a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a4e:	4604      	mov	r4, r0
 80a0a50:	4608      	mov	r0, r1
 80a0a52:	2100      	movs	r1, #0
 80a0a54:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0a58:	4b03      	ldr	r3, [pc, #12]	; (80a0a68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0a5a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0a5c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0a5e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0a60:	f7ff fc12 	bl	80a0288 <hal_i2c_init>
}
 80a0a64:	4620      	mov	r0, r4
 80a0a66:	bd10      	pop	{r4, pc}
 80a0a68:	080a1050 	.word	0x080a1050

080a0a6c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0a6c:	2200      	movs	r2, #0
 80a0a6e:	6840      	ldr	r0, [r0, #4]
 80a0a70:	4611      	mov	r1, r2
 80a0a72:	f7ff bc9f 	b.w	80a03b4 <network_ready>

080a0a76 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a78:	4615      	mov	r5, r2
 80a0a7a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0a7c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0a7e:	460e      	mov	r6, r1
 80a0a80:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0a82:	2100      	movs	r1, #0
 80a0a84:	a803      	add	r0, sp, #12
 80a0a86:	f000 f9e5 	bl	80a0e54 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0a8a:	4628      	mov	r0, r5
 80a0a8c:	f000 fa18 	bl	80a0ec0 <strlen>
 80a0a90:	2700      	movs	r7, #0
 80a0a92:	b281      	uxth	r1, r0
 80a0a94:	6873      	ldr	r3, [r6, #4]
 80a0a96:	4628      	mov	r0, r5
 80a0a98:	9700      	str	r7, [sp, #0]
 80a0a9a:	aa03      	add	r2, sp, #12
 80a0a9c:	f7ff fc46 	bl	80a032c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0aa0:	b130      	cbz	r0, 80a0ab0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0aa2:	4639      	mov	r1, r7
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f7ff fe67 	bl	80a0778 <_ZN9IPAddressC1Em>
    }
 80a0aaa:	4620      	mov	r0, r4
 80a0aac:	b009      	add	sp, #36	; 0x24
 80a0aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ab0:	4620      	mov	r0, r4
 80a0ab2:	a903      	add	r1, sp, #12
 80a0ab4:	f7ff fe4e 	bl	80a0754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0ab8:	e7f7      	b.n	80a0aaa <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0aba <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0aba:	2200      	movs	r2, #0
 80a0abc:	6840      	ldr	r0, [r0, #4]
 80a0abe:	4611      	mov	r1, r2
 80a0ac0:	f7ff bc98 	b.w	80a03f4 <network_listening>

080a0ac4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0ac4:	2200      	movs	r2, #0
 80a0ac6:	6840      	ldr	r0, [r0, #4]
 80a0ac8:	4611      	mov	r1, r2
 80a0aca:	f7ff bca3 	b.w	80a0414 <network_get_listen_timeout>

080a0ace <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0ace:	2200      	movs	r2, #0
 80a0ad0:	6840      	ldr	r0, [r0, #4]
 80a0ad2:	f7ff bc97 	b.w	80a0404 <network_set_listen_timeout>

080a0ad6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0ad6:	2200      	movs	r2, #0
 80a0ad8:	6840      	ldr	r0, [r0, #4]
 80a0ada:	f081 0101 	eor.w	r1, r1, #1
 80a0ade:	f7ff bc81 	b.w	80a03e4 <network_listen>

080a0ae2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0ae2:	2300      	movs	r3, #0
 80a0ae4:	6840      	ldr	r0, [r0, #4]
 80a0ae6:	461a      	mov	r2, r3
 80a0ae8:	4619      	mov	r1, r3
 80a0aea:	f7ff bc73 	b.w	80a03d4 <network_off>

080a0aee <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a0aee:	2300      	movs	r3, #0
 80a0af0:	6840      	ldr	r0, [r0, #4]
 80a0af2:	461a      	mov	r2, r3
 80a0af4:	4619      	mov	r1, r3
 80a0af6:	f7ff bc65 	b.w	80a03c4 <network_on>

080a0afa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0afa:	2200      	movs	r2, #0
 80a0afc:	6840      	ldr	r0, [r0, #4]
 80a0afe:	4611      	mov	r1, r2
 80a0b00:	f7ff bc48 	b.w	80a0394 <network_connecting>

080a0b04 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0b04:	2200      	movs	r2, #0
 80a0b06:	2102      	movs	r1, #2
 80a0b08:	6840      	ldr	r0, [r0, #4]
 80a0b0a:	f7ff bc4b 	b.w	80a03a4 <network_disconnect>

080a0b0e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0b0e:	2300      	movs	r3, #0
 80a0b10:	6840      	ldr	r0, [r0, #4]
 80a0b12:	461a      	mov	r2, r3
 80a0b14:	f7ff bc36 	b.w	80a0384 <network_connect>

080a0b18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0b18:	2204      	movs	r2, #4
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0b1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0b1e:	4a02      	ldr	r2, [pc, #8]	; (80a0b28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0b20:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0b22:	4770      	bx	lr
 80a0b24:	200003dc 	.word	0x200003dc
 80a0b28:	080a1078 	.word	0x080a1078

080a0b2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0b2c:	2300      	movs	r3, #0
 80a0b2e:	6840      	ldr	r0, [r0, #4]
 80a0b30:	461a      	mov	r2, r3
 80a0b32:	f7ff bc27 	b.w	80a0384 <network_connect>

080a0b36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0b36:	2200      	movs	r2, #0
 80a0b38:	2102      	movs	r1, #2
 80a0b3a:	6840      	ldr	r0, [r0, #4]
 80a0b3c:	f7ff bc32 	b.w	80a03a4 <network_disconnect>

080a0b40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0b40:	2200      	movs	r2, #0
 80a0b42:	6840      	ldr	r0, [r0, #4]
 80a0b44:	4611      	mov	r1, r2
 80a0b46:	f7ff bc25 	b.w	80a0394 <network_connecting>

080a0b4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0b4a:	2200      	movs	r2, #0
 80a0b4c:	6840      	ldr	r0, [r0, #4]
 80a0b4e:	4611      	mov	r1, r2
 80a0b50:	f7ff bc30 	b.w	80a03b4 <network_ready>

080a0b54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0b54:	2300      	movs	r3, #0
 80a0b56:	6840      	ldr	r0, [r0, #4]
 80a0b58:	461a      	mov	r2, r3
 80a0b5a:	4619      	mov	r1, r3
 80a0b5c:	f7ff bc32 	b.w	80a03c4 <network_on>

080a0b60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0b60:	2300      	movs	r3, #0
 80a0b62:	6840      	ldr	r0, [r0, #4]
 80a0b64:	461a      	mov	r2, r3
 80a0b66:	4619      	mov	r1, r3
 80a0b68:	f7ff bc34 	b.w	80a03d4 <network_off>

080a0b6c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0b6c:	2100      	movs	r1, #0
 80a0b6e:	6840      	ldr	r0, [r0, #4]
 80a0b70:	f7ff bc58 	b.w	80a0424 <network_is_on>

080a0b74 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0b74:	2100      	movs	r1, #0
 80a0b76:	6840      	ldr	r0, [r0, #4]
 80a0b78:	f7ff bc5c 	b.w	80a0434 <network_is_off>

080a0b7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0b7c:	2200      	movs	r2, #0
 80a0b7e:	6840      	ldr	r0, [r0, #4]
 80a0b80:	f081 0101 	eor.w	r1, r1, #1
 80a0b84:	f7ff bc2e 	b.w	80a03e4 <network_listen>

080a0b88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0b88:	2200      	movs	r2, #0
 80a0b8a:	6840      	ldr	r0, [r0, #4]
 80a0b8c:	f7ff bc3a 	b.w	80a0404 <network_set_listen_timeout>

080a0b90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0b90:	2200      	movs	r2, #0
 80a0b92:	6840      	ldr	r0, [r0, #4]
 80a0b94:	4611      	mov	r1, r2
 80a0b96:	f7ff bc3d 	b.w	80a0414 <network_get_listen_timeout>

080a0b9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0b9a:	2200      	movs	r2, #0
 80a0b9c:	6840      	ldr	r0, [r0, #4]
 80a0b9e:	4611      	mov	r1, r2
 80a0ba0:	f7ff bc28 	b.w	80a03f4 <network_listening>

080a0ba4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0ba4:	b570      	push	{r4, r5, r6, lr}
 80a0ba6:	4615      	mov	r5, r2
 80a0ba8:	b08e      	sub	sp, #56	; 0x38
 80a0baa:	4604      	mov	r4, r0
    IPAddress addr;
 80a0bac:	a808      	add	r0, sp, #32
 80a0bae:	f7ff fdc3 	bl	80a0738 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0bb2:	2211      	movs	r2, #17
 80a0bb4:	2100      	movs	r1, #0
 80a0bb6:	a803      	add	r0, sp, #12
 80a0bb8:	f000 f94c 	bl	80a0e54 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0bbc:	2600      	movs	r6, #0
 80a0bbe:	4628      	mov	r0, r5
 80a0bc0:	f000 f97e 	bl	80a0ec0 <strlen>
 80a0bc4:	4b0a      	ldr	r3, [pc, #40]	; (80a0bf0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0bc6:	9600      	str	r6, [sp, #0]
 80a0bc8:	b281      	uxth	r1, r0
 80a0bca:	685b      	ldr	r3, [r3, #4]
 80a0bcc:	4628      	mov	r0, r5
 80a0bce:	aa03      	add	r2, sp, #12
 80a0bd0:	f7ff fbac 	bl	80a032c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0bd4:	b130      	cbz	r0, 80a0be4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0bd6:	4631      	mov	r1, r6
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	f7ff fdcd 	bl	80a0778 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0bde:	4620      	mov	r0, r4
 80a0be0:	b00e      	add	sp, #56	; 0x38
 80a0be2:	bd70      	pop	{r4, r5, r6, pc}
 80a0be4:	4620      	mov	r0, r4
 80a0be6:	a903      	add	r1, sp, #12
 80a0be8:	f7ff fdb4 	bl	80a0754 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0bec:	e7f7      	b.n	80a0bde <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0bee:	bf00      	nop
 80a0bf0:	200003dc 	.word	0x200003dc

080a0bf4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0bf4:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0bf6:	4a03      	ldr	r2, [pc, #12]	; (80a0c04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0bf8:	601a      	str	r2, [r3, #0]
 80a0bfa:	2200      	movs	r2, #0
 80a0bfc:	605a      	str	r2, [r3, #4]

} // spark
 80a0bfe:	4770      	bx	lr
 80a0c00:	200003e4 	.word	0x200003e4
 80a0c04:	080a10b4 	.word	0x080a10b4

080a0c08 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0c08:	4b02      	ldr	r3, [pc, #8]	; (80a0c14 <__tcf_0+0xc>)
 80a0c0a:	6898      	ldr	r0, [r3, #8]
 80a0c0c:	b108      	cbz	r0, 80a0c12 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0c0e:	f7ff bac3 	b.w	80a0198 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0c12:	4770      	bx	lr
 80a0c14:	200003f0 	.word	0x200003f0

080a0c18 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0c18:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0c1a:	b570      	push	{r4, r5, r6, lr}
 80a0c1c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0c1e:	d901      	bls.n	80a0c24 <pinAvailable+0xc>
    return false;
 80a0c20:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0c22:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0c24:	f1a0 030d 	sub.w	r3, r0, #13
 80a0c28:	2b02      	cmp	r3, #2
 80a0c2a:	d90b      	bls.n	80a0c44 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0c2c:	2801      	cmp	r0, #1
 80a0c2e:	d824      	bhi.n	80a0c7a <pinAvailable+0x62>
 80a0c30:	f000 f8d6 	bl	80a0de0 <_Z19__fetch_global_Wirev>
 80a0c34:	2100      	movs	r1, #0
 80a0c36:	7c00      	ldrb	r0, [r0, #16]
 80a0c38:	f7ff fb1e 	bl	80a0278 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0c3c:	f080 0001 	eor.w	r0, r0, #1
 80a0c40:	b2c0      	uxtb	r0, r0
 80a0c42:	e7ee      	b.n	80a0c22 <pinAvailable+0xa>
 80a0c44:	4e12      	ldr	r6, [pc, #72]	; (80a0c90 <pinAvailable+0x78>)
 80a0c46:	7831      	ldrb	r1, [r6, #0]
 80a0c48:	f3bf 8f5b 	dmb	ish
 80a0c4c:	f011 0501 	ands.w	r5, r1, #1
 80a0c50:	d10d      	bne.n	80a0c6e <pinAvailable+0x56>
 80a0c52:	4630      	mov	r0, r6
 80a0c54:	f7ff fa23 	bl	80a009e <__cxa_guard_acquire>
 80a0c58:	b148      	cbz	r0, 80a0c6e <pinAvailable+0x56>
 80a0c5a:	4629      	mov	r1, r5
 80a0c5c:	480d      	ldr	r0, [pc, #52]	; (80a0c94 <pinAvailable+0x7c>)
 80a0c5e:	f7ff fc19 	bl	80a0494 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0c62:	4630      	mov	r0, r6
 80a0c64:	f7ff fa20 	bl	80a00a8 <__cxa_guard_release>
 80a0c68:	480b      	ldr	r0, [pc, #44]	; (80a0c98 <pinAvailable+0x80>)
 80a0c6a:	f000 f8df 	bl	80a0e2c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0c6e:	4b09      	ldr	r3, [pc, #36]	; (80a0c94 <pinAvailable+0x7c>)
 80a0c70:	7818      	ldrb	r0, [r3, #0]
 80a0c72:	f7ff fb1b 	bl	80a02ac <hal_spi_is_enabled>
 80a0c76:	2800      	cmp	r0, #0
 80a0c78:	d1d2      	bne.n	80a0c20 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0c7a:	3c12      	subs	r4, #18
 80a0c7c:	2c01      	cmp	r4, #1
 80a0c7e:	d805      	bhi.n	80a0c8c <pinAvailable+0x74>
 80a0c80:	f000 f864 	bl	80a0d4c <_Z22__fetch_global_Serial1v>
 80a0c84:	7c00      	ldrb	r0, [r0, #16]
 80a0c86:	f7ff fab7 	bl	80a01f8 <hal_usart_is_enabled>
 80a0c8a:	e7d7      	b.n	80a0c3c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0c8c:	2001      	movs	r0, #1
 80a0c8e:	e7c8      	b.n	80a0c22 <pinAvailable+0xa>
 80a0c90:	200003ec 	.word	0x200003ec
 80a0c94:	200003f0 	.word	0x200003f0
 80a0c98:	080a0c09 	.word	0x080a0c09

080a0c9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0c9c:	2817      	cmp	r0, #23
{
 80a0c9e:	b538      	push	{r3, r4, r5, lr}
 80a0ca0:	4604      	mov	r4, r0
 80a0ca2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ca4:	d80a      	bhi.n	80a0cbc <pinMode+0x20>
 80a0ca6:	29ff      	cmp	r1, #255	; 0xff
 80a0ca8:	d008      	beq.n	80a0cbc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0caa:	f7ff ffb5 	bl	80a0c18 <pinAvailable>
 80a0cae:	b128      	cbz	r0, 80a0cbc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0cb0:	4629      	mov	r1, r5
 80a0cb2:	4620      	mov	r0, r4
}
 80a0cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0cb8:	f7ff ba36 	b.w	80a0128 <HAL_Pin_Mode>
}
 80a0cbc:	bd38      	pop	{r3, r4, r5, pc}

080a0cbe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0cbe:	b538      	push	{r3, r4, r5, lr}
 80a0cc0:	4604      	mov	r4, r0
 80a0cc2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0cc4:	f7ff fa38 	bl	80a0138 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0cc8:	28ff      	cmp	r0, #255	; 0xff
 80a0cca:	d010      	beq.n	80a0cee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a0ccc:	2806      	cmp	r0, #6
 80a0cce:	d804      	bhi.n	80a0cda <digitalWrite+0x1c>
 80a0cd0:	234d      	movs	r3, #77	; 0x4d
 80a0cd2:	fa23 f000 	lsr.w	r0, r3, r0
 80a0cd6:	07c3      	lsls	r3, r0, #31
 80a0cd8:	d409      	bmi.n	80a0cee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	f7ff ff9c 	bl	80a0c18 <pinAvailable>
 80a0ce0:	b128      	cbz	r0, 80a0cee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0ce2:	4629      	mov	r1, r5
 80a0ce4:	4620      	mov	r0, r4
}
 80a0ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a0cea:	f7ff ba2d 	b.w	80a0148 <HAL_GPIO_Write>
}
 80a0cee:	bd38      	pop	{r3, r4, r5, pc}

080a0cf0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a0cf0:	b510      	push	{r4, lr}
 80a0cf2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0cf4:	f7ff fa20 	bl	80a0138 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a0cf8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a0cfa:	b2db      	uxtb	r3, r3
 80a0cfc:	2b01      	cmp	r3, #1
 80a0cfe:	d908      	bls.n	80a0d12 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a0d00:	4620      	mov	r0, r4
 80a0d02:	f7ff ff89 	bl	80a0c18 <pinAvailable>
 80a0d06:	b120      	cbz	r0, 80a0d12 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0d08:	4620      	mov	r0, r4
}
 80a0d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a0d0e:	f7ff ba23 	b.w	80a0158 <HAL_GPIO_Read>
}
 80a0d12:	2000      	movs	r0, #0
 80a0d14:	bd10      	pop	{r4, pc}

080a0d16 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0d16:	4770      	bx	lr

080a0d18 <_Z20acquireSerial1Bufferv>:
{
 80a0d18:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a0d1a:	2514      	movs	r5, #20
{
 80a0d1c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a0d1e:	462a      	mov	r2, r5
 80a0d20:	2100      	movs	r1, #0
 80a0d22:	f000 f897 	bl	80a0e54 <memset>
 80a0d26:	8025      	strh	r5, [r4, #0]
 80a0d28:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0d2a:	4e07      	ldr	r6, [pc, #28]	; (80a0d48 <_Z20acquireSerial1Bufferv+0x30>)
 80a0d2c:	4628      	mov	r0, r5
 80a0d2e:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a0d30:	8125      	strh	r5, [r4, #8]
 80a0d32:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0d34:	f000 f878 	bl	80a0e28 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0d38:	4631      	mov	r1, r6
    };
 80a0d3a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0d3c:	4628      	mov	r0, r5
 80a0d3e:	f000 f873 	bl	80a0e28 <_ZnajRKSt9nothrow_t>
    };
 80a0d42:	60e0      	str	r0, [r4, #12]
}
 80a0d44:	4620      	mov	r0, r4
 80a0d46:	bd70      	pop	{r4, r5, r6, pc}
 80a0d48:	080a10e8 	.word	0x080a10e8

080a0d4c <_Z22__fetch_global_Serial1v>:
{
 80a0d4c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0d4e:	4d0e      	ldr	r5, [pc, #56]	; (80a0d88 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a0d50:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0d52:	7829      	ldrb	r1, [r5, #0]
 80a0d54:	f3bf 8f5b 	dmb	ish
 80a0d58:	f011 0401 	ands.w	r4, r1, #1
 80a0d5c:	d111      	bne.n	80a0d82 <_Z22__fetch_global_Serial1v+0x36>
 80a0d5e:	4628      	mov	r0, r5
 80a0d60:	f7ff f99d 	bl	80a009e <__cxa_guard_acquire>
 80a0d64:	b168      	cbz	r0, 80a0d82 <_Z22__fetch_global_Serial1v+0x36>
 80a0d66:	a801      	add	r0, sp, #4
 80a0d68:	f7ff ffd6 	bl	80a0d18 <_Z20acquireSerial1Bufferv>
 80a0d6c:	4621      	mov	r1, r4
 80a0d6e:	aa01      	add	r2, sp, #4
 80a0d70:	4806      	ldr	r0, [pc, #24]	; (80a0d8c <_Z22__fetch_global_Serial1v+0x40>)
 80a0d72:	f7ff fe29 	bl	80a09c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a0d76:	4628      	mov	r0, r5
 80a0d78:	f7ff f996 	bl	80a00a8 <__cxa_guard_release>
 80a0d7c:	4804      	ldr	r0, [pc, #16]	; (80a0d90 <_Z22__fetch_global_Serial1v+0x44>)
 80a0d7e:	f000 f855 	bl	80a0e2c <atexit>
    return serial1;
}
 80a0d82:	4802      	ldr	r0, [pc, #8]	; (80a0d8c <_Z22__fetch_global_Serial1v+0x40>)
 80a0d84:	b007      	add	sp, #28
 80a0d86:	bd30      	pop	{r4, r5, pc}
 80a0d88:	200003fc 	.word	0x200003fc
 80a0d8c:	20000400 	.word	0x20000400
 80a0d90:	080a0d17 	.word	0x080a0d17

080a0d94 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0d94:	2300      	movs	r3, #0
 80a0d96:	b507      	push	{r0, r1, r2, lr}
 80a0d98:	461a      	mov	r2, r3
 80a0d9a:	4619      	mov	r1, r3
 80a0d9c:	9300      	str	r3, [sp, #0]
 80a0d9e:	4803      	ldr	r0, [pc, #12]	; (80a0dac <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0da0:	f7ff fd00 	bl	80a07a4 <_ZN9IPAddressC1Ehhhh>
 80a0da4:	b003      	add	sp, #12
 80a0da6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0daa:	bf00      	nop
 80a0dac:	20000418 	.word	0x20000418

080a0db0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0db0:	4770      	bx	lr
	...

080a0db4 <_Z17acquireWireBufferv>:
{
 80a0db4:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0db6:	2314      	movs	r3, #20
 80a0db8:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dba:	4e08      	ldr	r6, [pc, #32]	; (80a0ddc <_Z17acquireWireBufferv+0x28>)
{
 80a0dbc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0dbe:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dc0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0dc2:	6085      	str	r5, [r0, #8]
 80a0dc4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dc6:	4628      	mov	r0, r5
 80a0dc8:	f000 f82e 	bl	80a0e28 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dcc:	4631      	mov	r1, r6
	};
 80a0dce:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0dd0:	4628      	mov	r0, r5
 80a0dd2:	f000 f829 	bl	80a0e28 <_ZnajRKSt9nothrow_t>
	};
 80a0dd6:	60e0      	str	r0, [r4, #12]
}
 80a0dd8:	4620      	mov	r0, r4
 80a0dda:	bd70      	pop	{r4, r5, r6, pc}
 80a0ddc:	080a10e8 	.word	0x080a10e8

080a0de0 <_Z19__fetch_global_Wirev>:
{
 80a0de0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0de2:	4d0e      	ldr	r5, [pc, #56]	; (80a0e1c <_Z19__fetch_global_Wirev+0x3c>)
{
 80a0de4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0de6:	7829      	ldrb	r1, [r5, #0]
 80a0de8:	f3bf 8f5b 	dmb	ish
 80a0dec:	f011 0401 	ands.w	r4, r1, #1
 80a0df0:	d111      	bne.n	80a0e16 <_Z19__fetch_global_Wirev+0x36>
 80a0df2:	4628      	mov	r0, r5
 80a0df4:	f7ff f953 	bl	80a009e <__cxa_guard_acquire>
 80a0df8:	b168      	cbz	r0, 80a0e16 <_Z19__fetch_global_Wirev+0x36>
 80a0dfa:	a801      	add	r0, sp, #4
 80a0dfc:	f7ff ffda 	bl	80a0db4 <_Z17acquireWireBufferv>
 80a0e00:	4621      	mov	r1, r4
 80a0e02:	aa01      	add	r2, sp, #4
 80a0e04:	4806      	ldr	r0, [pc, #24]	; (80a0e20 <_Z19__fetch_global_Wirev+0x40>)
 80a0e06:	f7ff fe1f 	bl	80a0a48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0e0a:	4628      	mov	r0, r5
 80a0e0c:	f7ff f94c 	bl	80a00a8 <__cxa_guard_release>
 80a0e10:	4804      	ldr	r0, [pc, #16]	; (80a0e24 <_Z19__fetch_global_Wirev+0x44>)
 80a0e12:	f000 f80b 	bl	80a0e2c <atexit>
	return wire;
}
 80a0e16:	4802      	ldr	r0, [pc, #8]	; (80a0e20 <_Z19__fetch_global_Wirev+0x40>)
 80a0e18:	b007      	add	sp, #28
 80a0e1a:	bd30      	pop	{r4, r5, pc}
 80a0e1c:	20000430 	.word	0x20000430
 80a0e20:	20000434 	.word	0x20000434
 80a0e24:	080a0db1 	.word	0x080a0db1

080a0e28 <_ZnajRKSt9nothrow_t>:
 80a0e28:	f7ff b935 	b.w	80a0096 <_Znaj>

080a0e2c <atexit>:
 80a0e2c:	2300      	movs	r3, #0
 80a0e2e:	4601      	mov	r1, r0
 80a0e30:	461a      	mov	r2, r3
 80a0e32:	4618      	mov	r0, r3
 80a0e34:	f000 b84c 	b.w	80a0ed0 <__register_exitproc>

080a0e38 <memcpy>:
 80a0e38:	440a      	add	r2, r1
 80a0e3a:	4291      	cmp	r1, r2
 80a0e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 80a0e40:	d100      	bne.n	80a0e44 <memcpy+0xc>
 80a0e42:	4770      	bx	lr
 80a0e44:	b510      	push	{r4, lr}
 80a0e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0e4a:	4291      	cmp	r1, r2
 80a0e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0e50:	d1f9      	bne.n	80a0e46 <memcpy+0xe>
 80a0e52:	bd10      	pop	{r4, pc}

080a0e54 <memset>:
 80a0e54:	4603      	mov	r3, r0
 80a0e56:	4402      	add	r2, r0
 80a0e58:	4293      	cmp	r3, r2
 80a0e5a:	d100      	bne.n	80a0e5e <memset+0xa>
 80a0e5c:	4770      	bx	lr
 80a0e5e:	f803 1b01 	strb.w	r1, [r3], #1
 80a0e62:	e7f9      	b.n	80a0e58 <memset+0x4>

080a0e64 <srand>:
 80a0e64:	b538      	push	{r3, r4, r5, lr}
 80a0e66:	4b10      	ldr	r3, [pc, #64]	; (80a0ea8 <srand+0x44>)
 80a0e68:	4604      	mov	r4, r0
 80a0e6a:	681d      	ldr	r5, [r3, #0]
 80a0e6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0e6e:	b9b3      	cbnz	r3, 80a0e9e <srand+0x3a>
 80a0e70:	2018      	movs	r0, #24
 80a0e72:	f7ff faef 	bl	80a0454 <malloc>
 80a0e76:	4602      	mov	r2, r0
 80a0e78:	63a8      	str	r0, [r5, #56]	; 0x38
 80a0e7a:	b920      	cbnz	r0, 80a0e86 <srand+0x22>
 80a0e7c:	2142      	movs	r1, #66	; 0x42
 80a0e7e:	4b0b      	ldr	r3, [pc, #44]	; (80a0eac <srand+0x48>)
 80a0e80:	480b      	ldr	r0, [pc, #44]	; (80a0eb0 <srand+0x4c>)
 80a0e82:	f7ff faf7 	bl	80a0474 <__assert_func>
 80a0e86:	490b      	ldr	r1, [pc, #44]	; (80a0eb4 <srand+0x50>)
 80a0e88:	4b0b      	ldr	r3, [pc, #44]	; (80a0eb8 <srand+0x54>)
 80a0e8a:	e9c0 1300 	strd	r1, r3, [r0]
 80a0e8e:	4b0b      	ldr	r3, [pc, #44]	; (80a0ebc <srand+0x58>)
 80a0e90:	2100      	movs	r1, #0
 80a0e92:	6083      	str	r3, [r0, #8]
 80a0e94:	230b      	movs	r3, #11
 80a0e96:	8183      	strh	r3, [r0, #12]
 80a0e98:	2001      	movs	r0, #1
 80a0e9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a0e9e:	2200      	movs	r2, #0
 80a0ea0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0ea2:	611c      	str	r4, [r3, #16]
 80a0ea4:	615a      	str	r2, [r3, #20]
 80a0ea6:	bd38      	pop	{r3, r4, r5, pc}
 80a0ea8:	20000008 	.word	0x20000008
 80a0eac:	080a10e9 	.word	0x080a10e9
 80a0eb0:	080a1100 	.word	0x080a1100
 80a0eb4:	abcd330e 	.word	0xabcd330e
 80a0eb8:	e66d1234 	.word	0xe66d1234
 80a0ebc:	0005deec 	.word	0x0005deec

080a0ec0 <strlen>:
 80a0ec0:	4603      	mov	r3, r0
 80a0ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0ec6:	2a00      	cmp	r2, #0
 80a0ec8:	d1fb      	bne.n	80a0ec2 <strlen+0x2>
 80a0eca:	1a18      	subs	r0, r3, r0
 80a0ecc:	3801      	subs	r0, #1
 80a0ece:	4770      	bx	lr

080a0ed0 <__register_exitproc>:
 80a0ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0ed4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a0f84 <__register_exitproc+0xb4>
 80a0ed8:	4606      	mov	r6, r0
 80a0eda:	f8d8 0000 	ldr.w	r0, [r8]
 80a0ede:	461f      	mov	r7, r3
 80a0ee0:	460d      	mov	r5, r1
 80a0ee2:	4691      	mov	r9, r2
 80a0ee4:	f000 f858 	bl	80a0f98 <__retarget_lock_acquire_recursive>
 80a0ee8:	4b27      	ldr	r3, [pc, #156]	; (80a0f88 <__register_exitproc+0xb8>)
 80a0eea:	681c      	ldr	r4, [r3, #0]
 80a0eec:	b934      	cbnz	r4, 80a0efc <__register_exitproc+0x2c>
 80a0eee:	4c27      	ldr	r4, [pc, #156]	; (80a0f8c <__register_exitproc+0xbc>)
 80a0ef0:	601c      	str	r4, [r3, #0]
 80a0ef2:	4b27      	ldr	r3, [pc, #156]	; (80a0f90 <__register_exitproc+0xc0>)
 80a0ef4:	b113      	cbz	r3, 80a0efc <__register_exitproc+0x2c>
 80a0ef6:	681b      	ldr	r3, [r3, #0]
 80a0ef8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a0efc:	6863      	ldr	r3, [r4, #4]
 80a0efe:	2b1f      	cmp	r3, #31
 80a0f00:	dd07      	ble.n	80a0f12 <__register_exitproc+0x42>
 80a0f02:	f8d8 0000 	ldr.w	r0, [r8]
 80a0f06:	f000 f849 	bl	80a0f9c <__retarget_lock_release_recursive>
 80a0f0a:	f04f 30ff 	mov.w	r0, #4294967295
 80a0f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0f12:	b35e      	cbz	r6, 80a0f6c <__register_exitproc+0x9c>
 80a0f14:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a0f18:	b988      	cbnz	r0, 80a0f3e <__register_exitproc+0x6e>
 80a0f1a:	4b1e      	ldr	r3, [pc, #120]	; (80a0f94 <__register_exitproc+0xc4>)
 80a0f1c:	b923      	cbnz	r3, 80a0f28 <__register_exitproc+0x58>
 80a0f1e:	f8d8 0000 	ldr.w	r0, [r8]
 80a0f22:	f000 f83a 	bl	80a0f9a <__retarget_lock_release>
 80a0f26:	e7f0      	b.n	80a0f0a <__register_exitproc+0x3a>
 80a0f28:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a0f2c:	f7ff fa92 	bl	80a0454 <malloc>
 80a0f30:	2800      	cmp	r0, #0
 80a0f32:	d0f4      	beq.n	80a0f1e <__register_exitproc+0x4e>
 80a0f34:	2300      	movs	r3, #0
 80a0f36:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a0f3a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a0f3e:	2201      	movs	r2, #1
 80a0f40:	6863      	ldr	r3, [r4, #4]
 80a0f42:	2e02      	cmp	r6, #2
 80a0f44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a0f48:	fa02 f203 	lsl.w	r2, r2, r3
 80a0f4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a0f50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a0f54:	ea43 0302 	orr.w	r3, r3, r2
 80a0f58:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a0f5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a0f60:	bf02      	ittt	eq
 80a0f62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a0f66:	4313      	orreq	r3, r2
 80a0f68:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a0f6c:	6863      	ldr	r3, [r4, #4]
 80a0f6e:	f8d8 0000 	ldr.w	r0, [r8]
 80a0f72:	1c5a      	adds	r2, r3, #1
 80a0f74:	3302      	adds	r3, #2
 80a0f76:	6062      	str	r2, [r4, #4]
 80a0f78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a0f7c:	f000 f80e 	bl	80a0f9c <__retarget_lock_release_recursive>
 80a0f80:	2000      	movs	r0, #0
 80a0f82:	e7c4      	b.n	80a0f0e <__register_exitproc+0x3e>
 80a0f84:	2000006c 	.word	0x2000006c
 80a0f88:	200004d4 	.word	0x200004d4
 80a0f8c:	20000448 	.word	0x20000448
 80a0f90:	00000000 	.word	0x00000000
 80a0f94:	080a0455 	.word	0x080a0455

080a0f98 <__retarget_lock_acquire_recursive>:
 80a0f98:	4770      	bx	lr

080a0f9a <__retarget_lock_release>:
 80a0f9a:	4770      	bx	lr

080a0f9c <__retarget_lock_release_recursive>:
 80a0f9c:	4770      	bx	lr

080a0f9e <link_code_end>:
	...

080a0fa0 <dynalib_user>:
 80a0fa0:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a0fb0:	0000 0000 7061 0070 5925 252d 2d6d 6425     ....app.%Y-%m-%d
 80a0fc0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a0fd0:	6d69 0065                                   ime.

080a0fd4 <_ZTV9IPAddress>:
	...
 80a0fdc:	06f7 080a 06f5 080a 0729 080a               ........)...

080a0fe8 <_ZTV9USBSerial>:
	...
 80a0ff0:	07c3 080a 0829 080a 0801 080a 04d9 080a     ....)...........
 80a1000:	07f3 080a 07c5 080a 07d5 080a 0823 080a     ............#...
 80a1010:	07e5 080a 07bd 080a                         ........

080a1018 <_ZTV11USARTSerial>:
	...
 80a1020:	0951 080a 09b9 080a 0995 080a 04d9 080a     Q...............
 80a1030:	0965 080a 0981 080a 0973 080a 098f 080a     e.......s.......
 80a1040:	0953 080a 0957 080a                         S...W...

080a1048 <_ZTV7TwoWire>:
	...
 80a1050:	09f1 080a 0a3b 080a 0a13 080a 09f3 080a     ....;...........
 80a1060:	0a1b 080a 0a23 080a 0a2b 080a 0a33 080a     ....#...+...3...

080a1070 <_ZTVN5spark9WiFiClassE>:
	...
 80a1078:	0b0f 080a 0b05 080a 0afb 080a 0a6d 080a     ............m...
 80a1088:	0aef 080a 0ae3 080a 0b6d 080a 0b75 080a     ........m...u...
 80a1098:	0ad7 080a 0acf 080a 0ac5 080a 0abb 080a     ................
 80a10a8:	0a77 080a                                   w...

080a10ac <_ZTVN5spark12NetworkClassE>:
	...
 80a10b4:	0b2d 080a 0b37 080a 0b41 080a 0b4b 080a     -...7...A...K...
 80a10c4:	0b55 080a 0b61 080a 0b6d 080a 0b75 080a     U...a...m...u...
 80a10d4:	0b7d 080a 0b89 080a 0b91 080a 0b9b 080a     }...............
 80a10e4:	0ba5 080a                                   ....

080a10e8 <_ZSt7nothrow>:
 80a10e8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a10f8:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a1108:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a1118:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a1128:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a1138:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a1148:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a1158:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a1168:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a1178:	646e 632e                                    nd.c.

080a117d <link_const_variable_data_end>:
 80a117d:	00          	.byte	0x00
	...

080a1180 <link_constructors_location>:
 80a1180:	080a0115 	.word	0x080a0115
 80a1184:	080a04b5 	.word	0x080a04b5
 80a1188:	080a0565 	.word	0x080a0565
 80a118c:	080a0575 	.word	0x080a0575
 80a1190:	080a0589 	.word	0x080a0589
 80a1194:	080a0b19 	.word	0x080a0b19
 80a1198:	080a0bf5 	.word	0x080a0bf5
 80a119c:	080a0d95 	.word	0x080a0d95
