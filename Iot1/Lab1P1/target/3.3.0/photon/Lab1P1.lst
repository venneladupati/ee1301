
c:/Users/venne/OneDrive/Documents/GitHub/ee1301/Iot1/Lab1P1/target/3.3.0/photon/Lab1P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001154  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1170  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a1174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000468  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a11e4  080a11e4  000211e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a120c  080a120c  0002120c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009336e  00000000  00000000  00021210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000d92c  00000000  00000000  000b457e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00011ad0  00000000  00000000  000c1eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ae8  00000000  00000000  000d397a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00003ad8  00000000  00000000  000d5462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00024823  00000000  00000000  000d8f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00024577  00000000  00000000  000fd75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000afc9c  00000000  00000000  00121cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000041b0  00000000  00000000  001d1970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 feeb 	bl	80a0e08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 fef3 	bl	80a0e24 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1174 	.word	0x080a1174
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	200004d5 	.word	0x200004d5
 80a0058:	200004d5 	.word	0x200004d5

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fb15 	bl	80a068c <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a1150 	.word	0x080a1150
 80a0080:	080a1170 	.word	0x080a1170

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f823 	bl	80a00d4 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bab3 	b.w	80a05fc <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 b9d7 	b.w	80a0448 <malloc>

080a009a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009a:	f000 b9dd 	b.w	80a0458 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

// Having declared these variables, let's move on to the setup function.
// The setup function is a standard part of any microcontroller program.
// It runs only once when the device boots up or is reset.

void setup() {
 80a00b0:	b508      	push	{r3, lr}
  // We are going to tell our device that D0 and D7 (which we named led1 and led2 respectively) are going to be output
  // (That means that we will be sending voltage to them, rather than monitoring voltage that comes from them)

  // It's important you do this here, inside the setup() function rather than outside it or in the loop function.

  pinMode(led1, OUTPUT);
 80a00b2:	4b06      	ldr	r3, [pc, #24]	; (80a00cc <setup+0x1c>)
 80a00b4:	2101      	movs	r1, #1
 80a00b6:	8818      	ldrh	r0, [r3, #0]
 80a00b8:	f000 fdea 	bl	80a0c90 <pinMode>
  pinMode(led2, OUTPUT);
 80a00bc:	4b04      	ldr	r3, [pc, #16]	; (80a00d0 <setup+0x20>)
 80a00be:	2101      	movs	r1, #1
 80a00c0:	8818      	ldrh	r0, [r3, #0]

}
 80a00c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(led2, OUTPUT);
 80a00c6:	f000 bde3 	b.w	80a0c90 <pinMode>
 80a00ca:	bf00      	nop
 80a00cc:	20000070 	.word	0x20000070
 80a00d0:	20000000 	.word	0x20000000

080a00d4 <loop>:

// Next we have the loop function, the other essential part of a microcontroller program.
// This routine gets repeated over and over, as quickly as possible and as many times as possible, after the setup function is called.
// Note: Code that blocks for too long (like more than 5 seconds), can make weird things happen (like dropping the network connection).  The built-in delay function shown below safely interleaves required background activity, so arbitrarily long delays can safely be done if you need them.

void loop() {
 80a00d4:	b538      	push	{r3, r4, r5, lr}
  // To blink the LED, first we'll turn it on...
  digitalWrite(led1, HIGH);
 80a00d6:	4d0e      	ldr	r5, [pc, #56]	; (80a0110 <loop+0x3c>)
  digitalWrite(led2, HIGH);
 80a00d8:	4c0e      	ldr	r4, [pc, #56]	; (80a0114 <loop+0x40>)
  digitalWrite(led1, HIGH);
 80a00da:	8828      	ldrh	r0, [r5, #0]
 80a00dc:	2101      	movs	r1, #1
 80a00de:	f000 fde8 	bl	80a0cb2 <digitalWrite>
  digitalWrite(led2, HIGH);
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	8820      	ldrh	r0, [r4, #0]
 80a00e6:	f000 fde4 	bl	80a0cb2 <digitalWrite>

  // We'll leave it on for 1 second...
  delay(500);
 80a00ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00ee:	f000 fa45 	bl	80a057c <delay>

  // Then we'll turn it off...
  digitalWrite(led1, LOW);
 80a00f2:	8828      	ldrh	r0, [r5, #0]
 80a00f4:	2100      	movs	r1, #0
 80a00f6:	f000 fddc 	bl	80a0cb2 <digitalWrite>
  digitalWrite(led2, LOW);
 80a00fa:	8820      	ldrh	r0, [r4, #0]
 80a00fc:	2100      	movs	r1, #0
 80a00fe:	f000 fdd8 	bl	80a0cb2 <digitalWrite>

  // Wait 1 second...
  delay(500);

  // And repeat!
 80a0102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  delay(500);
 80a0106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a010a:	f000 ba37 	b.w	80a057c <delay>
 80a010e:	bf00      	nop
 80a0110:	20000070 	.word	0x20000070
 80a0114:	20000000 	.word	0x20000000

080a0118 <_GLOBAL__sub_I_led1>:
 80a0118:	b508      	push	{r3, lr}
    int scan(void (*handler)(WiFiAccessPoint* ap, T* instance), T* instance) {
        return scan((wlan_scan_result_t)handler, (void*)instance);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a011a:	2003      	movs	r0, #3
 80a011c:	f000 f900 	bl	80a0320 <wlan_select_antenna>
 80a0120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0124:	2003      	movs	r0, #3
 80a0126:	f000 b8fb 	b.w	80a0320 <wlan_select_antenna>
	...

080a012c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a012c:	b508      	push	{r3, lr}
 80a012e:	4b02      	ldr	r3, [pc, #8]	; (80a0138 <HAL_Pin_Mode+0xc>)
 80a0130:	681b      	ldr	r3, [r3, #0]
 80a0132:	689b      	ldr	r3, [r3, #8]
 80a0134:	9301      	str	r3, [sp, #4]
 80a0136:	bd08      	pop	{r3, pc}
 80a0138:	080601b0 	.word	0x080601b0

080a013c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a013c:	b508      	push	{r3, lr}
 80a013e:	4b02      	ldr	r3, [pc, #8]	; (80a0148 <HAL_Get_Pin_Mode+0xc>)
 80a0140:	681b      	ldr	r3, [r3, #0]
 80a0142:	68db      	ldr	r3, [r3, #12]
 80a0144:	9301      	str	r3, [sp, #4]
 80a0146:	bd08      	pop	{r3, pc}
 80a0148:	080601b0 	.word	0x080601b0

080a014c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a014c:	b508      	push	{r3, lr}
 80a014e:	4b02      	ldr	r3, [pc, #8]	; (80a0158 <HAL_GPIO_Write+0xc>)
 80a0150:	681b      	ldr	r3, [r3, #0]
 80a0152:	691b      	ldr	r3, [r3, #16]
 80a0154:	9301      	str	r3, [sp, #4]
 80a0156:	bd08      	pop	{r3, pc}
 80a0158:	080601b0 	.word	0x080601b0

080a015c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a015c:	b508      	push	{r3, lr}
 80a015e:	4b02      	ldr	r3, [pc, #8]	; (80a0168 <HAL_RNG_GetRandomNumber+0xc>)
 80a0160:	681b      	ldr	r3, [r3, #0]
 80a0162:	685b      	ldr	r3, [r3, #4]
 80a0164:	9301      	str	r3, [sp, #4]
 80a0166:	bd08      	pop	{r3, pc}
 80a0168:	0806019c 	.word	0x0806019c

080a016c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a016c:	b508      	push	{r3, lr}
 80a016e:	4b02      	ldr	r3, [pc, #8]	; (80a0178 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0170:	681b      	ldr	r3, [r3, #0]
 80a0172:	695b      	ldr	r3, [r3, #20]
 80a0174:	9301      	str	r3, [sp, #4]
 80a0176:	bd08      	pop	{r3, pc}
 80a0178:	0806019c 	.word	0x0806019c

080a017c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a017c:	b508      	push	{r3, lr}
 80a017e:	4b02      	ldr	r3, [pc, #8]	; (80a0188 <os_mutex_recursive_create+0xc>)
 80a0180:	681b      	ldr	r3, [r3, #0]
 80a0182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0184:	9301      	str	r3, [sp, #4]
 80a0186:	bd08      	pop	{r3, pc}
 80a0188:	080601d0 	.word	0x080601d0

080a018c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a018c:	b508      	push	{r3, lr}
 80a018e:	4b02      	ldr	r3, [pc, #8]	; (80a0198 <os_mutex_recursive_destroy+0xc>)
 80a0190:	681b      	ldr	r3, [r3, #0]
 80a0192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0194:	9301      	str	r3, [sp, #4]
 80a0196:	bd08      	pop	{r3, pc}
 80a0198:	080601d0 	.word	0x080601d0

080a019c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a019c:	b508      	push	{r3, lr}
 80a019e:	4b02      	ldr	r3, [pc, #8]	; (80a01a8 <hal_usart_write+0xc>)
 80a01a0:	681b      	ldr	r3, [r3, #0]
 80a01a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a01a4:	9301      	str	r3, [sp, #4]
 80a01a6:	bd08      	pop	{r3, pc}
 80a01a8:	080601c4 	.word	0x080601c4

080a01ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a01ac:	b508      	push	{r3, lr}
 80a01ae:	4b02      	ldr	r3, [pc, #8]	; (80a01b8 <hal_usart_available+0xc>)
 80a01b0:	681b      	ldr	r3, [r3, #0]
 80a01b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a01b4:	9301      	str	r3, [sp, #4]
 80a01b6:	bd08      	pop	{r3, pc}
 80a01b8:	080601c4 	.word	0x080601c4

080a01bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a01bc:	b508      	push	{r3, lr}
 80a01be:	4b02      	ldr	r3, [pc, #8]	; (80a01c8 <hal_usart_read+0xc>)
 80a01c0:	681b      	ldr	r3, [r3, #0]
 80a01c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a01c4:	9301      	str	r3, [sp, #4]
 80a01c6:	bd08      	pop	{r3, pc}
 80a01c8:	080601c4 	.word	0x080601c4

080a01cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a01cc:	b508      	push	{r3, lr}
 80a01ce:	4b02      	ldr	r3, [pc, #8]	; (80a01d8 <hal_usart_peek+0xc>)
 80a01d0:	681b      	ldr	r3, [r3, #0]
 80a01d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a01d4:	9301      	str	r3, [sp, #4]
 80a01d6:	bd08      	pop	{r3, pc}
 80a01d8:	080601c4 	.word	0x080601c4

080a01dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a01dc:	b508      	push	{r3, lr}
 80a01de:	4b02      	ldr	r3, [pc, #8]	; (80a01e8 <hal_usart_flush+0xc>)
 80a01e0:	681b      	ldr	r3, [r3, #0]
 80a01e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a01e4:	9301      	str	r3, [sp, #4]
 80a01e6:	bd08      	pop	{r3, pc}
 80a01e8:	080601c4 	.word	0x080601c4

080a01ec <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a01ec:	b508      	push	{r3, lr}
 80a01ee:	4b02      	ldr	r3, [pc, #8]	; (80a01f8 <hal_usart_is_enabled+0xc>)
 80a01f0:	681b      	ldr	r3, [r3, #0]
 80a01f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a01f4:	9301      	str	r3, [sp, #4]
 80a01f6:	bd08      	pop	{r3, pc}
 80a01f8:	080601c4 	.word	0x080601c4

080a01fc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a01fc:	b508      	push	{r3, lr}
 80a01fe:	4b02      	ldr	r3, [pc, #8]	; (80a0208 <hal_usart_available_data_for_write+0xc>)
 80a0200:	681b      	ldr	r3, [r3, #0]
 80a0202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0204:	9301      	str	r3, [sp, #4]
 80a0206:	bd08      	pop	{r3, pc}
 80a0208:	080601c4 	.word	0x080601c4

080a020c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a020c:	b508      	push	{r3, lr}
 80a020e:	4b02      	ldr	r3, [pc, #8]	; (80a0218 <hal_usart_init_ex+0xc>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0214:	9301      	str	r3, [sp, #4]
 80a0216:	bd08      	pop	{r3, pc}
 80a0218:	080601c4 	.word	0x080601c4

080a021c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a021c:	b508      	push	{r3, lr}
 80a021e:	4b02      	ldr	r3, [pc, #8]	; (80a0228 <hal_i2c_write+0xc>)
 80a0220:	681b      	ldr	r3, [r3, #0]
 80a0222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0224:	9301      	str	r3, [sp, #4]
 80a0226:	bd08      	pop	{r3, pc}
 80a0228:	080601ac 	.word	0x080601ac

080a022c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a022c:	b508      	push	{r3, lr}
 80a022e:	4b02      	ldr	r3, [pc, #8]	; (80a0238 <hal_i2c_available+0xc>)
 80a0230:	681b      	ldr	r3, [r3, #0]
 80a0232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0234:	9301      	str	r3, [sp, #4]
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	080601ac 	.word	0x080601ac

080a023c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <hal_i2c_read+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	080601ac 	.word	0x080601ac

080a024c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <hal_i2c_peek+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	080601ac 	.word	0x080601ac

080a025c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <hal_i2c_flush+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	080601ac 	.word	0x080601ac

080a026c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b02      	ldr	r3, [pc, #8]	; (80a0278 <hal_i2c_is_enabled+0xc>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0274:	9301      	str	r3, [sp, #4]
 80a0276:	bd08      	pop	{r3, pc}
 80a0278:	080601ac 	.word	0x080601ac

080a027c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a027c:	b508      	push	{r3, lr}
 80a027e:	4b03      	ldr	r3, [pc, #12]	; (80a028c <hal_i2c_init+0x10>)
 80a0280:	681b      	ldr	r3, [r3, #0]
 80a0282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0286:	9301      	str	r3, [sp, #4]
 80a0288:	bd08      	pop	{r3, pc}
 80a028a:	0000      	.short	0x0000
 80a028c:	080601ac 	.word	0x080601ac

080a0290 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0290:	b508      	push	{r3, lr}
 80a0292:	4b02      	ldr	r3, [pc, #8]	; (80a029c <hal_spi_init+0xc>)
 80a0294:	681b      	ldr	r3, [r3, #0]
 80a0296:	69db      	ldr	r3, [r3, #28]
 80a0298:	9301      	str	r3, [sp, #4]
 80a029a:	bd08      	pop	{r3, pc}
 80a029c:	080601b4 	.word	0x080601b4

080a02a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <hal_spi_is_enabled+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	6a1b      	ldr	r3, [r3, #32]
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	080601b4 	.word	0x080601b4

080a02b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <HAL_USB_USART_Init+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	681b      	ldr	r3, [r3, #0]
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	080601d8 	.word	0x080601d8

080a02c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <HAL_USB_USART_Available_Data+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	691b      	ldr	r3, [r3, #16]
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	080601d8 	.word	0x080601d8

080a02d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	695b      	ldr	r3, [r3, #20]
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601d8 	.word	0x080601d8

080a02e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_USB_USART_Receive_Data+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	699b      	ldr	r3, [r3, #24]
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601d8 	.word	0x080601d8

080a02f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_USB_USART_Send_Data+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	69db      	ldr	r3, [r3, #28]
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601d8 	.word	0x080601d8

080a0300 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_USB_USART_Flush_Data+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	6a1b      	ldr	r3, [r3, #32]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601d8 	.word	0x080601d8

080a0310 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <inet_gethostbyname+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601c0 	.word	0x080601c0

080a0320 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <wlan_select_antenna+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601c0 	.word	0x080601c0

080a0330 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <set_system_mode+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	685b      	ldr	r3, [r3, #4]
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601a4 	.word	0x080601a4

080a0340 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <system_delay_ms+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	695b      	ldr	r3, [r3, #20]
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601a4 	.word	0x080601a4

080a0350 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b03      	ldr	r3, [pc, #12]	; (80a0360 <system_ctrl_set_app_request_handler+0x10>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a035a:	9301      	str	r3, [sp, #4]
 80a035c:	bd08      	pop	{r3, pc}
 80a035e:	0000      	.short	0x0000
 80a0360:	080601a4 	.word	0x080601a4

080a0364 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b03      	ldr	r3, [pc, #12]	; (80a0374 <system_ctrl_set_result+0x10>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a036e:	9301      	str	r3, [sp, #4]
 80a0370:	bd08      	pop	{r3, pc}
 80a0372:	0000      	.short	0x0000
 80a0374:	080601a4 	.word	0x080601a4

080a0378 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <network_connect+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	685b      	ldr	r3, [r3, #4]
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601c8 	.word	0x080601c8

080a0388 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <network_connecting+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	689b      	ldr	r3, [r3, #8]
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601c8 	.word	0x080601c8

080a0398 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <network_disconnect+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	68db      	ldr	r3, [r3, #12]
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601c8 	.word	0x080601c8

080a03a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <network_ready+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	691b      	ldr	r3, [r3, #16]
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601c8 	.word	0x080601c8

080a03b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <network_on+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	695b      	ldr	r3, [r3, #20]
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601c8 	.word	0x080601c8

080a03c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b02      	ldr	r3, [pc, #8]	; (80a03d4 <network_off+0xc>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	699b      	ldr	r3, [r3, #24]
 80a03d0:	9301      	str	r3, [sp, #4]
 80a03d2:	bd08      	pop	{r3, pc}
 80a03d4:	080601c8 	.word	0x080601c8

080a03d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a03d8:	b508      	push	{r3, lr}
 80a03da:	4b02      	ldr	r3, [pc, #8]	; (80a03e4 <network_listen+0xc>)
 80a03dc:	681b      	ldr	r3, [r3, #0]
 80a03de:	69db      	ldr	r3, [r3, #28]
 80a03e0:	9301      	str	r3, [sp, #4]
 80a03e2:	bd08      	pop	{r3, pc}
 80a03e4:	080601c8 	.word	0x080601c8

080a03e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a03e8:	b508      	push	{r3, lr}
 80a03ea:	4b02      	ldr	r3, [pc, #8]	; (80a03f4 <network_listening+0xc>)
 80a03ec:	681b      	ldr	r3, [r3, #0]
 80a03ee:	6a1b      	ldr	r3, [r3, #32]
 80a03f0:	9301      	str	r3, [sp, #4]
 80a03f2:	bd08      	pop	{r3, pc}
 80a03f4:	080601c8 	.word	0x080601c8

080a03f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a03f8:	b508      	push	{r3, lr}
 80a03fa:	4b02      	ldr	r3, [pc, #8]	; (80a0404 <network_set_listen_timeout+0xc>)
 80a03fc:	681b      	ldr	r3, [r3, #0]
 80a03fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0400:	9301      	str	r3, [sp, #4]
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	080601c8 	.word	0x080601c8

080a0408 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0408:	b508      	push	{r3, lr}
 80a040a:	4b02      	ldr	r3, [pc, #8]	; (80a0414 <network_get_listen_timeout+0xc>)
 80a040c:	681b      	ldr	r3, [r3, #0]
 80a040e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0410:	9301      	str	r3, [sp, #4]
 80a0412:	bd08      	pop	{r3, pc}
 80a0414:	080601c8 	.word	0x080601c8

080a0418 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0418:	b508      	push	{r3, lr}
 80a041a:	4b02      	ldr	r3, [pc, #8]	; (80a0424 <network_is_on+0xc>)
 80a041c:	681b      	ldr	r3, [r3, #0]
 80a041e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0420:	9301      	str	r3, [sp, #4]
 80a0422:	bd08      	pop	{r3, pc}
 80a0424:	080601c8 	.word	0x080601c8

080a0428 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0428:	b508      	push	{r3, lr}
 80a042a:	4b02      	ldr	r3, [pc, #8]	; (80a0434 <network_is_off+0xc>)
 80a042c:	681b      	ldr	r3, [r3, #0]
 80a042e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0430:	9301      	str	r3, [sp, #4]
 80a0432:	bd08      	pop	{r3, pc}
 80a0434:	080601c8 	.word	0x080601c8

080a0438 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0438:	b508      	push	{r3, lr}
 80a043a:	4b02      	ldr	r3, [pc, #8]	; (80a0444 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a043c:	681b      	ldr	r3, [r3, #0]
 80a043e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0440:	9301      	str	r3, [sp, #4]
 80a0442:	bd08      	pop	{r3, pc}
 80a0444:	080601cc 	.word	0x080601cc

080a0448 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <malloc+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	681b      	ldr	r3, [r3, #0]
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601a0 	.word	0x080601a0

080a0458 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <free+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	685b      	ldr	r3, [r3, #4]
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601a0 	.word	0x080601a0

080a0468 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <__assert_func+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	080601a0 	.word	0x080601a0

080a0478 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <newlib_impure_ptr_callback+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601a0 	.word	0x080601a0

080a0488 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0488:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a048a:	2600      	movs	r6, #0
 80a048c:	4604      	mov	r4, r0
 80a048e:	460d      	mov	r5, r1
 80a0490:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0494:	f7ff fe72 	bl	80a017c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0498:	4628      	mov	r0, r5
    _spi = spi;
 80a049a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a049c:	f7ff fef8 	bl	80a0290 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a04a0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a04a2:	6066      	str	r6, [r4, #4]
}
 80a04a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a04a8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a04a8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a04aa:	2000      	movs	r0, #0
 80a04ac:	4b04      	ldr	r3, [pc, #16]	; (80a04c0 <_GLOBAL__sub_I_System+0x18>)
 80a04ae:	601a      	str	r2, [r3, #0]
 80a04b0:	4b04      	ldr	r3, [pc, #16]	; (80a04c4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a04b2:	4a05      	ldr	r2, [pc, #20]	; (80a04c8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a04b4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a04b8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a04ba:	f7ff bf39 	b.w	80a0330 <set_system_mode>
 80a04be:	bf00      	nop
 80a04c0:	20000080 	.word	0x20000080
 80a04c4:	20000074 	.word	0x20000074
 80a04c8:	ffff0000 	.word	0xffff0000

080a04cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a04cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04ce:	4606      	mov	r6, r0
 80a04d0:	460d      	mov	r5, r1
  size_t n = 0;
 80a04d2:	2400      	movs	r4, #0
 80a04d4:	188f      	adds	r7, r1, r2
  while (size--) {
 80a04d6:	42bd      	cmp	r5, r7
 80a04d8:	d00c      	beq.n	80a04f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a04da:	6833      	ldr	r3, [r6, #0]
 80a04dc:	4630      	mov	r0, r6
 80a04de:	689b      	ldr	r3, [r3, #8]
 80a04e0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a04e4:	4798      	blx	r3
     if (chunk>=0)
 80a04e6:	1e03      	subs	r3, r0, #0
 80a04e8:	db01      	blt.n	80a04ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a04ea:	441c      	add	r4, r3
  while (size--) {
 80a04ec:	e7f3      	b.n	80a04d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a04ee:	2c00      	cmp	r4, #0
 80a04f0:	bf08      	it	eq
 80a04f2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a04f4:	4620      	mov	r0, r4
 80a04f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a04f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a04f8:	b570      	push	{r4, r5, r6, lr}
 80a04fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a04fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a04fe:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0500:	b149      	cbz	r1, 80a0516 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0502:	f000 fcc5 	bl	80a0e90 <strlen>
 80a0506:	682b      	ldr	r3, [r5, #0]
 80a0508:	4602      	mov	r2, r0
 80a050a:	4621      	mov	r1, r4
 80a050c:	4628      	mov	r0, r5
    }
 80a050e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0512:	68db      	ldr	r3, [r3, #12]
 80a0514:	4718      	bx	r3
    }
 80a0516:	bd70      	pop	{r4, r5, r6, pc}

080a0518 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0518:	6803      	ldr	r3, [r0, #0]
 80a051a:	689b      	ldr	r3, [r3, #8]
 80a051c:	4718      	bx	r3

080a051e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a051e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0520:	2a01      	cmp	r2, #1
 80a0522:	bf98      	it	ls
 80a0524:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0526:	b530      	push	{r4, r5, lr}
 80a0528:	b08b      	sub	sp, #44	; 0x2c
 80a052a:	460c      	mov	r4, r1
  *str = '\0';
 80a052c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0530:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0532:	4625      	mov	r5, r4
 80a0534:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0538:	fb04 5312 	mls	r3, r4, r2, r5
 80a053c:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a053e:	2b09      	cmp	r3, #9
 80a0540:	bf94      	ite	ls
 80a0542:	3330      	addls	r3, #48	; 0x30
 80a0544:	3337      	addhi	r3, #55	; 0x37
 80a0546:	b2db      	uxtb	r3, r3
  } while(n);
 80a0548:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a054a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a054e:	d9f0      	bls.n	80a0532 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0550:	f7ff ffd2 	bl	80a04f8 <_ZN5Print5writeEPKc>
}
 80a0554:	b00b      	add	sp, #44	; 0x2c
 80a0556:	bd30      	pop	{r4, r5, pc}

080a0558 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0558:	4b01      	ldr	r3, [pc, #4]	; (80a0560 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a055a:	4a02      	ldr	r2, [pc, #8]	; (80a0564 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a055c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a055e:	4770      	bx	lr
 80a0560:	20000084 	.word	0x20000084
 80a0564:	080a0f84 	.word	0x080a0f84

080a0568 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0568:	4b02      	ldr	r3, [pc, #8]	; (80a0574 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a056a:	681a      	ldr	r2, [r3, #0]
 80a056c:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a056e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0570:	4770      	bx	lr
 80a0572:	bf00      	nop
 80a0574:	20000004 	.word	0x20000004
 80a0578:	20000088 	.word	0x20000088

080a057c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a057c:	2100      	movs	r1, #0
 80a057e:	f7ff bedf 	b.w	80a0340 <system_delay_ms>
	...

080a0584 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0584:	2200      	movs	r2, #0
 80a0586:	4b01      	ldr	r3, [pc, #4]	; (80a058c <_GLOBAL__sub_I_RGB+0x8>)
 80a0588:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a058a:	4770      	bx	lr
 80a058c:	2000008c 	.word	0x2000008c

080a0590 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0590:	4b01      	ldr	r3, [pc, #4]	; (80a0598 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0592:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0594:	4770      	bx	lr
 80a0596:	bf00      	nop
 80a0598:	20000008 	.word	0x20000008

080a059c <serialEventRun>:
{
 80a059c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a059e:	4b13      	ldr	r3, [pc, #76]	; (80a05ec <serialEventRun+0x50>)
 80a05a0:	b143      	cbz	r3, 80a05b4 <serialEventRun+0x18>
 80a05a2:	f000 f971 	bl	80a0888 <_Z16_fetch_usbserialv>
 80a05a6:	6803      	ldr	r3, [r0, #0]
 80a05a8:	691b      	ldr	r3, [r3, #16]
 80a05aa:	4798      	blx	r3
 80a05ac:	2800      	cmp	r0, #0
 80a05ae:	dd01      	ble.n	80a05b4 <serialEventRun+0x18>
        serialEvent();
 80a05b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a05b4:	4b0e      	ldr	r3, [pc, #56]	; (80a05f0 <serialEventRun+0x54>)
 80a05b6:	b143      	cbz	r3, 80a05ca <serialEventRun+0x2e>
 80a05b8:	f000 fbb0 	bl	80a0d1c <_Z22__fetch_global_Serial1v>
 80a05bc:	6803      	ldr	r3, [r0, #0]
 80a05be:	691b      	ldr	r3, [r3, #16]
 80a05c0:	4798      	blx	r3
 80a05c2:	2800      	cmp	r0, #0
 80a05c4:	dd01      	ble.n	80a05ca <serialEventRun+0x2e>
        serialEvent1();
 80a05c6:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a05ca:	4b0a      	ldr	r3, [pc, #40]	; (80a05f4 <serialEventRun+0x58>)
 80a05cc:	b10b      	cbz	r3, 80a05d2 <serialEventRun+0x36>
 80a05ce:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a05d2:	4b09      	ldr	r3, [pc, #36]	; (80a05f8 <serialEventRun+0x5c>)
 80a05d4:	b143      	cbz	r3, 80a05e8 <serialEventRun+0x4c>
 80a05d6:	f000 f991 	bl	80a08fc <_Z17_fetch_usbserial1v>
 80a05da:	6803      	ldr	r3, [r0, #0]
 80a05dc:	691b      	ldr	r3, [r3, #16]
 80a05de:	4798      	blx	r3
 80a05e0:	2800      	cmp	r0, #0
 80a05e2:	dd01      	ble.n	80a05e8 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a05e4:	f3af 8000 	nop.w
}
 80a05e8:	bd08      	pop	{r3, pc}
 80a05ea:	bf00      	nop
	...

080a05fc <_post_loop>:
{
 80a05fc:	b508      	push	{r3, lr}
	serialEventRun();
 80a05fe:	f7ff ffcd 	bl	80a059c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0602:	f7ff fdb3 	bl	80a016c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0606:	4b01      	ldr	r3, [pc, #4]	; (80a060c <_post_loop+0x10>)
 80a0608:	6018      	str	r0, [r3, #0]
}
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	20000410 	.word	0x20000410

080a0610 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0610:	4805      	ldr	r0, [pc, #20]	; (80a0628 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0612:	4a06      	ldr	r2, [pc, #24]	; (80a062c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0614:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0616:	1a12      	subs	r2, r2, r0
 80a0618:	4905      	ldr	r1, [pc, #20]	; (80a0630 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a061a:	f000 fbf5 	bl	80a0e08 <memcpy>
    __backup_sram_signature = signature;
 80a061e:	4b05      	ldr	r3, [pc, #20]	; (80a0634 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0620:	4a05      	ldr	r2, [pc, #20]	; (80a0638 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0622:	601a      	str	r2, [r3, #0]
}
 80a0624:	bd08      	pop	{r3, pc}
 80a0626:	bf00      	nop
 80a0628:	40024000 	.word	0x40024000
 80a062c:	40024004 	.word	0x40024004
 80a0630:	080a1170 	.word	0x080a1170
 80a0634:	40024000 	.word	0x40024000
 80a0638:	9a271c1e 	.word	0x9a271c1e

080a063c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a063c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a063e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0640:	461a      	mov	r2, r3
 80a0642:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0646:	9300      	str	r3, [sp, #0]
 80a0648:	f7ff fe8c 	bl	80a0364 <system_ctrl_set_result>
}
 80a064c:	b003      	add	sp, #12
 80a064e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0654 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0654:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0656:	8843      	ldrh	r3, [r0, #2]
 80a0658:	2b0a      	cmp	r3, #10
 80a065a:	d008      	beq.n	80a066e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a065c:	2b50      	cmp	r3, #80	; 0x50
 80a065e:	d10b      	bne.n	80a0678 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0660:	4b09      	ldr	r3, [pc, #36]	; (80a0688 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0662:	681b      	ldr	r3, [r3, #0]
 80a0664:	b14b      	cbz	r3, 80a067a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0666:	b003      	add	sp, #12
 80a0668:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a066c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a066e:	f7ff ffe5 	bl	80a063c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0672:	b003      	add	sp, #12
 80a0674:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0678:	2300      	movs	r3, #0
 80a067a:	461a      	mov	r2, r3
 80a067c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0680:	9300      	str	r3, [sp, #0]
 80a0682:	f7ff fe6f 	bl	80a0364 <system_ctrl_set_result>
}
 80a0686:	e7f4      	b.n	80a0672 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0688:	200000a0 	.word	0x200000a0

080a068c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a068c:	2100      	movs	r1, #0
{
 80a068e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0690:	4811      	ldr	r0, [pc, #68]	; (80a06d8 <module_user_init_hook+0x4c>)
 80a0692:	f7ff fef1 	bl	80a0478 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0696:	4b11      	ldr	r3, [pc, #68]	; (80a06dc <module_user_init_hook+0x50>)
 80a0698:	681a      	ldr	r2, [r3, #0]
 80a069a:	4b11      	ldr	r3, [pc, #68]	; (80a06e0 <module_user_init_hook+0x54>)
 80a069c:	429a      	cmp	r2, r3
 80a069e:	bf0c      	ite	eq
 80a06a0:	2201      	moveq	r2, #1
 80a06a2:	2200      	movne	r2, #0
 80a06a4:	4b0f      	ldr	r3, [pc, #60]	; (80a06e4 <module_user_init_hook+0x58>)
 80a06a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a06a8:	d001      	beq.n	80a06ae <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a06aa:	f7ff ffb1 	bl	80a0610 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a06ae:	f7ff fd55 	bl	80a015c <HAL_RNG_GetRandomNumber>
 80a06b2:	4604      	mov	r4, r0
    srand(seed);
 80a06b4:	f000 fbbe 	bl	80a0e34 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a06b8:	4b0b      	ldr	r3, [pc, #44]	; (80a06e8 <module_user_init_hook+0x5c>)
 80a06ba:	b113      	cbz	r3, 80a06c2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a06bc:	4620      	mov	r0, r4
 80a06be:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a06c2:	2100      	movs	r1, #0
 80a06c4:	4808      	ldr	r0, [pc, #32]	; (80a06e8 <module_user_init_hook+0x5c>)
 80a06c6:	f7ff feb7 	bl	80a0438 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a06ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a06ce:	2100      	movs	r1, #0
 80a06d0:	4806      	ldr	r0, [pc, #24]	; (80a06ec <module_user_init_hook+0x60>)
 80a06d2:	f7ff be3d 	b.w	80a0350 <system_ctrl_set_app_request_handler>
 80a06d6:	bf00      	nop
 80a06d8:	080a0591 	.word	0x080a0591
 80a06dc:	40024000 	.word	0x40024000
 80a06e0:	9a271c1e 	.word	0x9a271c1e
 80a06e4:	2000009c 	.word	0x2000009c
 80a06e8:	00000000 	.word	0x00000000
 80a06ec:	080a0655 	.word	0x080a0655

080a06f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a06f0:	4770      	bx	lr

080a06f2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a06f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06f4:	460e      	mov	r6, r1
 80a06f6:	2400      	movs	r4, #0
 80a06f8:	f100 0708 	add.w	r7, r0, #8
 80a06fc:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a06fe:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0702:	220a      	movs	r2, #10
 80a0704:	4630      	mov	r0, r6
 80a0706:	f7ff ff0a 	bl	80a051e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a070a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a070c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a070e:	d101      	bne.n	80a0714 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0710:	4620      	mov	r0, r4
 80a0712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0714:	2c00      	cmp	r4, #0
 80a0716:	d0f2      	beq.n	80a06fe <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0718:	212e      	movs	r1, #46	; 0x2e
 80a071a:	4630      	mov	r0, r6
 80a071c:	f7ff fefc 	bl	80a0518 <_ZN5Print5printEc>
 80a0720:	4404      	add	r4, r0
 80a0722:	e7ec      	b.n	80a06fe <_ZNK9IPAddress7printToER5Print+0xc>

080a0724 <_ZN9IPAddressD0Ev>:
 80a0724:	b510      	push	{r4, lr}
 80a0726:	4604      	mov	r4, r0
 80a0728:	2118      	movs	r1, #24
 80a072a:	f7ff fcb6 	bl	80a009a <_ZdlPvj>
 80a072e:	4620      	mov	r0, r4
 80a0730:	bd10      	pop	{r4, pc}
	...

080a0734 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0734:	b510      	push	{r4, lr}
 80a0736:	4604      	mov	r4, r0
 80a0738:	4b04      	ldr	r3, [pc, #16]	; (80a074c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a073a:	2211      	movs	r2, #17
 80a073c:	2100      	movs	r1, #0
 80a073e:	f840 3b04 	str.w	r3, [r0], #4
 80a0742:	f000 fb6f 	bl	80a0e24 <memset>
}
 80a0746:	4620      	mov	r0, r4
 80a0748:	bd10      	pop	{r4, pc}
 80a074a:	bf00      	nop
 80a074c:	080a0fac 	.word	0x080a0fac

080a0750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0750:	4603      	mov	r3, r0
 80a0752:	4a07      	ldr	r2, [pc, #28]	; (80a0770 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0754:	b510      	push	{r4, lr}
 80a0756:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a075a:	f101 0210 	add.w	r2, r1, #16
 80a075e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0762:	4291      	cmp	r1, r2
 80a0764:	f843 4b04 	str.w	r4, [r3], #4
 80a0768:	d1f9      	bne.n	80a075e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a076a:	780a      	ldrb	r2, [r1, #0]
 80a076c:	701a      	strb	r2, [r3, #0]
}
 80a076e:	bd10      	pop	{r4, pc}
 80a0770:	080a0fac 	.word	0x080a0fac

080a0774 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a0774:	4a02      	ldr	r2, [pc, #8]	; (80a0780 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a0776:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a077a:	2204      	movs	r2, #4
 80a077c:	7502      	strb	r2, [r0, #20]
}
 80a077e:	4770      	bx	lr
 80a0780:	080a0fac 	.word	0x080a0fac

080a0784 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0784:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0786:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a078a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a078e:	2304      	movs	r3, #4
 80a0790:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0794:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0798:	6044      	str	r4, [r0, #4]
 80a079a:	7503      	strb	r3, [r0, #20]
}
 80a079c:	bd10      	pop	{r4, pc}
	...

080a07a0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a07a0:	b513      	push	{r0, r1, r4, lr}
 80a07a2:	4c04      	ldr	r4, [pc, #16]	; (80a07b4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a07a4:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a07a6:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a07aa:	9400      	str	r4, [sp, #0]
 80a07ac:	f7ff ffea 	bl	80a0784 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a07b0:	b002      	add	sp, #8
 80a07b2:	bd10      	pop	{r4, pc}
 80a07b4:	080a0fac 	.word	0x080a0fac

080a07b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a07b8:	7441      	strb	r1, [r0, #17]
}
 80a07ba:	4770      	bx	lr

080a07bc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a07bc:	4770      	bx	lr

080a07be <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a07be:	4770      	bx	lr

080a07c0 <_ZN9USBSerial4readEv>:
{
 80a07c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a07c2:	2100      	movs	r1, #0
 80a07c4:	7c00      	ldrb	r0, [r0, #16]
 80a07c6:	f7ff fd8b 	bl	80a02e0 <HAL_USB_USART_Receive_Data>
}
 80a07ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07ce:	bd08      	pop	{r3, pc}

080a07d0 <_ZN9USBSerial4peekEv>:
{
 80a07d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a07d2:	2101      	movs	r1, #1
 80a07d4:	7c00      	ldrb	r0, [r0, #16]
 80a07d6:	f7ff fd83 	bl	80a02e0 <HAL_USB_USART_Receive_Data>
}
 80a07da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a07de:	bd08      	pop	{r3, pc}

080a07e0 <_ZN9USBSerial17availableForWriteEv>:
{
 80a07e0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a07e2:	7c00      	ldrb	r0, [r0, #16]
 80a07e4:	f7ff fd74 	bl	80a02d0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a07e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07ec:	bd08      	pop	{r3, pc}

080a07ee <_ZN9USBSerial9availableEv>:
{
 80a07ee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a07f0:	7c00      	ldrb	r0, [r0, #16]
 80a07f2:	f7ff fd65 	bl	80a02c0 <HAL_USB_USART_Available_Data>
}
 80a07f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a07fa:	bd08      	pop	{r3, pc}

080a07fc <_ZN9USBSerial5writeEh>:
{
 80a07fc:	b538      	push	{r3, r4, r5, lr}
 80a07fe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0800:	7c00      	ldrb	r0, [r0, #16]
{
 80a0802:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0804:	f7ff fd64 	bl	80a02d0 <HAL_USB_USART_Available_Data_For_Write>
 80a0808:	2800      	cmp	r0, #0
 80a080a:	dc01      	bgt.n	80a0810 <_ZN9USBSerial5writeEh+0x14>
 80a080c:	7c60      	ldrb	r0, [r4, #17]
 80a080e:	b128      	cbz	r0, 80a081c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0810:	4629      	mov	r1, r5
 80a0812:	7c20      	ldrb	r0, [r4, #16]
 80a0814:	f7ff fd6c 	bl	80a02f0 <HAL_USB_USART_Send_Data>
 80a0818:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a081c:	bd38      	pop	{r3, r4, r5, pc}

080a081e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a081e:	7c00      	ldrb	r0, [r0, #16]
 80a0820:	f7ff bd6e 	b.w	80a0300 <HAL_USB_USART_Flush_Data>

080a0824 <_ZN9USBSerialD0Ev>:
 80a0824:	b510      	push	{r4, lr}
 80a0826:	4604      	mov	r4, r0
 80a0828:	2114      	movs	r1, #20
 80a082a:	f7ff fc36 	bl	80a009a <_ZdlPvj>
 80a082e:	4620      	mov	r0, r4
 80a0830:	bd10      	pop	{r4, pc}

080a0832 <__tcf_1>:
 80a0832:	4770      	bx	lr

080a0834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0834:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a083a:	4604      	mov	r4, r0
 80a083c:	4608      	mov	r0, r1
 80a083e:	2100      	movs	r1, #0
 80a0840:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0844:	4b04      	ldr	r3, [pc, #16]	; (80a0858 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0846:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0848:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a084a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a084c:	4611      	mov	r1, r2
  _blocking = true;
 80a084e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0850:	f7ff fd2e 	bl	80a02b0 <HAL_USB_USART_Init>
}
 80a0854:	4620      	mov	r0, r4
 80a0856:	bd10      	pop	{r4, pc}
 80a0858:	080a0fc0 	.word	0x080a0fc0

080a085c <_Z19acquireSerialBufferv>:
{
 80a085c:	b510      	push	{r4, lr}
 80a085e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a0860:	2214      	movs	r2, #20
 80a0862:	2100      	movs	r1, #0
 80a0864:	f000 fade 	bl	80a0e24 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a0868:	4b05      	ldr	r3, [pc, #20]	; (80a0880 <_Z19acquireSerialBufferv+0x24>)
}
 80a086a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a086c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a086e:	4b05      	ldr	r3, [pc, #20]	; (80a0884 <_Z19acquireSerialBufferv+0x28>)
 80a0870:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0872:	f240 1301 	movw	r3, #257	; 0x101
 80a0876:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0878:	2381      	movs	r3, #129	; 0x81
 80a087a:	8223      	strh	r3, [r4, #16]
}
 80a087c:	bd10      	pop	{r4, pc}
 80a087e:	bf00      	nop
 80a0880:	200000d4 	.word	0x200000d4
 80a0884:	200001d5 	.word	0x200001d5

080a0888 <_Z16_fetch_usbserialv>:
{
 80a0888:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a088a:	4d0e      	ldr	r5, [pc, #56]	; (80a08c4 <_Z16_fetch_usbserialv+0x3c>)
{
 80a088c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a088e:	a801      	add	r0, sp, #4
 80a0890:	f7ff ffe4 	bl	80a085c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0894:	7829      	ldrb	r1, [r5, #0]
 80a0896:	f3bf 8f5b 	dmb	ish
 80a089a:	f011 0401 	ands.w	r4, r1, #1
 80a089e:	d10e      	bne.n	80a08be <_Z16_fetch_usbserialv+0x36>
 80a08a0:	4628      	mov	r0, r5
 80a08a2:	f7ff fbfc 	bl	80a009e <__cxa_guard_acquire>
 80a08a6:	b150      	cbz	r0, 80a08be <_Z16_fetch_usbserialv+0x36>
 80a08a8:	4621      	mov	r1, r4
 80a08aa:	aa01      	add	r2, sp, #4
 80a08ac:	4806      	ldr	r0, [pc, #24]	; (80a08c8 <_Z16_fetch_usbserialv+0x40>)
 80a08ae:	f7ff ffc1 	bl	80a0834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a08b2:	4628      	mov	r0, r5
 80a08b4:	f7ff fbf8 	bl	80a00a8 <__cxa_guard_release>
 80a08b8:	4804      	ldr	r0, [pc, #16]	; (80a08cc <_Z16_fetch_usbserialv+0x44>)
 80a08ba:	f000 fa9f 	bl	80a0dfc <atexit>
	return _usbserial;
}
 80a08be:	4802      	ldr	r0, [pc, #8]	; (80a08c8 <_Z16_fetch_usbserialv+0x40>)
 80a08c0:	b007      	add	sp, #28
 80a08c2:	bd30      	pop	{r4, r5, pc}
 80a08c4:	200000a4 	.word	0x200000a4
 80a08c8:	200000ac 	.word	0x200000ac
 80a08cc:	080a07bd 	.word	0x080a07bd

080a08d0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a08d0:	b510      	push	{r4, lr}
 80a08d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a08d4:	2214      	movs	r2, #20
 80a08d6:	2100      	movs	r1, #0
 80a08d8:	f000 faa4 	bl	80a0e24 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a08dc:	4b05      	ldr	r3, [pc, #20]	; (80a08f4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a08de:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a08e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a08e2:	4b05      	ldr	r3, [pc, #20]	; (80a08f8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a08e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a08e6:	f240 1301 	movw	r3, #257	; 0x101
 80a08ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a08ec:	2381      	movs	r3, #129	; 0x81
 80a08ee:	8223      	strh	r3, [r4, #16]
}
 80a08f0:	bd10      	pop	{r4, pc}
 80a08f2:	bf00      	nop
 80a08f4:	20000256 	.word	0x20000256
 80a08f8:	20000357 	.word	0x20000357

080a08fc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a08fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a08fe:	4c0e      	ldr	r4, [pc, #56]	; (80a0938 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a0900:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0902:	a801      	add	r0, sp, #4
 80a0904:	f7ff ffe4 	bl	80a08d0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0908:	7823      	ldrb	r3, [r4, #0]
 80a090a:	f3bf 8f5b 	dmb	ish
 80a090e:	07db      	lsls	r3, r3, #31
 80a0910:	d40e      	bmi.n	80a0930 <_Z17_fetch_usbserial1v+0x34>
 80a0912:	4620      	mov	r0, r4
 80a0914:	f7ff fbc3 	bl	80a009e <__cxa_guard_acquire>
 80a0918:	b150      	cbz	r0, 80a0930 <_Z17_fetch_usbserial1v+0x34>
 80a091a:	2101      	movs	r1, #1
 80a091c:	aa01      	add	r2, sp, #4
 80a091e:	4807      	ldr	r0, [pc, #28]	; (80a093c <_Z17_fetch_usbserial1v+0x40>)
 80a0920:	f7ff ff88 	bl	80a0834 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0924:	4620      	mov	r0, r4
 80a0926:	f7ff fbbf 	bl	80a00a8 <__cxa_guard_release>
 80a092a:	4805      	ldr	r0, [pc, #20]	; (80a0940 <_Z17_fetch_usbserial1v+0x44>)
 80a092c:	f000 fa66 	bl	80a0dfc <atexit>
  return _usbserial1;
}
 80a0930:	4802      	ldr	r0, [pc, #8]	; (80a093c <_Z17_fetch_usbserial1v+0x40>)
 80a0932:	b006      	add	sp, #24
 80a0934:	bd10      	pop	{r4, pc}
 80a0936:	bf00      	nop
 80a0938:	200000a8 	.word	0x200000a8
 80a093c:	200000c0 	.word	0x200000c0
 80a0940:	080a0833 	.word	0x080a0833

080a0944 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a0944:	4770      	bx	lr

080a0946 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0946:	7441      	strb	r1, [r0, #17]
}
 80a0948:	4770      	bx	lr

080a094a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a094a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a094c:	7c00      	ldrb	r0, [r0, #16]
 80a094e:	f7ff fc55 	bl	80a01fc <hal_usart_available_data_for_write>
}
 80a0952:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0956:	bd08      	pop	{r3, pc}

080a0958 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0958:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a095a:	7c00      	ldrb	r0, [r0, #16]
 80a095c:	f7ff fc26 	bl	80a01ac <hal_usart_available>
}
 80a0960:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0964:	bd08      	pop	{r3, pc}

080a0966 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0966:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0968:	7c00      	ldrb	r0, [r0, #16]
 80a096a:	f7ff fc2f 	bl	80a01cc <hal_usart_peek>
}
 80a096e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0972:	bd08      	pop	{r3, pc}

080a0974 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0974:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0976:	7c00      	ldrb	r0, [r0, #16]
 80a0978:	f7ff fc20 	bl	80a01bc <hal_usart_read>
}
 80a097c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0980:	bd08      	pop	{r3, pc}

080a0982 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0982:	7c00      	ldrb	r0, [r0, #16]
 80a0984:	f7ff bc2a 	b.w	80a01dc <hal_usart_flush>

080a0988 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0988:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a098a:	7c46      	ldrb	r6, [r0, #17]
{
 80a098c:	4604      	mov	r4, r0
 80a098e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0990:	b12e      	cbz	r6, 80a099e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0992:	4629      	mov	r1, r5
 80a0994:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a099a:	f7ff bbff 	b.w	80a019c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a099e:	7c00      	ldrb	r0, [r0, #16]
 80a09a0:	f7ff fc2c 	bl	80a01fc <hal_usart_available_data_for_write>
 80a09a4:	2800      	cmp	r0, #0
 80a09a6:	dcf4      	bgt.n	80a0992 <_ZN11USARTSerial5writeEh+0xa>
}
 80a09a8:	4630      	mov	r0, r6
 80a09aa:	bd70      	pop	{r4, r5, r6, pc}

080a09ac <_ZN11USARTSerialD0Ev>:
 80a09ac:	b510      	push	{r4, lr}
 80a09ae:	4604      	mov	r4, r0
 80a09b0:	2114      	movs	r1, #20
 80a09b2:	f7ff fb72 	bl	80a009a <_ZdlPvj>
 80a09b6:	4620      	mov	r0, r4
 80a09b8:	bd10      	pop	{r4, pc}
	...

080a09bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a09bc:	b510      	push	{r4, lr}
 80a09be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a09c2:	4604      	mov	r4, r0
 80a09c4:	4608      	mov	r0, r1
 80a09c6:	4611      	mov	r1, r2
 80a09c8:	2200      	movs	r2, #0
 80a09ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a09ce:	4b04      	ldr	r3, [pc, #16]	; (80a09e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a09d0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a09d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a09d4:	2301      	movs	r3, #1
 80a09d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a09d8:	f7ff fc18 	bl	80a020c <hal_usart_init_ex>
}
 80a09dc:	4620      	mov	r0, r4
 80a09de:	bd10      	pop	{r4, pc}
 80a09e0:	080a0ff0 	.word	0x080a0ff0

080a09e4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a09e4:	4770      	bx	lr

080a09e6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a09e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09e8:	4606      	mov	r6, r0
 80a09ea:	4615      	mov	r5, r2
 80a09ec:	460c      	mov	r4, r1
 80a09ee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a09f0:	42bc      	cmp	r4, r7
 80a09f2:	d006      	beq.n	80a0a02 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a09f4:	6833      	ldr	r3, [r6, #0]
 80a09f6:	4630      	mov	r0, r6
 80a09f8:	689b      	ldr	r3, [r3, #8]
 80a09fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a09fe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0a00:	e7f6      	b.n	80a09f0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0a02:	4628      	mov	r0, r5
 80a0a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a06 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0a06:	2200      	movs	r2, #0
 80a0a08:	7c00      	ldrb	r0, [r0, #16]
 80a0a0a:	f7ff bc07 	b.w	80a021c <hal_i2c_write>

080a0a0e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0a0e:	2100      	movs	r1, #0
 80a0a10:	7c00      	ldrb	r0, [r0, #16]
 80a0a12:	f7ff bc0b 	b.w	80a022c <hal_i2c_available>

080a0a16 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0a16:	2100      	movs	r1, #0
 80a0a18:	7c00      	ldrb	r0, [r0, #16]
 80a0a1a:	f7ff bc0f 	b.w	80a023c <hal_i2c_read>

080a0a1e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0a1e:	2100      	movs	r1, #0
 80a0a20:	7c00      	ldrb	r0, [r0, #16]
 80a0a22:	f7ff bc13 	b.w	80a024c <hal_i2c_peek>

080a0a26 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0a26:	2100      	movs	r1, #0
 80a0a28:	7c00      	ldrb	r0, [r0, #16]
 80a0a2a:	f7ff bc17 	b.w	80a025c <hal_i2c_flush>

080a0a2e <_ZN7TwoWireD0Ev>:
 80a0a2e:	b510      	push	{r4, lr}
 80a0a30:	4604      	mov	r4, r0
 80a0a32:	2114      	movs	r1, #20
 80a0a34:	f7ff fb31 	bl	80a009a <_ZdlPvj>
 80a0a38:	4620      	mov	r0, r4
 80a0a3a:	bd10      	pop	{r4, pc}

080a0a3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0a3c:	b510      	push	{r4, lr}
 80a0a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a42:	4604      	mov	r4, r0
 80a0a44:	4608      	mov	r0, r1
 80a0a46:	2100      	movs	r1, #0
 80a0a48:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0a4c:	4b03      	ldr	r3, [pc, #12]	; (80a0a5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0a4e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0a50:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0a52:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0a54:	f7ff fc12 	bl	80a027c <hal_i2c_init>
}
 80a0a58:	4620      	mov	r0, r4
 80a0a5a:	bd10      	pop	{r4, pc}
 80a0a5c:	080a1020 	.word	0x080a1020

080a0a60 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0a60:	2200      	movs	r2, #0
 80a0a62:	6840      	ldr	r0, [r0, #4]
 80a0a64:	4611      	mov	r1, r2
 80a0a66:	f7ff bc9f 	b.w	80a03a8 <network_ready>

080a0a6a <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0a6c:	4615      	mov	r5, r2
 80a0a6e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0a70:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0a72:	460e      	mov	r6, r1
 80a0a74:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0a76:	2100      	movs	r1, #0
 80a0a78:	a803      	add	r0, sp, #12
 80a0a7a:	f000 f9d3 	bl	80a0e24 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0a7e:	4628      	mov	r0, r5
 80a0a80:	f000 fa06 	bl	80a0e90 <strlen>
 80a0a84:	2700      	movs	r7, #0
 80a0a86:	b281      	uxth	r1, r0
 80a0a88:	6873      	ldr	r3, [r6, #4]
 80a0a8a:	4628      	mov	r0, r5
 80a0a8c:	9700      	str	r7, [sp, #0]
 80a0a8e:	aa03      	add	r2, sp, #12
 80a0a90:	f7ff fc3e 	bl	80a0310 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0a94:	b130      	cbz	r0, 80a0aa4 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0a96:	4639      	mov	r1, r7
 80a0a98:	4620      	mov	r0, r4
 80a0a9a:	f7ff fe6b 	bl	80a0774 <_ZN9IPAddressC1Em>
    }
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	b009      	add	sp, #36	; 0x24
 80a0aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	a903      	add	r1, sp, #12
 80a0aa8:	f7ff fe52 	bl	80a0750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0aac:	e7f7      	b.n	80a0a9e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0aae <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0aae:	2200      	movs	r2, #0
 80a0ab0:	6840      	ldr	r0, [r0, #4]
 80a0ab2:	4611      	mov	r1, r2
 80a0ab4:	f7ff bc98 	b.w	80a03e8 <network_listening>

080a0ab8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0ab8:	2200      	movs	r2, #0
 80a0aba:	6840      	ldr	r0, [r0, #4]
 80a0abc:	4611      	mov	r1, r2
 80a0abe:	f7ff bca3 	b.w	80a0408 <network_get_listen_timeout>

080a0ac2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0ac2:	2200      	movs	r2, #0
 80a0ac4:	6840      	ldr	r0, [r0, #4]
 80a0ac6:	f7ff bc97 	b.w	80a03f8 <network_set_listen_timeout>

080a0aca <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0aca:	2200      	movs	r2, #0
 80a0acc:	6840      	ldr	r0, [r0, #4]
 80a0ace:	f081 0101 	eor.w	r1, r1, #1
 80a0ad2:	f7ff bc81 	b.w	80a03d8 <network_listen>

080a0ad6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0ad6:	2300      	movs	r3, #0
 80a0ad8:	6840      	ldr	r0, [r0, #4]
 80a0ada:	461a      	mov	r2, r3
 80a0adc:	4619      	mov	r1, r3
 80a0ade:	f7ff bc73 	b.w	80a03c8 <network_off>

080a0ae2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a0ae2:	2300      	movs	r3, #0
 80a0ae4:	6840      	ldr	r0, [r0, #4]
 80a0ae6:	461a      	mov	r2, r3
 80a0ae8:	4619      	mov	r1, r3
 80a0aea:	f7ff bc65 	b.w	80a03b8 <network_on>

080a0aee <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0aee:	2200      	movs	r2, #0
 80a0af0:	6840      	ldr	r0, [r0, #4]
 80a0af2:	4611      	mov	r1, r2
 80a0af4:	f7ff bc48 	b.w	80a0388 <network_connecting>

080a0af8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0af8:	2200      	movs	r2, #0
 80a0afa:	2102      	movs	r1, #2
 80a0afc:	6840      	ldr	r0, [r0, #4]
 80a0afe:	f7ff bc4b 	b.w	80a0398 <network_disconnect>

080a0b02 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0b02:	2300      	movs	r3, #0
 80a0b04:	6840      	ldr	r0, [r0, #4]
 80a0b06:	461a      	mov	r2, r3
 80a0b08:	f7ff bc36 	b.w	80a0378 <network_connect>

080a0b0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0b0c:	2204      	movs	r2, #4
 80a0b0e:	4b02      	ldr	r3, [pc, #8]	; (80a0b18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0b10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0b12:	4a02      	ldr	r2, [pc, #8]	; (80a0b1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0b14:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0b16:	4770      	bx	lr
 80a0b18:	200003d8 	.word	0x200003d8
 80a0b1c:	080a1048 	.word	0x080a1048

080a0b20 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0b20:	2300      	movs	r3, #0
 80a0b22:	6840      	ldr	r0, [r0, #4]
 80a0b24:	461a      	mov	r2, r3
 80a0b26:	f7ff bc27 	b.w	80a0378 <network_connect>

080a0b2a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0b2a:	2200      	movs	r2, #0
 80a0b2c:	2102      	movs	r1, #2
 80a0b2e:	6840      	ldr	r0, [r0, #4]
 80a0b30:	f7ff bc32 	b.w	80a0398 <network_disconnect>

080a0b34 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0b34:	2200      	movs	r2, #0
 80a0b36:	6840      	ldr	r0, [r0, #4]
 80a0b38:	4611      	mov	r1, r2
 80a0b3a:	f7ff bc25 	b.w	80a0388 <network_connecting>

080a0b3e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0b3e:	2200      	movs	r2, #0
 80a0b40:	6840      	ldr	r0, [r0, #4]
 80a0b42:	4611      	mov	r1, r2
 80a0b44:	f7ff bc30 	b.w	80a03a8 <network_ready>

080a0b48 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0b48:	2300      	movs	r3, #0
 80a0b4a:	6840      	ldr	r0, [r0, #4]
 80a0b4c:	461a      	mov	r2, r3
 80a0b4e:	4619      	mov	r1, r3
 80a0b50:	f7ff bc32 	b.w	80a03b8 <network_on>

080a0b54 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0b54:	2300      	movs	r3, #0
 80a0b56:	6840      	ldr	r0, [r0, #4]
 80a0b58:	461a      	mov	r2, r3
 80a0b5a:	4619      	mov	r1, r3
 80a0b5c:	f7ff bc34 	b.w	80a03c8 <network_off>

080a0b60 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0b60:	2100      	movs	r1, #0
 80a0b62:	6840      	ldr	r0, [r0, #4]
 80a0b64:	f7ff bc58 	b.w	80a0418 <network_is_on>

080a0b68 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0b68:	2100      	movs	r1, #0
 80a0b6a:	6840      	ldr	r0, [r0, #4]
 80a0b6c:	f7ff bc5c 	b.w	80a0428 <network_is_off>

080a0b70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0b70:	2200      	movs	r2, #0
 80a0b72:	6840      	ldr	r0, [r0, #4]
 80a0b74:	f081 0101 	eor.w	r1, r1, #1
 80a0b78:	f7ff bc2e 	b.w	80a03d8 <network_listen>

080a0b7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0b7c:	2200      	movs	r2, #0
 80a0b7e:	6840      	ldr	r0, [r0, #4]
 80a0b80:	f7ff bc3a 	b.w	80a03f8 <network_set_listen_timeout>

080a0b84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0b84:	2200      	movs	r2, #0
 80a0b86:	6840      	ldr	r0, [r0, #4]
 80a0b88:	4611      	mov	r1, r2
 80a0b8a:	f7ff bc3d 	b.w	80a0408 <network_get_listen_timeout>

080a0b8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0b8e:	2200      	movs	r2, #0
 80a0b90:	6840      	ldr	r0, [r0, #4]
 80a0b92:	4611      	mov	r1, r2
 80a0b94:	f7ff bc28 	b.w	80a03e8 <network_listening>

080a0b98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0b98:	b570      	push	{r4, r5, r6, lr}
 80a0b9a:	4615      	mov	r5, r2
 80a0b9c:	b08e      	sub	sp, #56	; 0x38
 80a0b9e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0ba0:	a808      	add	r0, sp, #32
 80a0ba2:	f7ff fdc7 	bl	80a0734 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0ba6:	2211      	movs	r2, #17
 80a0ba8:	2100      	movs	r1, #0
 80a0baa:	a803      	add	r0, sp, #12
 80a0bac:	f000 f93a 	bl	80a0e24 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0bb0:	2600      	movs	r6, #0
 80a0bb2:	4628      	mov	r0, r5
 80a0bb4:	f000 f96c 	bl	80a0e90 <strlen>
 80a0bb8:	4b0a      	ldr	r3, [pc, #40]	; (80a0be4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0bba:	9600      	str	r6, [sp, #0]
 80a0bbc:	b281      	uxth	r1, r0
 80a0bbe:	685b      	ldr	r3, [r3, #4]
 80a0bc0:	4628      	mov	r0, r5
 80a0bc2:	aa03      	add	r2, sp, #12
 80a0bc4:	f7ff fba4 	bl	80a0310 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0bc8:	b130      	cbz	r0, 80a0bd8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0bca:	4631      	mov	r1, r6
 80a0bcc:	4620      	mov	r0, r4
 80a0bce:	f7ff fdd1 	bl	80a0774 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0bd2:	4620      	mov	r0, r4
 80a0bd4:	b00e      	add	sp, #56	; 0x38
 80a0bd6:	bd70      	pop	{r4, r5, r6, pc}
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	a903      	add	r1, sp, #12
 80a0bdc:	f7ff fdb8 	bl	80a0750 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0be0:	e7f7      	b.n	80a0bd2 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0be2:	bf00      	nop
 80a0be4:	200003d8 	.word	0x200003d8

080a0be8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0be8:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0bea:	4a03      	ldr	r2, [pc, #12]	; (80a0bf8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0bec:	601a      	str	r2, [r3, #0]
 80a0bee:	2200      	movs	r2, #0
 80a0bf0:	605a      	str	r2, [r3, #4]

} // spark
 80a0bf2:	4770      	bx	lr
 80a0bf4:	200003e0 	.word	0x200003e0
 80a0bf8:	080a1084 	.word	0x080a1084

080a0bfc <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0bfc:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <__tcf_0+0xc>)
 80a0bfe:	6898      	ldr	r0, [r3, #8]
 80a0c00:	b108      	cbz	r0, 80a0c06 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a0c02:	f7ff bac3 	b.w	80a018c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0c06:	4770      	bx	lr
 80a0c08:	200003ec 	.word	0x200003ec

080a0c0c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0c0c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0c0e:	b570      	push	{r4, r5, r6, lr}
 80a0c10:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0c12:	d901      	bls.n	80a0c18 <pinAvailable+0xc>
    return false;
 80a0c14:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0c16:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0c18:	f1a0 030d 	sub.w	r3, r0, #13
 80a0c1c:	2b02      	cmp	r3, #2
 80a0c1e:	d90b      	bls.n	80a0c38 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0c20:	2801      	cmp	r0, #1
 80a0c22:	d824      	bhi.n	80a0c6e <pinAvailable+0x62>
 80a0c24:	f000 f8c4 	bl	80a0db0 <_Z19__fetch_global_Wirev>
 80a0c28:	2100      	movs	r1, #0
 80a0c2a:	7c00      	ldrb	r0, [r0, #16]
 80a0c2c:	f7ff fb1e 	bl	80a026c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0c30:	f080 0001 	eor.w	r0, r0, #1
 80a0c34:	b2c0      	uxtb	r0, r0
 80a0c36:	e7ee      	b.n	80a0c16 <pinAvailable+0xa>
 80a0c38:	4e12      	ldr	r6, [pc, #72]	; (80a0c84 <pinAvailable+0x78>)
 80a0c3a:	7831      	ldrb	r1, [r6, #0]
 80a0c3c:	f3bf 8f5b 	dmb	ish
 80a0c40:	f011 0501 	ands.w	r5, r1, #1
 80a0c44:	d10d      	bne.n	80a0c62 <pinAvailable+0x56>
 80a0c46:	4630      	mov	r0, r6
 80a0c48:	f7ff fa29 	bl	80a009e <__cxa_guard_acquire>
 80a0c4c:	b148      	cbz	r0, 80a0c62 <pinAvailable+0x56>
 80a0c4e:	4629      	mov	r1, r5
 80a0c50:	480d      	ldr	r0, [pc, #52]	; (80a0c88 <pinAvailable+0x7c>)
 80a0c52:	f7ff fc19 	bl	80a0488 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0c56:	4630      	mov	r0, r6
 80a0c58:	f7ff fa26 	bl	80a00a8 <__cxa_guard_release>
 80a0c5c:	480b      	ldr	r0, [pc, #44]	; (80a0c8c <pinAvailable+0x80>)
 80a0c5e:	f000 f8cd 	bl	80a0dfc <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0c62:	4b09      	ldr	r3, [pc, #36]	; (80a0c88 <pinAvailable+0x7c>)
 80a0c64:	7818      	ldrb	r0, [r3, #0]
 80a0c66:	f7ff fb1b 	bl	80a02a0 <hal_spi_is_enabled>
 80a0c6a:	2800      	cmp	r0, #0
 80a0c6c:	d1d2      	bne.n	80a0c14 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0c6e:	3c12      	subs	r4, #18
 80a0c70:	2c01      	cmp	r4, #1
 80a0c72:	d805      	bhi.n	80a0c80 <pinAvailable+0x74>
 80a0c74:	f000 f852 	bl	80a0d1c <_Z22__fetch_global_Serial1v>
 80a0c78:	7c00      	ldrb	r0, [r0, #16]
 80a0c7a:	f7ff fab7 	bl	80a01ec <hal_usart_is_enabled>
 80a0c7e:	e7d7      	b.n	80a0c30 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0c80:	2001      	movs	r0, #1
 80a0c82:	e7c8      	b.n	80a0c16 <pinAvailable+0xa>
 80a0c84:	200003e8 	.word	0x200003e8
 80a0c88:	200003ec 	.word	0x200003ec
 80a0c8c:	080a0bfd 	.word	0x080a0bfd

080a0c90 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0c90:	2817      	cmp	r0, #23
{
 80a0c92:	b538      	push	{r3, r4, r5, lr}
 80a0c94:	4604      	mov	r4, r0
 80a0c96:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0c98:	d80a      	bhi.n	80a0cb0 <pinMode+0x20>
 80a0c9a:	29ff      	cmp	r1, #255	; 0xff
 80a0c9c:	d008      	beq.n	80a0cb0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0c9e:	f7ff ffb5 	bl	80a0c0c <pinAvailable>
 80a0ca2:	b128      	cbz	r0, 80a0cb0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0ca4:	4629      	mov	r1, r5
 80a0ca6:	4620      	mov	r0, r4
}
 80a0ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0cac:	f7ff ba3e 	b.w	80a012c <HAL_Pin_Mode>
}
 80a0cb0:	bd38      	pop	{r3, r4, r5, pc}

080a0cb2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0cb2:	b538      	push	{r3, r4, r5, lr}
 80a0cb4:	4604      	mov	r4, r0
 80a0cb6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0cb8:	f7ff fa40 	bl	80a013c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0cbc:	28ff      	cmp	r0, #255	; 0xff
 80a0cbe:	d010      	beq.n	80a0ce2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a0cc0:	2806      	cmp	r0, #6
 80a0cc2:	d804      	bhi.n	80a0cce <digitalWrite+0x1c>
 80a0cc4:	234d      	movs	r3, #77	; 0x4d
 80a0cc6:	fa23 f000 	lsr.w	r0, r3, r0
 80a0cca:	07c3      	lsls	r3, r0, #31
 80a0ccc:	d409      	bmi.n	80a0ce2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0cce:	4620      	mov	r0, r4
 80a0cd0:	f7ff ff9c 	bl	80a0c0c <pinAvailable>
 80a0cd4:	b128      	cbz	r0, 80a0ce2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0cd6:	4629      	mov	r1, r5
 80a0cd8:	4620      	mov	r0, r4
}
 80a0cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a0cde:	f7ff ba35 	b.w	80a014c <HAL_GPIO_Write>
}
 80a0ce2:	bd38      	pop	{r3, r4, r5, pc}

080a0ce4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0ce4:	4770      	bx	lr
	...

080a0ce8 <_Z20acquireSerial1Bufferv>:
{
 80a0ce8:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a0cea:	2514      	movs	r5, #20
{
 80a0cec:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a0cee:	462a      	mov	r2, r5
 80a0cf0:	2100      	movs	r1, #0
 80a0cf2:	f000 f897 	bl	80a0e24 <memset>
 80a0cf6:	8025      	strh	r5, [r4, #0]
 80a0cf8:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0cfa:	4e07      	ldr	r6, [pc, #28]	; (80a0d18 <_Z20acquireSerial1Bufferv+0x30>)
 80a0cfc:	4628      	mov	r0, r5
 80a0cfe:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a0d00:	8125      	strh	r5, [r4, #8]
 80a0d02:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0d04:	f000 f878 	bl	80a0df8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0d08:	4631      	mov	r1, r6
    };
 80a0d0a:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a0d0c:	4628      	mov	r0, r5
 80a0d0e:	f000 f873 	bl	80a0df8 <_ZnajRKSt9nothrow_t>
    };
 80a0d12:	60e0      	str	r0, [r4, #12]
}
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	bd70      	pop	{r4, r5, r6, pc}
 80a0d18:	080a10b8 	.word	0x080a10b8

080a0d1c <_Z22__fetch_global_Serial1v>:
{
 80a0d1c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0d1e:	4d0e      	ldr	r5, [pc, #56]	; (80a0d58 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a0d20:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a0d22:	7829      	ldrb	r1, [r5, #0]
 80a0d24:	f3bf 8f5b 	dmb	ish
 80a0d28:	f011 0401 	ands.w	r4, r1, #1
 80a0d2c:	d111      	bne.n	80a0d52 <_Z22__fetch_global_Serial1v+0x36>
 80a0d2e:	4628      	mov	r0, r5
 80a0d30:	f7ff f9b5 	bl	80a009e <__cxa_guard_acquire>
 80a0d34:	b168      	cbz	r0, 80a0d52 <_Z22__fetch_global_Serial1v+0x36>
 80a0d36:	a801      	add	r0, sp, #4
 80a0d38:	f7ff ffd6 	bl	80a0ce8 <_Z20acquireSerial1Bufferv>
 80a0d3c:	4621      	mov	r1, r4
 80a0d3e:	aa01      	add	r2, sp, #4
 80a0d40:	4806      	ldr	r0, [pc, #24]	; (80a0d5c <_Z22__fetch_global_Serial1v+0x40>)
 80a0d42:	f7ff fe3b 	bl	80a09bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a0d46:	4628      	mov	r0, r5
 80a0d48:	f7ff f9ae 	bl	80a00a8 <__cxa_guard_release>
 80a0d4c:	4804      	ldr	r0, [pc, #16]	; (80a0d60 <_Z22__fetch_global_Serial1v+0x44>)
 80a0d4e:	f000 f855 	bl	80a0dfc <atexit>
    return serial1;
}
 80a0d52:	4802      	ldr	r0, [pc, #8]	; (80a0d5c <_Z22__fetch_global_Serial1v+0x40>)
 80a0d54:	b007      	add	sp, #28
 80a0d56:	bd30      	pop	{r4, r5, pc}
 80a0d58:	200003f8 	.word	0x200003f8
 80a0d5c:	200003fc 	.word	0x200003fc
 80a0d60:	080a0ce5 	.word	0x080a0ce5

080a0d64 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0d64:	2300      	movs	r3, #0
 80a0d66:	b507      	push	{r0, r1, r2, lr}
 80a0d68:	461a      	mov	r2, r3
 80a0d6a:	4619      	mov	r1, r3
 80a0d6c:	9300      	str	r3, [sp, #0]
 80a0d6e:	4803      	ldr	r0, [pc, #12]	; (80a0d7c <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a0d70:	f7ff fd16 	bl	80a07a0 <_ZN9IPAddressC1Ehhhh>
 80a0d74:	b003      	add	sp, #12
 80a0d76:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0d7a:	bf00      	nop
 80a0d7c:	20000414 	.word	0x20000414

080a0d80 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0d80:	4770      	bx	lr
	...

080a0d84 <_Z17acquireWireBufferv>:
{
 80a0d84:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0d86:	2314      	movs	r3, #20
 80a0d88:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d8a:	4e08      	ldr	r6, [pc, #32]	; (80a0dac <_Z17acquireWireBufferv+0x28>)
{
 80a0d8c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0d8e:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d90:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0d92:	6085      	str	r5, [r0, #8]
 80a0d94:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d96:	4628      	mov	r0, r5
 80a0d98:	f000 f82e 	bl	80a0df8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0d9c:	4631      	mov	r1, r6
	};
 80a0d9e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0da0:	4628      	mov	r0, r5
 80a0da2:	f000 f829 	bl	80a0df8 <_ZnajRKSt9nothrow_t>
	};
 80a0da6:	60e0      	str	r0, [r4, #12]
}
 80a0da8:	4620      	mov	r0, r4
 80a0daa:	bd70      	pop	{r4, r5, r6, pc}
 80a0dac:	080a10b8 	.word	0x080a10b8

080a0db0 <_Z19__fetch_global_Wirev>:
{
 80a0db0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0db2:	4d0e      	ldr	r5, [pc, #56]	; (80a0dec <_Z19__fetch_global_Wirev+0x3c>)
{
 80a0db4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0db6:	7829      	ldrb	r1, [r5, #0]
 80a0db8:	f3bf 8f5b 	dmb	ish
 80a0dbc:	f011 0401 	ands.w	r4, r1, #1
 80a0dc0:	d111      	bne.n	80a0de6 <_Z19__fetch_global_Wirev+0x36>
 80a0dc2:	4628      	mov	r0, r5
 80a0dc4:	f7ff f96b 	bl	80a009e <__cxa_guard_acquire>
 80a0dc8:	b168      	cbz	r0, 80a0de6 <_Z19__fetch_global_Wirev+0x36>
 80a0dca:	a801      	add	r0, sp, #4
 80a0dcc:	f7ff ffda 	bl	80a0d84 <_Z17acquireWireBufferv>
 80a0dd0:	4621      	mov	r1, r4
 80a0dd2:	aa01      	add	r2, sp, #4
 80a0dd4:	4806      	ldr	r0, [pc, #24]	; (80a0df0 <_Z19__fetch_global_Wirev+0x40>)
 80a0dd6:	f7ff fe31 	bl	80a0a3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0dda:	4628      	mov	r0, r5
 80a0ddc:	f7ff f964 	bl	80a00a8 <__cxa_guard_release>
 80a0de0:	4804      	ldr	r0, [pc, #16]	; (80a0df4 <_Z19__fetch_global_Wirev+0x44>)
 80a0de2:	f000 f80b 	bl	80a0dfc <atexit>
	return wire;
}
 80a0de6:	4802      	ldr	r0, [pc, #8]	; (80a0df0 <_Z19__fetch_global_Wirev+0x40>)
 80a0de8:	b007      	add	sp, #28
 80a0dea:	bd30      	pop	{r4, r5, pc}
 80a0dec:	2000042c 	.word	0x2000042c
 80a0df0:	20000430 	.word	0x20000430
 80a0df4:	080a0d81 	.word	0x080a0d81

080a0df8 <_ZnajRKSt9nothrow_t>:
 80a0df8:	f7ff b94d 	b.w	80a0096 <_Znaj>

080a0dfc <atexit>:
 80a0dfc:	2300      	movs	r3, #0
 80a0dfe:	4601      	mov	r1, r0
 80a0e00:	461a      	mov	r2, r3
 80a0e02:	4618      	mov	r0, r3
 80a0e04:	f000 b84c 	b.w	80a0ea0 <__register_exitproc>

080a0e08 <memcpy>:
 80a0e08:	440a      	add	r2, r1
 80a0e0a:	4291      	cmp	r1, r2
 80a0e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 80a0e10:	d100      	bne.n	80a0e14 <memcpy+0xc>
 80a0e12:	4770      	bx	lr
 80a0e14:	b510      	push	{r4, lr}
 80a0e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0e1a:	4291      	cmp	r1, r2
 80a0e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0e20:	d1f9      	bne.n	80a0e16 <memcpy+0xe>
 80a0e22:	bd10      	pop	{r4, pc}

080a0e24 <memset>:
 80a0e24:	4603      	mov	r3, r0
 80a0e26:	4402      	add	r2, r0
 80a0e28:	4293      	cmp	r3, r2
 80a0e2a:	d100      	bne.n	80a0e2e <memset+0xa>
 80a0e2c:	4770      	bx	lr
 80a0e2e:	f803 1b01 	strb.w	r1, [r3], #1
 80a0e32:	e7f9      	b.n	80a0e28 <memset+0x4>

080a0e34 <srand>:
 80a0e34:	b538      	push	{r3, r4, r5, lr}
 80a0e36:	4b10      	ldr	r3, [pc, #64]	; (80a0e78 <srand+0x44>)
 80a0e38:	4604      	mov	r4, r0
 80a0e3a:	681d      	ldr	r5, [r3, #0]
 80a0e3c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0e3e:	b9b3      	cbnz	r3, 80a0e6e <srand+0x3a>
 80a0e40:	2018      	movs	r0, #24
 80a0e42:	f7ff fb01 	bl	80a0448 <malloc>
 80a0e46:	4602      	mov	r2, r0
 80a0e48:	63a8      	str	r0, [r5, #56]	; 0x38
 80a0e4a:	b920      	cbnz	r0, 80a0e56 <srand+0x22>
 80a0e4c:	2142      	movs	r1, #66	; 0x42
 80a0e4e:	4b0b      	ldr	r3, [pc, #44]	; (80a0e7c <srand+0x48>)
 80a0e50:	480b      	ldr	r0, [pc, #44]	; (80a0e80 <srand+0x4c>)
 80a0e52:	f7ff fb09 	bl	80a0468 <__assert_func>
 80a0e56:	490b      	ldr	r1, [pc, #44]	; (80a0e84 <srand+0x50>)
 80a0e58:	4b0b      	ldr	r3, [pc, #44]	; (80a0e88 <srand+0x54>)
 80a0e5a:	e9c0 1300 	strd	r1, r3, [r0]
 80a0e5e:	4b0b      	ldr	r3, [pc, #44]	; (80a0e8c <srand+0x58>)
 80a0e60:	2100      	movs	r1, #0
 80a0e62:	6083      	str	r3, [r0, #8]
 80a0e64:	230b      	movs	r3, #11
 80a0e66:	8183      	strh	r3, [r0, #12]
 80a0e68:	2001      	movs	r0, #1
 80a0e6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a0e6e:	2200      	movs	r2, #0
 80a0e70:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a0e72:	611c      	str	r4, [r3, #16]
 80a0e74:	615a      	str	r2, [r3, #20]
 80a0e76:	bd38      	pop	{r3, r4, r5, pc}
 80a0e78:	20000008 	.word	0x20000008
 80a0e7c:	080a10b9 	.word	0x080a10b9
 80a0e80:	080a10d0 	.word	0x080a10d0
 80a0e84:	abcd330e 	.word	0xabcd330e
 80a0e88:	e66d1234 	.word	0xe66d1234
 80a0e8c:	0005deec 	.word	0x0005deec

080a0e90 <strlen>:
 80a0e90:	4603      	mov	r3, r0
 80a0e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a0e96:	2a00      	cmp	r2, #0
 80a0e98:	d1fb      	bne.n	80a0e92 <strlen+0x2>
 80a0e9a:	1a18      	subs	r0, r3, r0
 80a0e9c:	3801      	subs	r0, #1
 80a0e9e:	4770      	bx	lr

080a0ea0 <__register_exitproc>:
 80a0ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0ea4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a0f54 <__register_exitproc+0xb4>
 80a0ea8:	4606      	mov	r6, r0
 80a0eaa:	f8d8 0000 	ldr.w	r0, [r8]
 80a0eae:	461f      	mov	r7, r3
 80a0eb0:	460d      	mov	r5, r1
 80a0eb2:	4691      	mov	r9, r2
 80a0eb4:	f000 f858 	bl	80a0f68 <__retarget_lock_acquire_recursive>
 80a0eb8:	4b27      	ldr	r3, [pc, #156]	; (80a0f58 <__register_exitproc+0xb8>)
 80a0eba:	681c      	ldr	r4, [r3, #0]
 80a0ebc:	b934      	cbnz	r4, 80a0ecc <__register_exitproc+0x2c>
 80a0ebe:	4c27      	ldr	r4, [pc, #156]	; (80a0f5c <__register_exitproc+0xbc>)
 80a0ec0:	601c      	str	r4, [r3, #0]
 80a0ec2:	4b27      	ldr	r3, [pc, #156]	; (80a0f60 <__register_exitproc+0xc0>)
 80a0ec4:	b113      	cbz	r3, 80a0ecc <__register_exitproc+0x2c>
 80a0ec6:	681b      	ldr	r3, [r3, #0]
 80a0ec8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a0ecc:	6863      	ldr	r3, [r4, #4]
 80a0ece:	2b1f      	cmp	r3, #31
 80a0ed0:	dd07      	ble.n	80a0ee2 <__register_exitproc+0x42>
 80a0ed2:	f8d8 0000 	ldr.w	r0, [r8]
 80a0ed6:	f000 f849 	bl	80a0f6c <__retarget_lock_release_recursive>
 80a0eda:	f04f 30ff 	mov.w	r0, #4294967295
 80a0ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0ee2:	b35e      	cbz	r6, 80a0f3c <__register_exitproc+0x9c>
 80a0ee4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a0ee8:	b988      	cbnz	r0, 80a0f0e <__register_exitproc+0x6e>
 80a0eea:	4b1e      	ldr	r3, [pc, #120]	; (80a0f64 <__register_exitproc+0xc4>)
 80a0eec:	b923      	cbnz	r3, 80a0ef8 <__register_exitproc+0x58>
 80a0eee:	f8d8 0000 	ldr.w	r0, [r8]
 80a0ef2:	f000 f83a 	bl	80a0f6a <__retarget_lock_release>
 80a0ef6:	e7f0      	b.n	80a0eda <__register_exitproc+0x3a>
 80a0ef8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a0efc:	f7ff faa4 	bl	80a0448 <malloc>
 80a0f00:	2800      	cmp	r0, #0
 80a0f02:	d0f4      	beq.n	80a0eee <__register_exitproc+0x4e>
 80a0f04:	2300      	movs	r3, #0
 80a0f06:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a0f0a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a0f0e:	2201      	movs	r2, #1
 80a0f10:	6863      	ldr	r3, [r4, #4]
 80a0f12:	2e02      	cmp	r6, #2
 80a0f14:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a0f18:	fa02 f203 	lsl.w	r2, r2, r3
 80a0f1c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a0f20:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a0f24:	ea43 0302 	orr.w	r3, r3, r2
 80a0f28:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a0f2c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a0f30:	bf02      	ittt	eq
 80a0f32:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a0f36:	4313      	orreq	r3, r2
 80a0f38:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a0f3c:	6863      	ldr	r3, [r4, #4]
 80a0f3e:	f8d8 0000 	ldr.w	r0, [r8]
 80a0f42:	1c5a      	adds	r2, r3, #1
 80a0f44:	3302      	adds	r3, #2
 80a0f46:	6062      	str	r2, [r4, #4]
 80a0f48:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a0f4c:	f000 f80e 	bl	80a0f6c <__retarget_lock_release_recursive>
 80a0f50:	2000      	movs	r0, #0
 80a0f52:	e7c4      	b.n	80a0ede <__register_exitproc+0x3e>
 80a0f54:	2000006c 	.word	0x2000006c
 80a0f58:	200004d0 	.word	0x200004d0
 80a0f5c:	20000444 	.word	0x20000444
 80a0f60:	00000000 	.word	0x00000000
 80a0f64:	080a0449 	.word	0x080a0449

080a0f68 <__retarget_lock_acquire_recursive>:
 80a0f68:	4770      	bx	lr

080a0f6a <__retarget_lock_release>:
 80a0f6a:	4770      	bx	lr

080a0f6c <__retarget_lock_release_recursive>:
 80a0f6c:	4770      	bx	lr

080a0f6e <link_code_end>:
	...

080a0f70 <dynalib_user>:
 80a0f70:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a0f80:	0000 0000 7061 0070 5925 252d 2d6d 6425     ....app.%Y-%m-%d
 80a0f90:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a0fa0:	6d69 0065                                   ime.

080a0fa4 <_ZTV9IPAddress>:
	...
 80a0fac:	06f3 080a 06f1 080a 0725 080a               ........%...

080a0fb8 <_ZTV9USBSerial>:
	...
 80a0fc0:	07bf 080a 0825 080a 07fd 080a 04cd 080a     ....%...........
 80a0fd0:	07ef 080a 07c1 080a 07d1 080a 081f 080a     ................
 80a0fe0:	07e1 080a 07b9 080a                         ........

080a0fe8 <_ZTV11USARTSerial>:
	...
 80a0ff0:	0945 080a 09ad 080a 0989 080a 04cd 080a     E...............
 80a1000:	0959 080a 0975 080a 0967 080a 0983 080a     Y...u...g.......
 80a1010:	0947 080a 094b 080a                         G...K...

080a1018 <_ZTV7TwoWire>:
	...
 80a1020:	09e5 080a 0a2f 080a 0a07 080a 09e7 080a     ..../...........
 80a1030:	0a0f 080a 0a17 080a 0a1f 080a 0a27 080a     ............'...

080a1040 <_ZTVN5spark9WiFiClassE>:
	...
 80a1048:	0b03 080a 0af9 080a 0aef 080a 0a61 080a     ............a...
 80a1058:	0ae3 080a 0ad7 080a 0b61 080a 0b69 080a     ........a...i...
 80a1068:	0acb 080a 0ac3 080a 0ab9 080a 0aaf 080a     ................
 80a1078:	0a6b 080a                                   k...

080a107c <_ZTVN5spark12NetworkClassE>:
	...
 80a1084:	0b21 080a 0b2b 080a 0b35 080a 0b3f 080a     !...+...5...?...
 80a1094:	0b49 080a 0b55 080a 0b61 080a 0b69 080a     I...U...a...i...
 80a10a4:	0b71 080a 0b7d 080a 0b85 080a 0b8f 080a     q...}...........
 80a10b4:	0b99 080a                                   ....

080a10b8 <_ZSt7nothrow>:
 80a10b8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 80a10c8:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 80a10d8:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 80a10e8:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 80a10f8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 80a1108:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 80a1118:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 80a1128:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 80a1138:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 80a1148:	646e 632e                                    nd.c.

080a114d <link_const_variable_data_end>:
 80a114d:	00          	.byte	0x00
	...

080a1150 <link_constructors_location>:
 80a1150:	080a0119 	.word	0x080a0119
 80a1154:	080a04a9 	.word	0x080a04a9
 80a1158:	080a0559 	.word	0x080a0559
 80a115c:	080a0569 	.word	0x080a0569
 80a1160:	080a0585 	.word	0x080a0585
 80a1164:	080a0b0d 	.word	0x080a0b0d
 80a1168:	080a0be9 	.word	0x080a0be9
 80a116c:	080a0d65 	.word	0x080a0d65
